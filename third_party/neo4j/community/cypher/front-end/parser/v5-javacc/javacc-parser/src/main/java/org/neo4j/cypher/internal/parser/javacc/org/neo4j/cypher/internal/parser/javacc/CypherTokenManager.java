/* CypherTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. CypherTokenManager.java */
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [https://neo4j.com]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neo4j.cypher.internal.parser.javacc;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.Stack;
import org.neo4j.cypher.internal.parser.common.ast.factory.AccessType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ASTExceptionFactory;
import org.neo4j.cypher.internal.ast.factory.ASTFactory;
import org.neo4j.cypher.internal.ast.factory.ASTFactory.StringPos;
import org.neo4j.cypher.internal.parser.common.ast.factory.ActionType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ConstraintType;
import org.neo4j.cypher.internal.parser.common.ast.factory.CallInTxsOnErrorBehaviourType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ConstraintVersion;
import org.neo4j.cypher.internal.parser.common.ast.factory.CreateIndexTypes;
import org.neo4j.cypher.internal.parser.common.ast.factory.HintIndexType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ParameterType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ParserCypherTypeName;
import org.neo4j.cypher.internal.parser.common.ast.factory.ParserNormalForm;
import org.neo4j.cypher.internal.parser.common.ast.factory.ParserTrimSpecification;
import org.neo4j.cypher.internal.parser.common.ast.factory.ScopeType;
import org.neo4j.cypher.internal.parser.common.ast.factory.ShowCommandFilterTypes;
import org.neo4j.cypher.internal.parser.common.ast.factory.SimpleEither;
import org.neo4j.cypher.internal.parser.common.InvalidUnicodeLiteral;
import org.neo4j.cypher.internal.parser.common.deprecation.DeprecatedChars;
import org.neo4j.gqlstatus.GqlHelper;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CypherTokenManager implements CypherConstants {
    public void CommonTokenAction( Token t )
    {
        CypherCharStream ccStream = (CypherCharStream) input_stream;
        t.beginOffset = ccStream.getBeginOffset();
        t.endOffset = ccStream.getEndOffset();
    }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 11:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 28:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 29:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 30:
         jjmatchedKind = 8;
         return jjMoveNfa_0(0, 0);
      case 31:
         jjmatchedKind = 9;
         return jjMoveNfa_0(0, 0);
      case ' ':
         jjmatchedKind = 10;
         return jjMoveNfa_0(0, 0);
      case '!':
         jjmatchedKind = 203;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x20000000L, 0x0L, 0x0L);
      case '"':
         jjmatchedKind = 53;
         return jjMoveNfa_0(0, 0);
      case '$':
         jjmatchedKind = 137;
         return jjMoveNfa_0(0, 0);
      case '%':
         jjmatchedKind = 220;
         return jjMoveNfa_0(0, 0);
      case '&':
         jjmatchedKind = 202;
         return jjMoveNfa_0(0, 0);
      case '\'':
         jjmatchedKind = 41;
         return jjMoveNfa_0(0, 0);
      case '(':
         jjmatchedKind = 213;
         return jjMoveNfa_0(0, 0);
      case ')':
         jjmatchedKind = 297;
         return jjMoveNfa_0(0, 0);
      case '*':
         jjmatchedKind = 329;
         return jjMoveNfa_0(0, 0);
      case '+':
         jjmatchedKind = 257;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x4L, 0x0L);
      case ',':
         jjmatchedKind = 107;
         return jjMoveNfa_0(0, 0);
      case '-':
         jjmatchedKind = 219;
         return jjMoveNfa_0(0, 0);
      case '.':
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L, 0x0L, 0x0L, 0x0L);
      case '/':
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case ':':
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case ';':
         jjmatchedKind = 305;
         return jjMoveNfa_0(0, 0);
      case '<':
         jjmatchedKind = 214;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40004000L, 0x0L, 0x0L);
      case '=':
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x2000000L, 0x0L);
      case '>':
         jjmatchedKind = 182;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000000L, 0x0L, 0x0L, 0x0L);
      case '?':
         jjmatchedKind = 273;
         return jjMoveNfa_0(0, 0);
      case 'A':
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffe0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'B':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fe000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'C':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fff1f800000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'D':
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00000000000000L, 0x1f19ffL, 0x0L, 0x0L, 0x0L);
      case 'E':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fbfe00000L, 0x0L, 0x0L, 0x0L);
      case 'F':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe000000000L, 0x0L, 0x0L, 0x0L);
      case 'G':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e000000000000L, 0x0L, 0x0L, 0x0L);
      case 'H':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x180000000000000L, 0x0L, 0x0L, 0x0L);
      case 'I':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe00000000000000L, 0x3fL, 0x0L, 0x0L);
      case 'J':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 'K':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80L, 0x0L, 0x0L);
      case 'L':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1f8300L, 0x0L, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7800000L, 0x0L, 0x0L);
      case 'N':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ffff80000000L, 0x0L, 0x0L);
      case 'O':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fe000000000000L, 0x0L, 0x0L);
      case 'P':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf800000000000000L, 0x1ff99L, 0x0L);
      case 'R':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1fffde40040L, 0x0L);
      case 'S':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xfffdfc0000000000L, 0xfL);
      case 'T':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7ffdf0L);
      case 'U':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xff800000L);
      case 'V':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1f00000000L);
      case 'W':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7e000000000L);
      case 'X':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000L);
      case 'Y':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000000L);
      case 'Z':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x600000000000L);
      case '[':
         jjmatchedKind = 204;
         return jjMoveNfa_0(0, 0);
      case ']':
         jjmatchedKind = 275;
         return jjMoveNfa_0(0, 0);
      case '^':
         jjmatchedKind = 261;
         return jjMoveNfa_0(0, 0);
      case '`':
         jjmatchedKind = 65;
         return jjMoveNfa_0(0, 0);
      case 'a':
         return jjMoveStringLiteralDfa1_0(0x0L, 0xffffe0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7fe000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fff1f800000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 'd':
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfc00000000000000L, 0x1f19ffL, 0x0L, 0x0L, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fbfe00000L, 0x0L, 0x0L, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xffe000000000L, 0x0L, 0x0L, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3e000000000000L, 0x0L, 0x0L, 0x0L);
      case 'h':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x180000000000000L, 0x0L, 0x0L, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe00000000000000L, 0x3fL, 0x0L, 0x0L);
      case 'j':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x40L, 0x0L, 0x0L);
      case 'k':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80L, 0x0L, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1f8300L, 0x0L, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7800000L, 0x0L, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1ffff80000000L, 0x0L, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7fe000000000000L, 0x0L, 0x0L);
      case 'p':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf800000000000000L, 0x1ff99L, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1fffde40040L, 0x0L);
      case 's':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xfffdfc0000000000L, 0xfL);
      case 't':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7ffdf0L);
      case 'u':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0xff800000L);
      case 'v':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1f00000000L);
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x7e000000000L);
      case 'x':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x80000000000L);
      case 'y':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x100000000000L);
      case 'z':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x600000000000L);
      case '{':
         jjmatchedKind = 205;
         return jjMoveNfa_0(0, 0);
      case '|':
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400L, 0x0L, 0x0L, 0x0L);
      case '}':
         jjmatchedKind = 276;
         return jjMoveNfa_0(0, 0);
      case 160:
         jjmatchedKind = 11;
         return jjMoveNfa_0(0, 0);
      case 5760:
         jjmatchedKind = 12;
         return jjMoveNfa_0(0, 0);
      case 8192:
         jjmatchedKind = 13;
         return jjMoveNfa_0(0, 0);
      case 8193:
         jjmatchedKind = 14;
         return jjMoveNfa_0(0, 0);
      case 8194:
         jjmatchedKind = 15;
         return jjMoveNfa_0(0, 0);
      case 8195:
         jjmatchedKind = 16;
         return jjMoveNfa_0(0, 0);
      case 8196:
         jjmatchedKind = 17;
         return jjMoveNfa_0(0, 0);
      case 8197:
         jjmatchedKind = 18;
         return jjMoveNfa_0(0, 0);
      case 8198:
         jjmatchedKind = 19;
         return jjMoveNfa_0(0, 0);
      case 8199:
         jjmatchedKind = 20;
         return jjMoveNfa_0(0, 0);
      case 8200:
         jjmatchedKind = 21;
         return jjMoveNfa_0(0, 0);
      case 8201:
         jjmatchedKind = 22;
         return jjMoveNfa_0(0, 0);
      case 8202:
         jjmatchedKind = 23;
         return jjMoveNfa_0(0, 0);
      case 8232:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 8233:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 8239:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 8287:
         jjmatchedKind = 27;
         return jjMoveNfa_0(0, 0);
      case 12288:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case '*':
         if ((active0 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
         }
         break;
      case '.':
         if ((active2 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         break;
      case ':':
         if ((active1 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 1;
         }
         break;
      case '=':
         if ((active2 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 1;
         }
         break;
      case '>':
         if ((active3 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 1;
         }
         break;
      case 'A':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x7c00003800000000L, active2, 0x6000200000L, active3, 0x7800000383800300L, active4, 0x40000L, active5, 0x2300000010L);
      case 'B':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'C':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x60L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000L, active5, 0x0L);
      case 'D':
         if ((active2 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x180L, active2, 0x400000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'E':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x800000000001ffL, active3, 0x8000004004008080L, active4, 0x7df81ffde00040L, active5, 0x1c00000060L);
      case 'F':
         if ((active2 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x4003c00000000L, active4, 0x0L, active5, 0x0L);
      case 'H':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x4000000000L, active2, 0x0L, active3, 0x0L, active4, 0x380000000000000L, active5, 0xc000000080L);
      case 'I':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x8002000000L, active2, 0x18000001800L, active3, 0x30000L, active4, 0xc00000000000000L, active5, 0x130000000d00L);
      case 'K':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000000000L, active5, 0x0L);
      case 'L':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x3e00L, active2, 0x20007000000L, active3, 0x0L, active4, 0x1L, active5, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x1800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'N':
         if ((active2 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0xc000L, active2, 0xc000000038800000L, active3, 0x1000000000001fL, active4, 0x0L, active5, 0x7800000L);
      case 'O':
         if ((active5 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x7ff1003c000000L, active2, 0x1000c0000000000L, active3, 0xff80001c0040L, active4, 0x1e000000018L, active5, 0x680000002000L);
      case 'P':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0xe0000000000000L, active4, 0x0L, active5, 0x0L);
      case 'R':
         if ((active3 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x800000c0010000L, active2, 0x3e101000070000L, active3, 0x200000000000000L, active4, 0x1ff80L, active5, 0x400080fc000L);
      case 'S':
         if ((active1 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x1000000003c0000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0xf0000000L);
      case 'T':
         if ((active1 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active3, 0x0L, active4, 0xe000000000000000L, active5, 0x3L);
      case 'U':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x200000200800000L, active2, 0xe00000180000L, active3, 0x401000000000000L, active4, 0x0L, active5, 0xcL);
      case 'X':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0xf80000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'Y':
         if ((active1 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x700000L);
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x7c00003800000000L, active2, 0x6000200000L, active3, 0x7800000383800300L, active4, 0x40000L, active5, 0x2300000010L);
      case 'b':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x8000000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x60L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000L, active5, 0x0L);
      case 'd':
         if ((active2 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x180L, active2, 0x400000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x800000000001ffL, active3, 0x8000004004008080L, active4, 0x7df81ffde00040L, active5, 0x1c00000060L);
      case 'f':
         if ((active2 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x4003c00000000L, active4, 0x0L, active5, 0x0L);
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x4000000000L, active2, 0x0L, active3, 0x0L, active4, 0x380000000000000L, active5, 0xc000000080L);
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x8002000000L, active2, 0x18000001800L, active3, 0x30000L, active4, 0xc00000000000000L, active5, 0x130000000d00L);
      case 'k':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000000000L, active5, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x3e00L, active2, 0x20007000000L, active3, 0x0L, active4, 0x1L, active5, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x1800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'n':
         if ((active2 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0xc000L, active2, 0xc000000038800000L, active3, 0x1000000000001fL, active4, 0x0L, active5, 0x7800000L);
      case 'o':
         if ((active5 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 332;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x7ff1003c000000L, active2, 0x1000c0000000000L, active3, 0xff80001c0040L, active4, 0x1e000000018L, active5, 0x680000002000L);
      case 'p':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0xe0000000000000L, active4, 0x0L, active5, 0x0L);
      case 'r':
         if ((active3 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x800000c0010000L, active2, 0x3e101000070000L, active3, 0x200000000000000L, active4, 0x1ff80L, active5, 0x400080fc000L);
      case 's':
         if ((active1 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x1000000003c0000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0xf0000000L);
      case 't':
         if ((active1 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x100000000L, active2, 0x0L, active3, 0x0L, active4, 0xe000000000000000L, active5, 0x3L);
      case 'u':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x200000200800000L, active2, 0xe00000180000L, active3, 0x401000000000000L, active4, 0x0L, active5, 0xcL);
      case 'x':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0xf80000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'y':
         if ((active1 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x700000L);
      case '|':
         if ((active2 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 1;
         }
         break;
      case '~':
         if ((active4 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 281;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa3_0(active1, 0x4000000000L, active2, 0x8e000000800001L, active3, 0x48000L, active4, 0xe000040000600001L, active5, 0x3c000L);
      case 'B':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x300L, active4, 0x0L, active5, 0x0L);
      case 'C':
         if ((active1 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x80020L, active2, 0x8200000L, active3, 0x80000L, active4, 0xf00000000000L, active5, 0x400000000L);
      case 'D':
         if ((active1 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x8000000000L, active2, 0xc000000020000000L, active3, 0x200038000000000L, active4, 0x800000L, active5, 0x0L);
      case 'E':
         if ((active5 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x80000040000000L, active2, 0x8183000000L, active3, 0x0L, active4, 0x1000000000000L, active5, 0x10c060000080L);
      case 'F':
         if ((active3 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x806L, active3, 0x4000000000002L, active4, 0x0L, active5, 0x0L);
      case 'G':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x400000L, active3, 0x0L, active4, 0x400000000000000L, active5, 0x0L);
      case 'I':
         return jjMoveStringLiteralDfa3_0(active1, 0x280000600L, active2, 0x2e00010000L, active3, 0x40L, active4, 0x1000000000000788L, active5, 0x42083840000L);
      case 'K':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x3000000000L, active4, 0x0L, active5, 0x0L);
      case 'L':
         if ((active1 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x10800000800L, active2, 0x204000000008L, active3, 0x11000000000000L, active4, 0x6018000000L, active5, 0x100000000L);
      case 'M':
         return jjMoveStringLiteralDfa3_0(active1, 0x8000f00000000180L, active2, 0x1100000000080000L, active3, 0x180010000L, active4, 0x20000000L, active5, 0xd00L);
      case 'N':
         if ((active3 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x2f000002000000L, active2, 0xc10000000010L, active3, 0x40000800000L, active4, 0x800000001040000L, active5, 0x600000000000L);
      case 'O':
         return jjMoveStringLiteralDfa3_0(active1, 0x1c000000L, active2, 0x30120000020000L, active3, 0x100000L, active4, 0x38000000001f800L, active5, 0x1L);
      case 'P':
         if ((active3 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x10000000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0xc0000050L, active5, 0x702004L);
      case 'Q':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x300000000L, active5, 0x0L);
      case 'R':
         if ((active2 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x200000100010000L, active2, 0x81000100000L, active3, 0x8000180004000000L, active4, 0xc000000000000L, active5, 0x1a00000032L);
      case 'S':
         return jjMoveStringLiteralDfa3_0(active1, 0x3000300000L, active2, 0x40010e0L, active3, 0x1800000000020004L, active4, 0x400000000L, active5, 0x8L);
      case 'T':
         if ((active3 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x7c00000020802040L, active2, 0x100L, active3, 0x64e0400002000010L, active4, 0x60000800000000L, active5, 0x30000000000L);
      case 'U':
         return jjMoveStringLiteralDfa3_0(active1, 0x40000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x80000L);
      case 'V':
         if ((active1 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000L, active5, 0x0L);
      case 'W':
         if ((active3 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x800000000000L, active4, 0x10000000000L, active5, 0x4000000L);
      case 'X':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40L);
      case 'Y':
         if ((active1 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x40000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'a':
         return jjMoveStringLiteralDfa3_0(active1, 0x4000000000L, active2, 0x8e000000800001L, active3, 0x48000L, active4, 0xe000040000600001L, active5, 0x3c000L);
      case 'b':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x300L, active4, 0x0L, active5, 0x0L);
      case 'c':
         if ((active1 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x80020L, active2, 0x8200000L, active3, 0x80000L, active4, 0xf00000000000L, active5, 0x400000000L);
      case 'd':
         if ((active1 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 156;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x8000000000L, active2, 0xc000000020000000L, active3, 0x200038000000000L, active4, 0x800000L, active5, 0x0L);
      case 'e':
         if ((active5 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 348;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x80000040000000L, active2, 0x8183000000L, active3, 0x0L, active4, 0x1000000000000L, active5, 0x10c060000080L);
      case 'f':
         if ((active3 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x806L, active3, 0x4000000000002L, active4, 0x0L, active5, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x400000L, active3, 0x0L, active4, 0x400000000000000L, active5, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa3_0(active1, 0x280000600L, active2, 0x2e00010000L, active3, 0x40L, active4, 0x1000000000000788L, active5, 0x42083840000L);
      case 'k':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x3000000000L, active4, 0x0L, active5, 0x0L);
      case 'l':
         if ((active1 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 282;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 347;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x10800000800L, active2, 0x204000000008L, active3, 0x11000000000000L, active4, 0x6018000000L, active5, 0x100000000L);
      case 'm':
         return jjMoveStringLiteralDfa3_0(active1, 0x8000f00000000180L, active2, 0x1100000000080000L, active3, 0x180010000L, active4, 0x20000000L, active5, 0xd00L);
      case 'n':
         if ((active3 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x2f000002000000L, active2, 0xc10000000010L, active3, 0x40000800000L, active4, 0x800000001040000L, active5, 0x600000000000L);
      case 'o':
         return jjMoveStringLiteralDfa3_0(active1, 0x1c000000L, active2, 0x30120000020000L, active3, 0x100000L, active4, 0x38000000001f800L, active5, 0x1L);
      case 'p':
         if ((active3 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x10000000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0xc0000050L, active5, 0x702004L);
      case 'q':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x300000000L, active5, 0x0L);
      case 'r':
         if ((active2 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active5 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 363;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x200000100010000L, active2, 0x81000100000L, active3, 0x8000180004000000L, active4, 0xc000000000000L, active5, 0x1a00000032L);
      case 's':
         return jjMoveStringLiteralDfa3_0(active1, 0x3000300000L, active2, 0x40010e0L, active3, 0x1800000000020004L, active4, 0x400000000L, active5, 0x8L);
      case 't':
         if ((active3 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x7c00000020802040L, active2, 0x100L, active3, 0x64e0400002000010L, active4, 0x60000800000000L, active5, 0x30000000000L);
      case 'u':
         return jjMoveStringLiteralDfa3_0(active1, 0x40000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x80000L);
      case 'v':
         if ((active1 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000L, active5, 0x0L);
      case 'w':
         if ((active3 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x800000000000L, active4, 0x10000000000L, active5, 0x4000000L);
      case 'x':
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x40L);
      case 'y':
         if ((active1 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active1, 0x0L, active2, 0x40000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private int jjMoveStringLiteralDfa3_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 'A':
         if ((active1 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x1880000040010600L, active2, 0x20000100102L, active3, 0x800000880000L, active4, 0x19000000L, active5, 0x0L);
      case 'B':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x800000L, active3, 0x0L, active4, 0x0L, active5, 0x800000000L);
      case 'C':
         if ((active2 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x1001000000000L, active2, 0xc00180000040L, active3, 0x2000000L, active4, 0x1800L, active5, 0x200000000L);
      case 'D':
         if ((active3 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x2000000L, active2, 0x80000000000000L, active3, 0x8000L, active4, 0x0L, active5, 0x0L);
      case 'E':
         if ((active1 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x4000000180182020L, active2, 0xc800080000000008L, active3, 0x200030100000314L, active4, 0x4000000040L, active5, 0x400000600c00L);
      case 'F':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x800L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'G':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x4000000L, active4, 0x800000000040000L, active5, 0x10L);
      case 'H':
         if ((active1 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x4000400000000000L, active4, 0x0L, active5, 0x20000000000L);
      case 'I':
         return jjMoveStringLiteralDfa4_0(active1, 0x2001c0L, active2, 0x10000000004L, active3, 0x80e0000000010002L, active4, 0x1L, active5, 0x4004002L);
      case 'K':
         if ((active4 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x100000L, active4, 0x0L, active5, 0x0L);
      case 'L':
         if ((active1 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x10208000000L, active2, 0x208000000001L, active3, 0x0L, active4, 0x40400000L, active5, 0x100000000000L);
      case 'M':
         if ((active2 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x700000000000L, active2, 0x3000000L, active3, 0x180000000000L, active4, 0x180L, active5, 0x20L);
      case 'N':
         if ((active3 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x40004000000000L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x400000000000008L, active5, 0x80018000L);
      case 'O':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x1000000000L, active3, 0x0L, active4, 0xf010a0000000L, active5, 0x802000L);
      case 'P':
         if ((active2 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x800000000000L, active2, 0xc000000000000L, active3, 0x400000000000000L, active4, 0x6000L, active5, 0xcL);
      case 'Q':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x3000000L);
      case 'R':
         if ((active1 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x200000000000000L, active2, 0x8040000L, active3, 0x0L, active4, 0x6180000000000000L, active5, 0x8040000000L);
      case 'S':
         if ((active1 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x6000010000800L, active2, 0x4e00000000L, active3, 0x1804000000000000L, active4, 0x0L, active5, 0x0L);
      case 'T':
         if ((active3 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x28000000000000L, active2, 0x1080L, active3, 0x0L, active4, 0x8060000400000000L, active5, 0x41400000000L);
      case 'U':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x1030000000000000L, active3, 0x0L, active4, 0xb00800010L, active5, 0x100000000L);
      case 'V':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x10000L, active3, 0x0L, active4, 0xc000000018600L, active5, 0x20000L);
      case 'W':
         if ((active4 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 3;
         }
         break;
      case 'Y':
         if ((active1 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 3;
         }
         break;
      case 'a':
         if ((active1 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x1880000040010600L, active2, 0x20000100102L, active3, 0x800000880000L, active4, 0x19000000L, active5, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x800000L, active3, 0x0L, active4, 0x0L, active5, 0x800000000L);
      case 'c':
         if ((active2 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x1001000000000L, active2, 0xc00180000040L, active3, 0x2000000L, active4, 0x1800L, active5, 0x200000000L);
      case 'd':
         if ((active3 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 210;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 277;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x2000000L, active2, 0x80000000000000L, active3, 0x8000L, active4, 0x0L, active5, 0x0L);
      case 'e':
         if ((active1 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 154;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 328;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 339;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 340;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 365;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x4000000180182020L, active2, 0xc800080000000008L, active3, 0x200030100000314L, active4, 0x4000000040L, active5, 0x400000600c00L);
      case 'f':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x800L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x4000000L, active4, 0x800000000040000L, active5, 0x10L);
      case 'h':
         if ((active1 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 360;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x4000400000000000L, active4, 0x0L, active5, 0x20000000000L);
      case 'i':
         return jjMoveStringLiteralDfa4_0(active1, 0x2001c0L, active2, 0x10000000004L, active3, 0x80e0000000010002L, active4, 0x1L, active5, 0x4004002L);
      case 'k':
         if ((active4 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x100000L, active4, 0x0L, active5, 0x0L);
      case 'l':
         if ((active1 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x10208000000L, active2, 0x208000000001L, active3, 0x0L, active4, 0x40400000L, active5, 0x100000000000L);
      case 'm':
         if ((active2 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 338;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x700000000000L, active2, 0x3000000L, active3, 0x180000000000L, active4, 0x180L, active5, 0x20L);
      case 'n':
         if ((active3 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 327;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 358;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x40004000000000L, active2, 0x2000000000000L, active3, 0x0L, active4, 0x400000000000008L, active5, 0x80018000L);
      case 'o':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x1000000000L, active3, 0x0L, active4, 0xf010a0000000L, active5, 0x802000L);
      case 'p':
         if ((active2 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 145;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 320;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x800000000000L, active2, 0xc000000000000L, active3, 0x400000000000000L, active4, 0x6000L, active5, 0xcL);
      case 'q':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x3000000L);
      case 'r':
         if ((active1 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 349;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x200000000000000L, active2, 0x8040000L, active3, 0x0L, active4, 0x6180000000000000L, active5, 0x8040000000L);
      case 's':
         if ((active1 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 296;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x6000010000800L, active2, 0x4e00000000L, active3, 0x1804000000000000L, active4, 0x0L, active5, 0x0L);
      case 't':
         if ((active3 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 3;
         }
         else if ((active5 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 357;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active1, 0x28000000000000L, active2, 0x1080L, active3, 0x0L, active4, 0x8060000400000000L, active5, 0x41400000000L);
      case 'u':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x1030000000000000L, active3, 0x0L, active4, 0xb00800010L, active5, 0x100000000L);
      case 'v':
         return jjMoveStringLiteralDfa4_0(active1, 0x0L, active2, 0x10000L, active3, 0x0L, active4, 0xc000000018600L, active5, 0x20000L);
      case 'w':
         if ((active4 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 3;
         }
         break;
      case 'y':
         if ((active1 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa5_0(active1, 0x8301000000000L, active2, 0x80000000000L, active3, 0x180000000000L, active4, 0x400001c0L, active5, 0x0L);
      case 'B':
         return jjMoveStringLiteralDfa5_0(active1, 0x1800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'C':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x100L, active3, 0x0L, active4, 0x800000L, active5, 0x0L);
      case 'D':
         if ((active5 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'E':
         if ((active1 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x200010008000000L, active2, 0x80000003010840L, active3, 0x4000000000000L, active4, 0x40c000000007800L, active5, 0x1000020018L);
      case 'F':
         if ((active1 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         break;
      case 'G':
         if ((active5 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x4000200000L, active2, 0x0L, active3, 0x800010L, active4, 0x0L, active5, 0x0L);
      case 'H':
         if ((active2 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x800L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x200000000L);
      case 'I':
         return jjMoveStringLiteralDfa5_0(active1, 0x20400002000000L, active2, 0x1000L, active3, 0xc00000008000L, active4, 0x60000300018600L, active5, 0x20L);
      case 'K':
         if ((active1 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000L, active5, 0x0L);
      case 'L':
         if ((active3 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x800001L, active3, 0x200L, active4, 0x800000000400010L, active5, 0x6000L);
      case 'M':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000L, active5, 0x0L);
      case 'N':
         if ((active1 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x80100L, active2, 0x4L, active3, 0x2L, active4, 0xf00000000001L, active5, 0x4000002L);
      case 'O':
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000000L, active2, 0x0L, active3, 0x80e0000000000000L, active4, 0x0L, active5, 0x20c00000004L);
      case 'P':
         if ((active2 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x20000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'R':
         if ((active1 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x100000L, active2, 0x800000000000080L, active3, 0x4L, active4, 0xc80000000L, active5, 0x0L);
      case 'S':
         if ((active1 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x420L, active2, 0x10000000000L, active3, 0x0L, active4, 0x0L, active5, 0x18400L);
      case 'T':
         if ((active1 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x4086000010000000L, active2, 0x1000e00c00100008L, active3, 0x10000000000L, active4, 0x4180000018000000L, active5, 0x0L);
      case 'U':
         return jjMoveStringLiteralDfa5_0(active1, 0x1000000000000L, active2, 0x180040002L, active3, 0x400000000100000L, active4, 0x8000000000000000L, active5, 0x3000000L);
      case 'V':
         return jjMoveStringLiteralDfa5_0(active1, 0x40L, active2, 0x0L, active3, 0x0L, active4, 0x20000000L, active5, 0x0L);
      case 'W':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x1800000000000000L, active4, 0x0L, active5, 0x0L);
      case 'X':
         if ((active2 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'Y':
         if ((active1 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'Z':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x800L);
      case 'a':
         return jjMoveStringLiteralDfa5_0(active1, 0x8301000000000L, active2, 0x80000000000L, active3, 0x180000000000L, active4, 0x400001c0L, active5, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa5_0(active1, 0x1800000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x100L, active3, 0x0L, active4, 0x800000L, active5, 0x0L);
      case 'd':
         if ((active5 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 341;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 364;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 366;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'e':
         if ((active1 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 274;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 352;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 359;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 362;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x200010008000000L, active2, 0x80000003010840L, active3, 0x4000000000000L, active4, 0x40c000000007800L, active5, 0x1000020018L);
      case 'f':
         if ((active1 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
         }
         break;
      case 'g':
         if ((active5 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 351;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x4000200000L, active2, 0x0L, active3, 0x800010L, active4, 0x0L, active5, 0x0L);
      case 'h':
         if ((active2 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x800L, active2, 0x8000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x200000000L);
      case 'i':
         return jjMoveStringLiteralDfa5_0(active1, 0x20400002000000L, active2, 0x1000L, active3, 0xc00000008000L, active4, 0x60000300018600L, active5, 0x20L);
      case 'k':
         if ((active1 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000000L, active5, 0x0L);
      case 'l':
         if ((active3 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x800001L, active3, 0x200L, active4, 0x800000000400010L, active5, 0x6000L);
      case 'm':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1000000L, active5, 0x0L);
      case 'n':
         if ((active1 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 343;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x80100L, active2, 0x4L, active3, 0x2L, active4, 0xf00000000001L, active5, 0x4000002L);
      case 'o':
         return jjMoveStringLiteralDfa5_0(active1, 0x800000000000L, active2, 0x0L, active3, 0x80e0000000000000L, active4, 0x0L, active5, 0x20c00000004L);
      case 'p':
         if ((active2 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x20000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'r':
         if ((active1 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 249;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x100000L, active2, 0x800000000000080L, active3, 0x4L, active4, 0xc80000000L, active5, 0x0L);
      case 's':
         if ((active1 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 342;
            jjmatchedPos = 4;
         }
         else if ((active5 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 350;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x420L, active2, 0x10000000000L, active3, 0x0L, active4, 0x0L, active5, 0x18400L);
      case 't':
         if ((active1 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 4;
         }
         else if ((active2 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x2000000000000000L) != 0x0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x4086000010000000L, active2, 0x1000e00c00100008L, active3, 0x10000000000L, active4, 0x4180000018000000L, active5, 0x0L);
      case 'u':
         return jjMoveStringLiteralDfa5_0(active1, 0x1000000000000L, active2, 0x180040002L, active3, 0x400000000100000L, active4, 0x8000000000000000L, active5, 0x3000000L);
      case 'v':
         return jjMoveStringLiteralDfa5_0(active1, 0x40L, active2, 0x0L, active3, 0x0L, active4, 0x20000000L, active5, 0x0L);
      case 'w':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x1800000000000000L, active4, 0x0L, active5, 0x0L);
      case 'x':
         if ((active2 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'y':
         if ((active1 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x8000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'z':
         return jjMoveStringLiteralDfa5_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x800L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa6_0(active1, 0x1800000008000000L, active2, 0x1000000000000000L, active3, 0x10000000000L, active4, 0x10L, active5, 0x200018000L);
      case 'C':
         return jjMoveStringLiteralDfa6_0(active1, 0x10000000000L, active2, 0x80000000000L, active3, 0x0L, active4, 0x40000000L, active5, 0x0L);
      case 'D':
         if ((active4 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x1000080000L, active2, 0x0L, active3, 0x8000000000000000L, active4, 0xe00000019800L, active5, 0x0L);
      case 'E':
         if ((active1 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x10000400L, active2, 0x8000200400000004L, active3, 0x800010L, active4, 0x180000000000000L, active5, 0x2000000L);
      case 'G':
         if ((active5 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 5;
         }
         break;
      case 'H':
         if ((active2 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 5;
         }
         break;
      case 'I':
         return jjMoveStringLiteralDfa6_0(active1, 0x4008000000000100L, active2, 0xc00000100000L, active3, 0x2L, active4, 0x418000000L, active5, 0x4000L);
      case 'L':
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x2L, active3, 0x180000000000L, active4, 0x600L, active5, 0x0L);
      case 'N':
         if ((active1 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x220300002000000L, active2, 0x3001040L, active3, 0x60400000008000L, active4, 0x60000000000000L, active5, 0x28L);
      case 'O':
         return jjMoveStringLiteralDfa6_0(active1, 0x800L, active2, 0x81L, active3, 0x1800000000000000L, active4, 0x400000L, active5, 0x2800L);
      case 'P':
         if ((active3 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x8000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'R':
         if ((active2 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x7000000000000L, active2, 0x80000000000800L, active3, 0x0L, active4, 0x8000300006180L, active5, 0x20004L);
      case 'S':
         if ((active1 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x800000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x800000000L);
      case 'T':
         if ((active1 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x8180000000L, active3, 0x0L, active4, 0x41L, active5, 0x400L);
      case 'U':
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x20000000000L);
      case 'X':
         if ((active5 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 5;
         }
         break;
      case 'a':
         return jjMoveStringLiteralDfa6_0(active1, 0x1800000008000000L, active2, 0x1000000000000000L, active3, 0x10000000000L, active4, 0x10L, active5, 0x200018000L);
      case 'c':
         return jjMoveStringLiteralDfa6_0(active1, 0x10000000000L, active2, 0x80000000000L, active3, 0x0L, active4, 0x40000000L, active5, 0x0L);
      case 'd':
         if ((active4 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 300;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x4000000L) != 0x0L)
         {
            jjmatchedKind = 346;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x1000080000L, active2, 0x0L, active3, 0x8000000000000000L, active4, 0xe00000019800L, active5, 0x0L);
      case 'e':
         if ((active1 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x4000000000L) != 0x0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 131;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 279;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 285;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 292;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 344;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x10000400L, active2, 0x8000200400000004L, active3, 0x800010L, active4, 0x180000000000000L, active5, 0x2000000L);
      case 'g':
         if ((active5 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 321;
            jjmatchedPos = 5;
         }
         break;
      case 'h':
         if ((active2 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 5;
         }
         break;
      case 'i':
         return jjMoveStringLiteralDfa6_0(active1, 0x4008000000000100L, active2, 0xc00000100000L, active3, 0x2L, active4, 0x418000000L, active5, 0x4000L);
      case 'l':
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x2L, active3, 0x180000000000L, active4, 0x600L, active5, 0x0L);
      case 'n':
         if ((active1 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x40000L) != 0x0L)
         {
            jjmatchedKind = 146;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 247;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 291;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x220300002000000L, active2, 0x3001040L, active3, 0x60400000008000L, active4, 0x60000000000000L, active5, 0x28L);
      case 'o':
         return jjMoveStringLiteralDfa6_0(active1, 0x800L, active2, 0x81L, active3, 0x1800000000000000L, active4, 0x400000L, active5, 0x2800L);
      case 'p':
         if ((active3 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x8000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'r':
         if ((active2 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 306;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 354;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x7000000000000L, active2, 0x80000000000800L, active3, 0x0L, active4, 0x8000300006180L, active5, 0x20004L);
      case 's':
         if ((active1 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x800000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x800000000L);
      case 't':
         if ((active1 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 242;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 287;
            jjmatchedPos = 5;
         }
         else if ((active5 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 324;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x8180000000L, active3, 0x0L, active4, 0x41L, active5, 0x400L);
      case 'u':
         return jjMoveStringLiteralDfa6_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x20000000000L);
      case 'x':
         if ((active5 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 356;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa7_0(active1, 0x6000000000000L, active2, 0x80000000L, active3, 0x20000000000000L, active4, 0x600000000040L, active5, 0x420L);
      case 'B':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x1000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'C':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x1001L, active3, 0x10000000000L, active4, 0x400400000L, active5, 0x18000L);
      case 'D':
         if ((active1 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x200000000000L, active2, 0x40L, active3, 0x0L, active4, 0x0L, active5, 0x8L);
      case 'E':
         if ((active1 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x8000000800L, active3, 0x0L, active4, 0x200018601L, active5, 0x0L);
      case 'G':
         if ((active3 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x2000L);
      case 'H':
         if ((active2 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
         }
         break;
      case 'I':
         return jjMoveStringLiteralDfa7_0(active1, 0x800000080000L, active2, 0x0L, active3, 0x8000180000000000L, active4, 0x100L, active5, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa7_0(active1, 0x4000000000000000L, active2, 0x0L, active3, 0x800000L, active4, 0x0L, active5, 0x0L);
      case 'N':
         if ((active1 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x8000000000000L, active2, 0x400000000L, active3, 0x0L, active4, 0x0L, active5, 0x2004800L);
      case 'O':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x800c00000100000L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'R':
         if ((active3 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000800L, active2, 0x0L, active3, 0x1800000000000000L, active4, 0x0L, active5, 0x0L);
      case 'S':
         if ((active1 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x1800000000000100L, active2, 0x0L, active3, 0x0L, active4, 0x180000000000000L, active5, 0x20000L);
      case 'T':
         if ((active1 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0xa000000L, active3, 0x2L, active4, 0x6010L, active5, 0x4L);
      case 'U':
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x1800L, active5, 0x0L);
      case 'X':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x200000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'Y':
         if ((active2 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 6;
         }
         break;
      case 'a':
         return jjMoveStringLiteralDfa7_0(active1, 0x6000000000000L, active2, 0x80000000L, active3, 0x20000000000000L, active4, 0x600000000040L, active5, 0x420L);
      case 'b':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x1000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x1001L, active3, 0x10000000000L, active4, 0x400400000L, active5, 0x18000L);
      case 'd':
         if ((active1 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 130;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x200000000000L, active2, 0x40L, active3, 0x0L, active4, 0x0L, active5, 0x8L);
      case 'e':
         if ((active1 & 0x1000000000L) != 0x0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x40000000L) != 0x0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x100000000L) != 0x0L)
         {
            jjmatchedKind = 288;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x8000000800L, active3, 0x0L, active4, 0x200018601L, active5, 0x0L);
      case 'g':
         if ((active3 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x2000000L, active2, 0x0L, active3, 0x0L, active4, 0x40000000000000L, active5, 0x2000L);
      case 'h':
         if ((active2 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 6;
         }
         break;
      case 'i':
         return jjMoveStringLiteralDfa7_0(active1, 0x800000080000L, active2, 0x0L, active3, 0x8000180000000000L, active4, 0x100L, active5, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa7_0(active1, 0x4000000000000000L, active2, 0x0L, active3, 0x800000L, active4, 0x0L, active5, 0x0L);
      case 'n':
         if ((active1 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x8000000000000L, active2, 0x400000000L, active3, 0x0L, active4, 0x0L, active5, 0x2004800L);
      case 'o':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x800c00000100000L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'r':
         if ((active3 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 353;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x1000000000800L, active2, 0x0L, active3, 0x1800000000000000L, active4, 0x0L, active5, 0x0L);
      case 's':
         if ((active1 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 303;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 307;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x1800000000000100L, active2, 0x0L, active3, 0x0L, active4, 0x180000000000000L, active5, 0x20000L);
      case 't':
         if ((active1 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 129;
            jjmatchedPos = 6;
         }
         else if ((active2 & 0x1000000L) != 0x0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 6;
         }
         else if ((active5 & 0x20000000000L) != 0x0L)
         {
            jjmatchedKind = 361;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0xa000000L, active3, 0x2L, active4, 0x6010L, active5, 0x4L);
      case 'u':
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000000L, active2, 0x0L, active3, 0x0L, active4, 0x1800L, active5, 0x0L);
      case 'x':
         return jjMoveStringLiteralDfa7_0(active1, 0x0L, active2, 0x200000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'y':
         if ((active2 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 6;
         }
         else if ((active4 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x1L, active3, 0x0L, active4, 0x400000L, active5, 0x0L);
      case 'B':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x80000000L, active3, 0x0L, active4, 0x40L, active5, 0x0L);
      case 'C':
         if ((active3 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x400000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'D':
         if ((active3 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x1000000000000000L, active4, 0x0L, active5, 0x0L);
      case 'E':
         if ((active1 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x1001000000000000L, active2, 0x8000000L, active3, 0x800000L, active4, 0x110L, active5, 0x200000cL);
      case 'G':
         if ((active5 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x600L, active5, 0x0L);
      case 'H':
         if ((active3 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 7;
         }
         break;
      case 'I':
         return jjMoveStringLiteralDfa8_0(active1, 0x6000000000000L, active2, 0x40L, active3, 0x0L, active4, 0x2000L, active5, 0x0L);
      case 'L':
         if ((active3 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x1000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x400L);
      case 'N':
         if ((active2 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x80000L, active2, 0x800800000000800L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'R':
         if ((active4 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x600000011800L, active5, 0x0L);
      case 'S':
         if ((active1 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 7;
         }
         break;
      case 'T':
         if ((active2 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000900L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x18020L);
      case 'X':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1L, active5, 0x0L);
      case 'Y':
         if ((active3 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 7;
         }
         break;
      case 'Z':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x180000000000L, active4, 0x0L, active5, 0x0L);
      case 'a':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x1L, active3, 0x0L, active4, 0x400000L, active5, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x80000000L, active3, 0x0L, active4, 0x40L, active5, 0x0L);
      case 'c':
         if ((active3 & 0x8000000000000000L) != 0x0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x400000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'd':
         if ((active3 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x200000000L) != 0x0L)
         {
            jjmatchedKind = 289;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x1000000000000000L, active4, 0x0L, active5, 0x0L);
      case 'e':
         if ((active1 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x4000000000000000L) != 0x0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 331;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x20000L) != 0x0L)
         {
            jjmatchedKind = 337;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x1001000000000000L, active2, 0x8000000L, active3, 0x800000L, active4, 0x110L, active5, 0x200000cL);
      case 'g':
         if ((active5 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 334;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x600L, active5, 0x0L);
      case 'h':
         if ((active3 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 7;
         }
         break;
      case 'i':
         return jjMoveStringLiteralDfa8_0(active1, 0x6000000000000L, active2, 0x40L, active3, 0x0L, active4, 0x2000L, active5, 0x0L);
      case 'l':
         if ((active3 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x1000000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x400L);
      case 'n':
         if ((active2 & 0x100000L) != 0x0L)
         {
            jjmatchedKind = 148;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x80000L, active2, 0x800800000000800L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'r':
         if ((active4 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 271;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x600000011800L, active5, 0x0L);
      case 's':
         if ((active1 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 7;
         }
         break;
      case 't':
         if ((active2 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000900L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x18020L);
      case 'x':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x1L, active5, 0x0L);
      case 'y':
         if ((active3 & 0x2L) != 0x0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 7;
         }
         else if ((active4 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 270;
            jjmatchedPos = 7;
         }
         else if ((active5 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 333;
            jjmatchedPos = 7;
         }
         break;
      case 'z':
         return jjMoveStringLiteralDfa8_0(active1, 0x0L, active2, 0x0L, active3, 0x180000000000L, active4, 0x0L, active5, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'D':
         if ((active2 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 8;
         }
         break;
      case 'E':
         if ((active1 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x800L, active2, 0x0L, active3, 0x100000000000L, active4, 0x3400L, active5, 0x0L);
      case 'G':
         if ((active1 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         break;
      case 'I':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000000L, active5, 0x18000L);
      case 'L':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x80000000L, active3, 0x0L, active4, 0x40L, active5, 0x0L);
      case 'M':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'N':
         return jjMoveStringLiteralDfa9_0(active1, 0x7000000000000L, active2, 0x40L, active3, 0x800000L, active4, 0x0L, active5, 0x0L);
      case 'P':
         if ((active5 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      case 'R':
         return jjMoveStringLiteralDfa9_0(active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'S':
         if ((active1 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x18000000L, active5, 0x2000000L);
      case 'T':
         if ((active2 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x1L, active3, 0x0L, active4, 0x400000L, active5, 0x0L);
      case 'Y':
         if ((active4 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 8;
         }
         break;
      case 'a':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'd':
         if ((active2 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10L) != 0x0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x4L) != 0x0L)
         {
            jjmatchedKind = 322;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x8L) != 0x0L)
         {
            jjmatchedKind = 323;
            jjmatchedPos = 8;
         }
         break;
      case 'e':
         if ((active1 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x400000000L) != 0x0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 188;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 8;
         }
         else if ((active5 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 325;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x800L, active2, 0x0L, active3, 0x100000000000L, active4, 0x3400L, active5, 0x0L);
      case 'g':
         if ((active1 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
         }
         break;
      case 'i':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000000L, active5, 0x18000L);
      case 'l':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x80000000L, active3, 0x0L, active4, 0x40L, active5, 0x0L);
      case 'm':
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa9_0(active1, 0x7000000000000L, active2, 0x40L, active3, 0x800000L, active4, 0x0L, active5, 0x0L);
      case 'p':
         if ((active5 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 330;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa9_0(active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 's':
         if ((active1 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x800000000000L) != 0x0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x1000000000000000L) != 0x0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 272;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x18000000L, active5, 0x2000000L);
      case 't':
         if ((active2 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 8;
         }
         else if ((active4 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x0L, active2, 0x1L, active3, 0x0L, active4, 0x400000L, active5, 0x0L);
      case 'y':
         if ((active4 & 0x200000000000L) != 0x0L)
         {
            jjmatchedKind = 301;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa10_0(active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      case 'D':
         if ((active3 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 9;
         }
         break;
      case 'E':
         if ((active2 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000000L, active5, 0x0L);
      case 'G':
         if ((active2 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 9;
         }
         break;
      case 'H':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'I':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'O':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x18000L);
      case 'S':
         if ((active4 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x800L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'T':
         if ((active1 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'a':
         return jjMoveStringLiteralDfa10_0(active1, 0x100L, active2, 0x0L, active3, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      case 'd':
         if ((active3 & 0x100000000000L) != 0x0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 9;
         }
         break;
      case 'e':
         if ((active2 & 0x1L) != 0x0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 9;
         }
         else if ((active2 & 0x80000000L) != 0x0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 278;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x400000000000L, active5, 0x0L);
      case 'g':
         if ((active2 & 0x40L) != 0x0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 9;
         }
         break;
      case 'h':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x8000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa10_0(active1, 0x0L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x18000L);
      case 's':
         if ((active4 & 0x400L) != 0x0L)
         {
            jjmatchedKind = 266;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x1000L) != 0x0L)
         {
            jjmatchedKind = 268;
            jjmatchedPos = 9;
         }
         else if ((active4 & 0x2000L) != 0x0L)
         {
            jjmatchedKind = 269;
            jjmatchedPos = 9;
         }
         else if ((active5 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 345;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x800L, active2, 0x0L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      case 't':
         if ((active1 & 0x1000000000000L) != 0x0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x2000000000000L) != 0x0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000L, active2, 0x800000000000000L, active3, 0x0L, active4, 0x0L, active5, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 'E':
         if ((active2 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 10;
         }
         break;
      case 'I':
         return jjMoveStringLiteralDfa11_0(active1, 0x0L, active2, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'N':
         if ((active5 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L, active5, 0x10000L);
      case 'S':
         if ((active1 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 10;
         }
         break;
      case 'T':
         return jjMoveStringLiteralDfa11_0(active1, 0x900L, active2, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      case 'e':
         if ((active2 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 10;
         }
         break;
      case 'i':
         return jjMoveStringLiteralDfa11_0(active1, 0x0L, active2, 0x0L, active4, 0x18000000L, active5, 0x0L);
      case 'n':
         if ((active5 & 0x8000L) != 0x0L)
         {
            jjmatchedKind = 335;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L, active5, 0x10000L);
      case 's':
         if ((active1 & 0x4000000000000L) != 0x0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 10;
         }
         else if ((active4 & 0x400000000000L) != 0x0L)
         {
            jjmatchedKind = 302;
            jjmatchedPos = 10;
         }
         break;
      case 't':
         return jjMoveStringLiteralDfa11_0(active1, 0x900L, active2, 0x0L, active4, 0x80000000000000L, active5, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa12_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L, active5, 0x0L);
      case 'H':
         if ((active4 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 11;
         }
         break;
      case 'O':
         return jjMoveStringLiteralDfa12_0(active1, 0x100L, active2, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'P':
         if ((active4 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x800L, active2, 0x0L, active4, 0x10000000L, active5, 0x0L);
      case 'S':
         if ((active5 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 11;
         }
         break;
      case 'a':
         return jjMoveStringLiteralDfa12_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L, active5, 0x0L);
      case 'h':
         if ((active4 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 11;
         }
         break;
      case 'o':
         return jjMoveStringLiteralDfa12_0(active1, 0x100L, active2, 0x0L, active4, 0x0L, active5, 0x0L);
      case 'p':
         if ((active4 & 0x8000000L) != 0x0L)
         {
            jjmatchedKind = 283;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active1, 0x800L, active2, 0x0L, active4, 0x10000000L, active5, 0x0L);
      case 's':
         if ((active5 & 0x10000L) != 0x0L)
         {
            jjmatchedKind = 336;
            jjmatchedPos = 11;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5){
   if (((active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa13_0(active1, 0x800L, active2, 0x0L, active4, 0x0L);
      case 'R':
         if ((active1 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 12;
         }
         break;
      case 'S':
         if ((active4 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 12;
         }
         break;
      case 'T':
         return jjMoveStringLiteralDfa13_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L);
      case 'a':
         return jjMoveStringLiteralDfa13_0(active1, 0x800L, active2, 0x0L, active4, 0x0L);
      case 'r':
         if ((active1 & 0x100L) != 0x0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 12;
         }
         break;
      case 's':
         if ((active4 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 284;
            jjmatchedPos = 12;
         }
         break;
      case 't':
         return jjMoveStringLiteralDfa13_0(active1, 0x0L, active2, 0x8000000000L, active4, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2, long old4, long active4){
   if (((active1 &= old1) | (active2 &= old2) | (active4 &= old4)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 'O':
         return jjMoveStringLiteralDfa14_0(active1, 0x0L, active2, 0x8000000000L);
      case 'T':
         return jjMoveStringLiteralDfa14_0(active1, 0x800L, active2, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa14_0(active1, 0x0L, active2, 0x8000000000L);
      case 't':
         return jjMoveStringLiteralDfa14_0(active1, 0x800L, active2, 0x0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 'H':
         return jjMoveStringLiteralDfa15_0(active1, 0x800L, active2, 0x0L);
      case 'R':
         if ((active2 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 14;
         }
         break;
      case 'h':
         return jjMoveStringLiteralDfa15_0(active1, 0x800L, active2, 0x0L);
      case 'r':
         if ((active2 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 14;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 'S':
         if ((active1 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 15;
         }
         break;
      case 's':
         if ((active1 & 0x800L) != 0x0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 15;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
static final long[] jjbitVec0 = {
   0xfff0000040220002L, 0xffffffffffffdfffL, 0xfffff02f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x420243cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x501f0003ffc3L
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xbcdfffffffffffffL, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffcfbL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0xbffffffffffe81ffL, 0x787ffffff00b6L
};
static final long[] jjbitVec7 = {
   0xffffffff17ff083fL, 0xffffc3ffffffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffff8000L, 0xffffffffffffe7ffL, 0x3ffffffffffffL, 0xe43fffffffffffffL
};
static final long[] jjbitVec9 = {
   0x3fffffffffffL, 0x7ff0fffffffL, 0xffdfffff00000000L, 0xfffffffffff800ffL
};
static final long[] jjbitVec10 = {
   0xffffffffffffffffL, 0xfffeffcfffffffffL, 0xf3c5fdfffff99fefL, 0x580fffcfb080799fL
};
static final long[] jjbitVec11 = {
   0xd36dfdfffff987eeL, 0x3fffc05e023987L, 0xf3edfdfffffbbfeeL, 0xfe02ffcf00013bbfL
};
static final long[] jjbitVec12 = {
   0xf3edfdfffff99feeL, 0x2ffcfb0e0399fL, 0xc3ffc718d63dc7ecL, 0x200ffc000813dc7L
};
static final long[] jjbitVec13 = {
   0xe3fffdfffffddfffL, 0xffcf07603ddfL, 0xf3effdfffffddfefL, 0x6ffcf40603ddfL
};
static final long[] jjbitVec14 = {
   0xfffffffffffddfffL, 0xfc00ffcf80f07ddfL, 0x2ffbfffffc7fffeeL, 0xcffc0ff5f847fL
};
static final long[] jjbitVec15 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3fffffaffffff7d6L, 0xf3ff3f5fL
};
static final long[] jjbitVec16 = {
   0xc2a003ff03000001L, 0xfffe1ffffffffeffL, 0x1ffffffffeffffdfL, 0x40L
};
static final long[] jjbitVec17 = {
   0xffffffffffffffffL, 0xffffffffffff03ffL, 0xffffffff3fffffffL, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffff3d7f3dffL, 0x7f3dffffffff3dffL, 0xffffffffff7fff3dL
};
static final long[] jjbitVec19 = {
   0xffffffffff3dffffL, 0xe7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec20 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec21 = {
   0xffffffffffffffffL, 0xffff9fffffffffffL, 0xffffffff07fffffeL, 0x1ffc7ffffffffffL
};
static final long[] jjbitVec22 = {
   0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff388fffffL
};
static final long[] jjbitVec23 = {
   0xffffffff03ff7800L, 0x1ffffffffffffffL, 0xffff07ffffffffffL, 0x3fffffffffffffL
};
static final long[] jjbitVec24 = {
   0xfff0fff7fffffffL, 0x1f3fffffffffc0L, 0xffff0fffffffffffL, 0x3ff03ffL
};
static final long[] jjbitVec25 = {
   0xffffffff0fffffffL, 0x9fffffff7fffffffL, 0xbfff008003ff03ffL, 0x1L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xff80003ff0fffL, 0xffffffffffffffffL, 0xfffffffffffffL
};
static final long[] jjbitVec27 = {
   0xffffffffffffffL, 0x3fffffffffffe3ffL, 0xe7ffffffffff01ffL, 0x7fffffffff70000L
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfbffffffffffffffL
};
static final long[] jjbitVec29 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec30 = {
   0x80007c000000f800L, 0x8002ffdf00100001L, 0xffffffff1fff0000L, 0x1ffe21fff0000L
};
static final long[] jjbitVec31 = {
   0xf3ffbd503e2ffc84L, 0xffffffff000043e0L, 0x1ffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffff7fffffffffffL, 0xffffffff7fffffffL, 0xffffffffffffffffL, 0xff81fffffffffL
};
static final long[] jjbitVec33 = {
   0xffff20bfffffffffL, 0x800080ffffffffffL, 0x7f7f7f7f007fffffL, 0xffffffff7f7f7f7fL
};
static final long[] jjbitVec34 = {
   0x800000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec35 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec36 = {
   0xfffeffffffffffe0L, 0xffffffffffffffffL, 0xffffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec37 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec38 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x3fffffffffff0000L
};
static final long[] jjbitVec40 = {
   0xfffffff1fffL, 0xbff0ffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL
};
static final long[] jjbitVec41 = {
   0xfffffffcff800000L, 0xffffffffffffffffL, 0xfffffffffffff9ffL, 0xffe00000000007fcL
};
static final long[] jjbitVec42 = {
   0x10010ffffffffffL, 0xfffffffffffffL, 0xffffffffffffffffL, 0xe8ffffff03ff003fL
};
static final long[] jjbitVec43 = {
   0xffff3fffffffffffL, 0x1fffffff000fffffL, 0xffffffffffffffffL, 0x7fffffff03ff8001L
};
static final long[] jjbitVec44 = {
   0x7fffffffffffffL, 0xfc7fffff03ff3fffL, 0xffffffffffffffffL, 0x7cffff38000007L
};
static final long[] jjbitVec45 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x3ff37ffffffffffL
};
static final long[] jjbitVec46 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff000fffffffffL, 0xffffffffffff87fL
};
static final long[] jjbitVec47 = {
   0xffffffffffffffffL, 0xffff3fffffffffffL, 0xffffffffffffffffL, 0x3ffffffL
};
static final long[] jjbitVec48 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec49 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x1fff0000000000ffL
};
static final long[] jjbitVec50 = {
   0x18ffff0000ffffL, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec51 = {
   0x87fffffe03ff0010L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
static final long[] jjbitVec52 = {
   0x20000000L, 0x2000L, 0x0L, 0x0L
};
static final long[] jjbitVec53 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec54 = {
   0x0L, 0xbcdf000000000000L, 0xfffffffbffffd740L, 0xffbfffffffffffffL
};
static final long[] jjbitVec55 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0xffffffffffffffffL
};
static final long[] jjbitVec56 = {
   0xfffeffffffffffffL, 0xffffffff027fffffL, 0x1ffL, 0x787ffffff0000L
};
static final long[] jjbitVec57 = {
   0xffffffff00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL
};
static final long[] jjbitVec58 = {
   0xfffffffd0000L, 0xffffffffffffe000L, 0x2003fffffffffL, 0x43007fffffffc00L
};
static final long[] jjbitVec59 = {
   0x110043fffffL, 0x7ff01ffffffL, 0xffdfffff00000000L, 0xffL
};
static final long[] jjbitVec60 = {
   0x23fffffffffffff0L, 0xfffe0003ff010000L, 0x23c5fdfffff99fe1L, 0x10030003b0004000L
};
static final long[] jjbitVec61 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x200000300010000L
};
static final long[] jjbitVec62 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3ffc718d63dc7e8L, 0x10000L
};
static final long[] jjbitVec63 = {
   0x23fffdfffffddfe0L, 0x307000000L, 0x23effdfffffddfe1L, 0x6000340000000L
};
static final long[] jjbitVec64 = {
   0x27fffffffffddff0L, 0xfc00000380704000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec65 = {
   0xdfffffffffffeL, 0x7fL, 0x200dffaffffff7d6L, 0xf000005fL
};
static final long[] jjbitVec66 = {
   0x1L, 0x1ffffffffeffL, 0x1f00L, 0x0L
};
static final long[] jjbitVec67 = {
   0x800007ffffffffffL, 0xffe1c0623c3f0000L, 0xffffffff00004003L, 0xf7ffffffffff20bfL
};
static final long[] jjbitVec68 = {
   0xffffffffff3dffffL, 0x7ffffffL, 0xffffffff0000ffffL, 0x3f3fffffffffffffL
};
static final long[] jjbitVec69 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x10800000L
};
static final long[] jjbitVec70 = {
   0xffffffff00000000L, 0x1ffffffffffffffL, 0xffff05ffffffff9fL, 0x3fffffffffffffL
};
static final long[] jjbitVec71 = {
   0x7fffffffL, 0x1f3fffffff0000L, 0xffff0fffffffffffL, 0x3ffL
};
static final long[] jjbitVec72 = {
   0xffffffff007fffffL, 0x1fffffL, 0x8000000000L, 0x0L
};
static final long[] jjbitVec73 = {
   0xfffffffffffe0L, 0xfe0L, 0xfc00c001fffffff8L, 0x3fffffffffL
};
static final long[] jjbitVec74 = {
   0xfffffffffL, 0x3ffffffffc00e000L, 0xe7ffffffffff01ffL, 0x46fde0000000000L
};
static final long[] jjbitVec75 = {
   0x8000000000000000L, 0x8002000000100001L, 0x1fff0000L, 0x0L
};
static final long[] jjbitVec76 = {
   0xffff7fffffffffffL, 0xffffffff7fffffffL, 0xffffffffffffffffL, 0xc781fffffffffL
};
static final long[] jjbitVec77 = {
   0xffff20bfffffffffL, 0x80ffffffffffL, 0x7f7f7f7f007fffffL, 0x7f7f7f7fL
};
static final long[] jjbitVec78 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xf7ffffffffffffffL
};
static final long[] jjbitVec79 = {
   0xc00ffff1fffL, 0x80007fffffffffffL, 0xffffffff3fffffffL, 0xffffffffffffL
};
static final long[] jjbitVec80 = {
   0x7fffff7bbL, 0xfffffffffffffL, 0xffffffffffffcL, 0x68fc000000000000L
};
static final long[] jjbitVec81 = {
   0xffff003ffffffc00L, 0x1fffffff0000007fL, 0x7fffffffffff0L, 0x7c00ffdf00008000L
};
static final long[] jjbitVec82 = {
   0x1ffffffffffL, 0xc47fffff00000ff7L, 0x3e62ffffffffffffL, 0x1c07ff38000005L
};
static final long[] jjbitVec83 = {
   0xffff7f7f007e7e7eL, 0xffff03fff7ffffffL, 0xffffffffffffffffL, 0x7ffffffffL
};
static final long[] jjbitVec84 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec85 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec86 = {
   0x18000000000000L, 0xffdf00000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec87 = {
   0x87fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec88 = {
   0x0L, 0x0L, 0x200000000000L, 0x0L
};
static final long[] jjbitVec89 = {
   0x3f0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec90 = {
   0x0L, 0x801000000L, 0x0L, 0x0L
};
static final long[] jjbitVec91 = {
   0x2000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec92 = {
   0x0L, 0x0L, 0x0L, 0x10000000000L
};
static final long[] jjbitVec93 = {
   0x100L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec94 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec95 = {
   0x10000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec96 = {
   0x0L, 0x0L, 0x0L, 0x20000000000L
};
static final long[] jjbitVec97 = {
   0x200L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec98 = {
   0x0L, 0x2000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec99 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec100 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(final java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(0, 5); }
                  else if (curChar == 47)
                     { jjAddStates(6, 7); }
                  else if (curChar == 45)
                  {
                     if (kind > 370)
                        kind = 370;
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(1); }
                  if ((0x3fe000000000000L & l) != 0x0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddStates(8, 10); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddStates(11, 13); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(14, 17); }
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(18, 21); }
                  break;
               case 7:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3fe000000000000L & l) == 0x0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(8, 10); }
                  break;
               case 13:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(13); }
                  break;
               case 15:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 367)
                     kind = 367;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 16:
                  if (curChar == 45 && kind > 370)
                     kind = 370;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(0, 5); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 22:
                  if (curChar == 46)
                     { jjCheckNAdd(23); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(25, 28); }
                  break;
               case 26:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(29, 32); }
                  break;
               case 29:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 31:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 35:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(36, 39); }
                  break;
               case 38:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddTwoStates(38, 39); }
                  break;
               case 40:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if (curChar == 47)
                     { jjAddStates(6, 7); }
                  break;
               case 42:
                  if (curChar != 47)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 43:
                  if ((0xffffffffffffdbffL & l) == 0x0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAddStates(40, 42); }
                  break;
               case 44:
                  if ((0x2400L & l) != 0x0L && kind > 29)
                     kind = 29;
                  break;
               case 45:
                  if (curChar == 10 && kind > 29)
                     kind = 29;
                  break;
               case 46:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0xffff7fffffffffffL & l) != 0x0L && kind > 30)
                     kind = 30;
                  break;
               case 49:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar != 48)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(11, 13); }
                  break;
               case 52:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff00100fffc1ffL & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(54); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 367)
                     kind = 367;
                  { jjCheckNAdd(15); }
                  break;
               case 2:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 5:
                  if (curChar == 95)
                     { jjCheckNAdd(6); }
                  break;
               case 7:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(46, 47); }
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(9); }
                  break;
               case 11:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 367)
                     kind = 367;
                  { jjCheckNAdd(15); }
                  break;
               case 20:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjCheckNAddStates(48, 50); }
                  break;
               case 27:
                  if (curChar == 95)
                     { jjCheckNAdd(28); }
                  break;
               case 29:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(51, 52); }
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjCheckNAddStates(53, 55); }
                  break;
               case 36:
                  if (curChar == 95)
                     { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(56, 57); }
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(40); }
                  break;
               case 43:
                  if (kind > 29)
                     kind = 29;
                  { jjAddStates(40, 42); }
                  break;
               case 48:
                  if (kind > 30)
                     kind = 30;
                  break;
               case 51:
                  if ((0x100000001000000L & l) == 0x0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if (curChar != 111)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x87fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(54); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 367)
                        kind = 367;
                     { jjCheckNAdd(15); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 370)
                        kind = 370;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 371)
                        kind = 371;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 372)
                        kind = 372;
                  }
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(46, 47); }
                  break;
               case 8:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(9); }
                  break;
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 367)
                     kind = 367;
                  { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 367)
                     kind = 367;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 370)
                     kind = 370;
                  break;
               case 17:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 371)
                     kind = 371;
                  break;
               case 18:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 372)
                     kind = 372;
                  break;
               case 29:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(51, 52); }
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(31); }
                  break;
               case 31:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(31); }
                  break;
               case 38:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjAddStates(56, 57); }
                  break;
               case 39:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(40); }
                  break;
               case 40:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(40); }
                  break;
               case 43:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjAddStates(40, 42); }
                  break;
               case 48:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 30)
                     kind = 30;
                  break;
               case 52:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 55 - jjnewStateCnt;
      if (i == startsAt)
         break;
      try { curChar = input_stream.readChar(); }
      catch(final java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(final java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else
   if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_1(0x100000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case '/':
         if ((active0 & 0x100000000L) != 0x0L)
            return jjStopAtPos(1, 32);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case '*':
         return jjMoveStringLiteralDfa1_2(0x200000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case '/':
         if ((active0 & 0x200000000L) != 0x0L)
            return jjStopAtPos(1, 33);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_3()
{
   return 1;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fc0000000000L) != 0x0L)
         {
            jjmatchedKind = 51;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fc0000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 34:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 35:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 36:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 37:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 38:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 39:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 40:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 41:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 42:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 43:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 44:
         if ((active0 & 0x4000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case '\'':
         return jjStopAtPos(0, 52);
      case '\\':
         return jjMoveStringLiteralDfa1_4(0x7fc0000000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case '"':
         if ((active0 & 0x100000000000L) != 0x0L)
            return jjStopAtPos(1, 44);
         break;
      case '\'':
         if ((active0 & 0x80000000000L) != 0x0L)
            return jjStopAtPos(1, 43);
         break;
      case '\\':
         if ((active0 & 0x40000000000L) != 0x0L)
            return jjStopAtPos(1, 42);
         break;
      case 'b':
         if ((active0 & 0x200000000000L) != 0x0L)
            return jjStopAtPos(1, 45);
         break;
      case 'f':
         if ((active0 & 0x400000000000L) != 0x0L)
            return jjStopAtPos(1, 46);
         break;
      case 'n':
         if ((active0 & 0x800000000000L) != 0x0L)
            return jjStopAtPos(1, 47);
         break;
      case 'r':
         if ((active0 & 0x1000000000000L) != 0x0L)
            return jjStopAtPos(1, 48);
         break;
      case 't':
         if ((active0 & 0x2000000000000L) != 0x0L)
            return jjStopAtPos(1, 49);
         break;
      case 'u':
         return jjMoveStringLiteralDfa2_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa3_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa4_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa5_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(3, active0);
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa6_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(4, active0);
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa7_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(5, active0);
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa8_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(6, active0);
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa9_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(7, active0);
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa10_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(8, active0);
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa11_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(9, active0);
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa12_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(10, active0);
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa13_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(11, active0);
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa14_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(12, active0);
}
private int jjMoveStringLiteralDfa14_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa15_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(13, active0);
}
private int jjMoveStringLiteralDfa15_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa16_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(14, active0);
}
private int jjMoveStringLiteralDfa16_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa17_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(15, active0);
}
private int jjMoveStringLiteralDfa17_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa18_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(16, active0);
}
private int jjMoveStringLiteralDfa18_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa19_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(17, active0);
}
private int jjMoveStringLiteralDfa19_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa20_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(18, active0);
}
private int jjMoveStringLiteralDfa20_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa21_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(19, active0);
}
private int jjMoveStringLiteralDfa21_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa22_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(20, active0);
}
private int jjMoveStringLiteralDfa22_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa23_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(21, active0);
}
private int jjMoveStringLiteralDfa23_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa24_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(22, active0);
}
private int jjMoveStringLiteralDfa24_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa25_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(23, active0);
}
private int jjMoveStringLiteralDfa25_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa26_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(24, active0);
}
private int jjMoveStringLiteralDfa26_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa27_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(25, active0);
}
private int jjMoveStringLiteralDfa27_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa28_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(26, active0);
}
private int jjMoveStringLiteralDfa28_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa29_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(27, active0);
}
private int jjMoveStringLiteralDfa29_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa30_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(28, active0);
}
private int jjMoveStringLiteralDfa30_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa31_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(29, active0);
}
private int jjMoveStringLiteralDfa31_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa32_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(30, active0);
}
private int jjMoveStringLiteralDfa32_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa33_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(31, active0);
}
private int jjMoveStringLiteralDfa33_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa34_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(32, active0);
}
private int jjMoveStringLiteralDfa34_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa35_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(33, active0);
}
private int jjMoveStringLiteralDfa35_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa36_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(34, active0);
}
private int jjMoveStringLiteralDfa36_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa37_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(35, active0);
}
private int jjMoveStringLiteralDfa37_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa38_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(36, active0);
}
private int jjMoveStringLiteralDfa38_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa39_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(37, active0);
}
private int jjMoveStringLiteralDfa39_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa40_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(38, active0);
}
private int jjMoveStringLiteralDfa40_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa41_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(39, active0);
}
private int jjMoveStringLiteralDfa41_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa42_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(40, active0);
}
private int jjMoveStringLiteralDfa42_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa43_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(41, active0);
}
private int jjMoveStringLiteralDfa43_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa44_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(42, active0);
}
private int jjMoveStringLiteralDfa44_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa45_4(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(43, active0);
}
private int jjMoveStringLiteralDfa45_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case ']':
         if ((active0 & 0x4000000000000L) != 0x0L)
            return jjStopAtPos(45, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_4(44, active0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff7fffffffffL & l) != 0x0L)
                     kind = 51;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 51;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 1 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fc0000000000000L) != 0x0L)
         {
            jjmatchedKind = 63;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fc0000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 34:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 35:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 36:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 37:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 38:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 39:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 40:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 41:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 42:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 43:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 44:
         if ((active0 & 0x4000000000000000L) != 0x0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case '"':
         return jjStopAtPos(0, 64);
      case '\\':
         return jjMoveStringLiteralDfa1_5(0x7fc0000000000000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case '"':
         if ((active0 & 0x100000000000000L) != 0x0L)
            return jjStopAtPos(1, 56);
         break;
      case '\'':
         if ((active0 & 0x80000000000000L) != 0x0L)
            return jjStopAtPos(1, 55);
         break;
      case '\\':
         if ((active0 & 0x40000000000000L) != 0x0L)
            return jjStopAtPos(1, 54);
         break;
      case 'b':
         if ((active0 & 0x200000000000000L) != 0x0L)
            return jjStopAtPos(1, 57);
         break;
      case 'f':
         if ((active0 & 0x400000000000000L) != 0x0L)
            return jjStopAtPos(1, 58);
         break;
      case 'n':
         if ((active0 & 0x800000000000000L) != 0x0L)
            return jjStopAtPos(1, 59);
         break;
      case 'r':
         if ((active0 & 0x1000000000000000L) != 0x0L)
            return jjStopAtPos(1, 60);
         break;
      case 't':
         if ((active0 & 0x2000000000000000L) != 0x0L)
            return jjStopAtPos(1, 61);
         break;
      case 'u':
         return jjMoveStringLiteralDfa2_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa3_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa4_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa5_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa6_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa7_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa8_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa9_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa10_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa11_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa12_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa13_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa14_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa15_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa16_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa17_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa18_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa19_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa20_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa21_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa22_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa23_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa24_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa25_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa26_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(24, active0, 0L);
}
private int jjMoveStringLiteralDfa26_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa27_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa28_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa29_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa30_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa31_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(29, active0, 0L);
}
private int jjMoveStringLiteralDfa31_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(29, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(30, active0, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa32_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(30, active0, 0L);
}
private int jjMoveStringLiteralDfa32_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(30, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(31, active0, 0L);
      return 32;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa33_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(31, active0, 0L);
}
private int jjMoveStringLiteralDfa33_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(31, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(32, active0, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa34_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(32, active0, 0L);
}
private int jjMoveStringLiteralDfa34_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(32, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(33, active0, 0L);
      return 34;
   }
   switch(curChar)
   {
      case ']':
         return jjMoveStringLiteralDfa35_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(33, active0, 0L);
}
private int jjMoveStringLiteralDfa35_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(33, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(34, active0, 0L);
      return 35;
   }
   switch(curChar)
   {
      case '[':
         return jjMoveStringLiteralDfa36_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(34, active0, 0L);
}
private int jjMoveStringLiteralDfa36_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(34, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(35, active0, 0L);
      return 36;
   }
   switch(curChar)
   {
      case '0':
         return jjMoveStringLiteralDfa37_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(35, active0, 0L);
}
private int jjMoveStringLiteralDfa37_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(35, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(36, active0, 0L);
      return 37;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa38_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(36, active0, 0L);
}
private int jjMoveStringLiteralDfa38_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(36, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(37, active0, 0L);
      return 38;
   }
   switch(curChar)
   {
      case '9':
         return jjMoveStringLiteralDfa39_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(37, active0, 0L);
}
private int jjMoveStringLiteralDfa39_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(37, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(38, active0, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa40_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(38, active0, 0L);
}
private int jjMoveStringLiteralDfa40_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(38, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(39, active0, 0L);
      return 40;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa41_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(39, active0, 0L);
}
private int jjMoveStringLiteralDfa41_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(39, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(40, active0, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa42_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(40, active0, 0L);
}
private int jjMoveStringLiteralDfa42_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(40, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(41, active0, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 'A':
         return jjMoveStringLiteralDfa43_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(41, active0, 0L);
}
private int jjMoveStringLiteralDfa43_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(41, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(42, active0, 0L);
      return 43;
   }
   switch(curChar)
   {
      case '-':
         return jjMoveStringLiteralDfa44_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(42, active0, 0L);
}
private int jjMoveStringLiteralDfa44_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(42, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(43, active0, 0L);
      return 44;
   }
   switch(curChar)
   {
      case 'F':
         return jjMoveStringLiteralDfa45_5(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_5(43, active0, 0L);
}
private int jjMoveStringLiteralDfa45_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(43, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(44, active0, 0L);
      return 45;
   }
   switch(curChar)
   {
      case ']':
         if ((active0 & 0x4000000000000000L) != 0x0L)
            return jjStopAtPos(45, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_5(44, active0, 0L);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0x0L)
                     kind = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 63)
                     kind = 63;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 1 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case '`':
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_6(0x8L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case '`':
         if ((active1 & 0x8L) != 0x0L)
            return jjStopAtPos(1, 67);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 66;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffeffffffffL & l) != 0x0L)
                     kind = 66;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 66)
                     kind = 66;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 1 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\174", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\72", "\72\72", "\54", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\44", 
"\174\174", null, null, "\57", "\56", "\56\56", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\75", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\76\75", null, 
null, null, null, null, "\76", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\46", "\41", "\133", 
"\173", "\74\75", null, null, null, null, null, null, "\50", "\74", null, null, null, 
null, "\55", "\45", "\41\75", "\74\76", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\53", 
"\53\75", null, null, "\136", null, null, null, null, null, null, null, null, null, null, 
null, "\77", null, "\135", "\175", null, null, null, null, "\75\176", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\51", 
null, null, null, null, null, null, null, "\73", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\52", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   20, 21, 22, 32, 33, 34, 42, 49, 11, 12, 13, 51, 53, 54, 2, 1, 
   3, 8, 5, 6, 7, 8, 20, 21, 22, 24, 23, 25, 30, 27, 28, 29, 
   30, 32, 33, 34, 36, 37, 38, 39, 43, 44, 46, 4, 5, 6, 7, 8, 
   26, 27, 28, 29, 30, 35, 36, 37, 38, 39, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec51[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec72[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 167:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec86[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec87[i2] & l2) != 0L);
      default :
         if ((jjbitVec52[i1] & l1) != 0L)
            if ((jjbitVec37[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec88[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec89[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec90[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec91[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec92[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec93[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec94[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec95[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 39:
         return ((jjbitVec96[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec97[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec98[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec99[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec100[i2] & l2) != 0L);
      default :
         if ((jjbitVec20[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 373)
         {
            jjmatchedKind = 373;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 34)
         {
            jjmatchedKind = 34;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 373)
         {
            jjmatchedKind = 373;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 373)
         {
            jjmatchedKind = 373;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 373)
         {
            jjmatchedKind = 373;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (final java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try {
       input_stream.readChar();
       input_stream.backup(1);
     }
     catch (final java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.getImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.getImage();
     }
     throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 30 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                       input_stream.backup( 1 );
         break;
      case 42 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "\\" );
         break;
      case 43 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "'" );
         break;
      case 44 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "\"" );
         break;
      case 45 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\b" );
         break;
      case 46 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\f" );
         break;
      case 47 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\n" );
         break;
      case 48 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\r" );
         break;
      case 49 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\t" );
         break;
      case 54 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "\\" );
         break;
      case 55 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "'" );
         break;
      case 56 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                           image.delete( image.length() - 2, image.length() ); image.append( "\"" );
         break;
      case 57 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\b" );
         break;
      case 58 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\f" );
         break;
      case 59 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\n" );
         break;
      case 60 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\r" );
         break;
      case 61 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                          image.delete( image.length() - 2, image.length() ); image.append( "\t" );
         break;
      case 67 :
         image.append(input_stream.getSuffix(jjimageLen));
         jjimageLen = 0;
                               image.delete( image.length() - 2, image.length() ); image.append( "`" );
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 52 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            matchedToken.image = image.substring( 1, image.length() - 1 );
         break;
      case 64 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                             matchedToken.image = image.substring( 1, image.length() - 1 );
         break;
      case 68 :
        image.append(input_stream.getSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                        matchedToken.image = image.substring( 1, image.length() - 1 );
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CypherTokenManager(CharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public CypherTokenManager (CharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(CharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(CharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 7 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_SINGLE_LINE_COMMENT",
   "STRING1",
   "STRING2",
   "ESC_SYMB_NAME",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 6, -1, -1, 0, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x10019800000001L, 0xfffffffffffffff1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0x3cffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x33ffffffeL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x320000000L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0xffeffe04c0000000L, 0xeL, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
    protected CharStream  input_stream;

    private final int[] jjrounds = new int[55];
    private final int[] jjstateSet = new int[2 * 55];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
