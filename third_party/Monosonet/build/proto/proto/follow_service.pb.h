// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/follow_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ffollow_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ffollow_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ffollow_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ffollow_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ffollow_5fservice_2eproto;
namespace sonet {
namespace follow {
namespace v1 {
class BlockUserRequest;
struct BlockUserRequestDefaultTypeInternal;
extern BlockUserRequestDefaultTypeInternal _BlockUserRequest_default_instance_;
class BlockUserResponse;
struct BlockUserResponseDefaultTypeInternal;
extern BlockUserResponseDefaultTypeInternal _BlockUserResponse_default_instance_;
class BulkFollowRequest;
struct BulkFollowRequestDefaultTypeInternal;
extern BulkFollowRequestDefaultTypeInternal _BulkFollowRequest_default_instance_;
class BulkFollowResponse;
struct BulkFollowResponseDefaultTypeInternal;
extern BulkFollowResponseDefaultTypeInternal _BulkFollowResponse_default_instance_;
class CheckRateLimitRequest;
struct CheckRateLimitRequestDefaultTypeInternal;
extern CheckRateLimitRequestDefaultTypeInternal _CheckRateLimitRequest_default_instance_;
class CheckRateLimitResponse;
struct CheckRateLimitResponseDefaultTypeInternal;
extern CheckRateLimitResponseDefaultTypeInternal _CheckRateLimitResponse_default_instance_;
class CheckRelationshipRequest;
struct CheckRelationshipRequestDefaultTypeInternal;
extern CheckRelationshipRequestDefaultTypeInternal _CheckRelationshipRequest_default_instance_;
class CheckRelationshipResponse;
struct CheckRelationshipResponseDefaultTypeInternal;
extern CheckRelationshipResponseDefaultTypeInternal _CheckRelationshipResponse_default_instance_;
class Follow;
struct FollowDefaultTypeInternal;
extern FollowDefaultTypeInternal _Follow_default_instance_;
class FollowActivity;
struct FollowActivityDefaultTypeInternal;
extern FollowActivityDefaultTypeInternal _FollowActivity_default_instance_;
class FollowUserRequest;
struct FollowUserRequestDefaultTypeInternal;
extern FollowUserRequestDefaultTypeInternal _FollowUserRequest_default_instance_;
class FollowUserResponse;
struct FollowUserResponseDefaultTypeInternal;
extern FollowUserResponseDefaultTypeInternal _FollowUserResponse_default_instance_;
class GetBulkRelationshipsRequest;
struct GetBulkRelationshipsRequestDefaultTypeInternal;
extern GetBulkRelationshipsRequestDefaultTypeInternal _GetBulkRelationshipsRequest_default_instance_;
class GetBulkRelationshipsResponse;
struct GetBulkRelationshipsResponseDefaultTypeInternal;
extern GetBulkRelationshipsResponseDefaultTypeInternal _GetBulkRelationshipsResponse_default_instance_;
class GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse;
struct GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal;
extern GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal _GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse_default_instance_;
class GetFollowerAnalyticsRequest;
struct GetFollowerAnalyticsRequestDefaultTypeInternal;
extern GetFollowerAnalyticsRequestDefaultTypeInternal _GetFollowerAnalyticsRequest_default_instance_;
class GetFollowerAnalyticsResponse;
struct GetFollowerAnalyticsResponseDefaultTypeInternal;
extern GetFollowerAnalyticsResponseDefaultTypeInternal _GetFollowerAnalyticsResponse_default_instance_;
class GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse;
struct GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal;
extern GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal _GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse_default_instance_;
class GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse;
struct GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal;
extern GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal _GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse_default_instance_;
class GetFollowersRequest;
struct GetFollowersRequestDefaultTypeInternal;
extern GetFollowersRequestDefaultTypeInternal _GetFollowersRequest_default_instance_;
class GetFollowersResponse;
struct GetFollowersResponseDefaultTypeInternal;
extern GetFollowersResponseDefaultTypeInternal _GetFollowersResponse_default_instance_;
class GetFollowingRequest;
struct GetFollowingRequestDefaultTypeInternal;
extern GetFollowingRequestDefaultTypeInternal _GetFollowingRequest_default_instance_;
class GetFollowingResponse;
struct GetFollowingResponseDefaultTypeInternal;
extern GetFollowingResponseDefaultTypeInternal _GetFollowingResponse_default_instance_;
class GetLiveFollowerCountRequest;
struct GetLiveFollowerCountRequestDefaultTypeInternal;
extern GetLiveFollowerCountRequestDefaultTypeInternal _GetLiveFollowerCountRequest_default_instance_;
class GetLiveFollowerCountResponse;
struct GetLiveFollowerCountResponseDefaultTypeInternal;
extern GetLiveFollowerCountResponseDefaultTypeInternal _GetLiveFollowerCountResponse_default_instance_;
class GetMutualFriendsRequest;
struct GetMutualFriendsRequestDefaultTypeInternal;
extern GetMutualFriendsRequestDefaultTypeInternal _GetMutualFriendsRequest_default_instance_;
class GetMutualFriendsResponse;
struct GetMutualFriendsResponseDefaultTypeInternal;
extern GetMutualFriendsResponseDefaultTypeInternal _GetMutualFriendsResponse_default_instance_;
class GetRecentActivityRequest;
struct GetRecentActivityRequestDefaultTypeInternal;
extern GetRecentActivityRequestDefaultTypeInternal _GetRecentActivityRequest_default_instance_;
class GetRecentActivityResponse;
struct GetRecentActivityResponseDefaultTypeInternal;
extern GetRecentActivityResponseDefaultTypeInternal _GetRecentActivityResponse_default_instance_;
class GetRecommendationsRequest;
struct GetRecommendationsRequestDefaultTypeInternal;
extern GetRecommendationsRequestDefaultTypeInternal _GetRecommendationsRequest_default_instance_;
class GetRecommendationsResponse;
struct GetRecommendationsResponseDefaultTypeInternal;
extern GetRecommendationsResponseDefaultTypeInternal _GetRecommendationsResponse_default_instance_;
class GetRelationshipRequest;
struct GetRelationshipRequestDefaultTypeInternal;
extern GetRelationshipRequestDefaultTypeInternal _GetRelationshipRequest_default_instance_;
class GetRelationshipResponse;
struct GetRelationshipResponseDefaultTypeInternal;
extern GetRelationshipResponseDefaultTypeInternal _GetRelationshipResponse_default_instance_;
class GetSocialMetricsRequest;
struct GetSocialMetricsRequestDefaultTypeInternal;
extern GetSocialMetricsRequestDefaultTypeInternal _GetSocialMetricsRequest_default_instance_;
class GetSocialMetricsResponse;
struct GetSocialMetricsResponseDefaultTypeInternal;
extern GetSocialMetricsResponseDefaultTypeInternal _GetSocialMetricsResponse_default_instance_;
class GetTrendingUsersRequest;
struct GetTrendingUsersRequestDefaultTypeInternal;
extern GetTrendingUsersRequestDefaultTypeInternal _GetTrendingUsersRequest_default_instance_;
class GetTrendingUsersResponse;
struct GetTrendingUsersResponseDefaultTypeInternal;
extern GetTrendingUsersResponseDefaultTypeInternal _GetTrendingUsersResponse_default_instance_;
class MuteUserRequest;
struct MuteUserRequestDefaultTypeInternal;
extern MuteUserRequestDefaultTypeInternal _MuteUserRequest_default_instance_;
class MuteUserResponse;
struct MuteUserResponseDefaultTypeInternal;
extern MuteUserResponseDefaultTypeInternal _MuteUserResponse_default_instance_;
class PaginationInfo;
struct PaginationInfoDefaultTypeInternal;
extern PaginationInfoDefaultTypeInternal _PaginationInfo_default_instance_;
class Recommendation;
struct RecommendationDefaultTypeInternal;
extern RecommendationDefaultTypeInternal _Recommendation_default_instance_;
class Relationship;
struct RelationshipDefaultTypeInternal;
extern RelationshipDefaultTypeInternal _Relationship_default_instance_;
class UnblockUserRequest;
struct UnblockUserRequestDefaultTypeInternal;
extern UnblockUserRequestDefaultTypeInternal _UnblockUserRequest_default_instance_;
class UnblockUserResponse;
struct UnblockUserResponseDefaultTypeInternal;
extern UnblockUserResponseDefaultTypeInternal _UnblockUserResponse_default_instance_;
class UnfollowUserRequest;
struct UnfollowUserRequestDefaultTypeInternal;
extern UnfollowUserRequestDefaultTypeInternal _UnfollowUserRequest_default_instance_;
class UnfollowUserResponse;
struct UnfollowUserResponseDefaultTypeInternal;
extern UnfollowUserResponseDefaultTypeInternal _UnfollowUserResponse_default_instance_;
class UnmuteUserRequest;
struct UnmuteUserRequestDefaultTypeInternal;
extern UnmuteUserRequestDefaultTypeInternal _UnmuteUserRequest_default_instance_;
class UnmuteUserResponse;
struct UnmuteUserResponseDefaultTypeInternal;
extern UnmuteUserResponseDefaultTypeInternal _UnmuteUserResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class ValidateFollowRequest;
struct ValidateFollowRequestDefaultTypeInternal;
extern ValidateFollowRequestDefaultTypeInternal _ValidateFollowRequest_default_instance_;
class ValidateFollowResponse;
struct ValidateFollowResponseDefaultTypeInternal;
extern ValidateFollowResponseDefaultTypeInternal _ValidateFollowResponse_default_instance_;
}  // namespace v1
}  // namespace follow
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> ::sonet::follow::v1::BlockUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::BlockUserRequest>(Arena*);
template<> ::sonet::follow::v1::BlockUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::BlockUserResponse>(Arena*);
template<> ::sonet::follow::v1::BulkFollowRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::BulkFollowRequest>(Arena*);
template<> ::sonet::follow::v1::BulkFollowResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::BulkFollowResponse>(Arena*);
template<> ::sonet::follow::v1::CheckRateLimitRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::CheckRateLimitRequest>(Arena*);
template<> ::sonet::follow::v1::CheckRateLimitResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::CheckRateLimitResponse>(Arena*);
template<> ::sonet::follow::v1::CheckRelationshipRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::CheckRelationshipRequest>(Arena*);
template<> ::sonet::follow::v1::CheckRelationshipResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::CheckRelationshipResponse>(Arena*);
template<> ::sonet::follow::v1::Follow* Arena::CreateMaybeMessage<::sonet::follow::v1::Follow>(Arena*);
template<> ::sonet::follow::v1::FollowActivity* Arena::CreateMaybeMessage<::sonet::follow::v1::FollowActivity>(Arena*);
template<> ::sonet::follow::v1::FollowUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::FollowUserRequest>(Arena*);
template<> ::sonet::follow::v1::FollowUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::FollowUserResponse>(Arena*);
template<> ::sonet::follow::v1::GetBulkRelationshipsRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetBulkRelationshipsRequest>(Arena*);
template<> ::sonet::follow::v1::GetBulkRelationshipsResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetBulkRelationshipsResponse>(Arena*);
template<> ::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse>(Arena*);
template<> ::sonet::follow::v1::GetFollowerAnalyticsRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowerAnalyticsRequest>(Arena*);
template<> ::sonet::follow::v1::GetFollowerAnalyticsResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowerAnalyticsResponse>(Arena*);
template<> ::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse>(Arena*);
template<> ::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse>(Arena*);
template<> ::sonet::follow::v1::GetFollowersRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowersRequest>(Arena*);
template<> ::sonet::follow::v1::GetFollowersResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowersResponse>(Arena*);
template<> ::sonet::follow::v1::GetFollowingRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowingRequest>(Arena*);
template<> ::sonet::follow::v1::GetFollowingResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetFollowingResponse>(Arena*);
template<> ::sonet::follow::v1::GetLiveFollowerCountRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetLiveFollowerCountRequest>(Arena*);
template<> ::sonet::follow::v1::GetLiveFollowerCountResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetLiveFollowerCountResponse>(Arena*);
template<> ::sonet::follow::v1::GetMutualFriendsRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetMutualFriendsRequest>(Arena*);
template<> ::sonet::follow::v1::GetMutualFriendsResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetMutualFriendsResponse>(Arena*);
template<> ::sonet::follow::v1::GetRecentActivityRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRecentActivityRequest>(Arena*);
template<> ::sonet::follow::v1::GetRecentActivityResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRecentActivityResponse>(Arena*);
template<> ::sonet::follow::v1::GetRecommendationsRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRecommendationsRequest>(Arena*);
template<> ::sonet::follow::v1::GetRecommendationsResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRecommendationsResponse>(Arena*);
template<> ::sonet::follow::v1::GetRelationshipRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRelationshipRequest>(Arena*);
template<> ::sonet::follow::v1::GetRelationshipResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetRelationshipResponse>(Arena*);
template<> ::sonet::follow::v1::GetSocialMetricsRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetSocialMetricsRequest>(Arena*);
template<> ::sonet::follow::v1::GetSocialMetricsResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetSocialMetricsResponse>(Arena*);
template<> ::sonet::follow::v1::GetTrendingUsersRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::GetTrendingUsersRequest>(Arena*);
template<> ::sonet::follow::v1::GetTrendingUsersResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::GetTrendingUsersResponse>(Arena*);
template<> ::sonet::follow::v1::MuteUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::MuteUserRequest>(Arena*);
template<> ::sonet::follow::v1::MuteUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::MuteUserResponse>(Arena*);
template<> ::sonet::follow::v1::PaginationInfo* Arena::CreateMaybeMessage<::sonet::follow::v1::PaginationInfo>(Arena*);
template<> ::sonet::follow::v1::Recommendation* Arena::CreateMaybeMessage<::sonet::follow::v1::Recommendation>(Arena*);
template<> ::sonet::follow::v1::Relationship* Arena::CreateMaybeMessage<::sonet::follow::v1::Relationship>(Arena*);
template<> ::sonet::follow::v1::UnblockUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::UnblockUserRequest>(Arena*);
template<> ::sonet::follow::v1::UnblockUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::UnblockUserResponse>(Arena*);
template<> ::sonet::follow::v1::UnfollowUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::UnfollowUserRequest>(Arena*);
template<> ::sonet::follow::v1::UnfollowUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::UnfollowUserResponse>(Arena*);
template<> ::sonet::follow::v1::UnmuteUserRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::UnmuteUserRequest>(Arena*);
template<> ::sonet::follow::v1::UnmuteUserResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::UnmuteUserResponse>(Arena*);
template<> ::sonet::follow::v1::UserInfo* Arena::CreateMaybeMessage<::sonet::follow::v1::UserInfo>(Arena*);
template<> ::sonet::follow::v1::ValidateFollowRequest* Arena::CreateMaybeMessage<::sonet::follow::v1::ValidateFollowRequest>(Arena*);
template<> ::sonet::follow::v1::ValidateFollowResponse* Arena::CreateMaybeMessage<::sonet::follow::v1::ValidateFollowResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sonet {
namespace follow {
namespace v1 {

enum FollowType : int {
  FOLLOW_TYPE_UNSPECIFIED = 0,
  FOLLOW_TYPE_STANDARD = 1,
  FOLLOW_TYPE_CLOSE_FRIEND = 2,
  FOLLOW_TYPE_MUTUAL = 3,
  FOLLOW_TYPE_PENDING = 4,
  FOLLOW_TYPE_REQUESTED = 5,
  FollowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FollowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FollowType_IsValid(int value);
constexpr FollowType FollowType_MIN = FOLLOW_TYPE_UNSPECIFIED;
constexpr FollowType FollowType_MAX = FOLLOW_TYPE_REQUESTED;
constexpr int FollowType_ARRAYSIZE = FollowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowType_descriptor();
template<typename T>
inline const std::string& FollowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FollowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FollowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FollowType_descriptor(), enum_t_value);
}
inline bool FollowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FollowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FollowType>(
    FollowType_descriptor(), name, value);
}
enum FollowStatus : int {
  FOLLOW_STATUS_UNSPECIFIED = 0,
  FOLLOW_STATUS_ACTIVE = 1,
  FOLLOW_STATUS_INACTIVE = 2,
  FOLLOW_STATUS_PENDING = 3,
  FOLLOW_STATUS_REJECTED = 4,
  FOLLOW_STATUS_CANCELLED = 5,
  FollowStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FollowStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FollowStatus_IsValid(int value);
constexpr FollowStatus FollowStatus_MIN = FOLLOW_STATUS_UNSPECIFIED;
constexpr FollowStatus FollowStatus_MAX = FOLLOW_STATUS_CANCELLED;
constexpr int FollowStatus_ARRAYSIZE = FollowStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowStatus_descriptor();
template<typename T>
inline const std::string& FollowStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FollowStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FollowStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FollowStatus_descriptor(), enum_t_value);
}
inline bool FollowStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FollowStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FollowStatus>(
    FollowStatus_descriptor(), name, value);
}
enum FollowNotificationLevel : int {
  NOTIFICATION_LEVEL_UNSPECIFIED = 0,
  NOTIFICATION_LEVEL_ALL = 1,
  NOTIFICATION_LEVEL_IMPORTANT = 2,
  NOTIFICATION_LEVEL_MENTIONS = 3,
  NOTIFICATION_LEVEL_OFF = 4,
  FollowNotificationLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FollowNotificationLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FollowNotificationLevel_IsValid(int value);
constexpr FollowNotificationLevel FollowNotificationLevel_MIN = NOTIFICATION_LEVEL_UNSPECIFIED;
constexpr FollowNotificationLevel FollowNotificationLevel_MAX = NOTIFICATION_LEVEL_OFF;
constexpr int FollowNotificationLevel_ARRAYSIZE = FollowNotificationLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowNotificationLevel_descriptor();
template<typename T>
inline const std::string& FollowNotificationLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FollowNotificationLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FollowNotificationLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FollowNotificationLevel_descriptor(), enum_t_value);
}
inline bool FollowNotificationLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FollowNotificationLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FollowNotificationLevel>(
    FollowNotificationLevel_descriptor(), name, value);
}
enum RelationshipType : int {
  RELATIONSHIP_TYPE_UNSPECIFIED = 0,
  RELATIONSHIP_TYPE_NONE = 1,
  RELATIONSHIP_TYPE_FOLLOWING = 2,
  RELATIONSHIP_TYPE_FOLLOWED_BY = 3,
  RELATIONSHIP_TYPE_MUTUAL = 4,
  RELATIONSHIP_TYPE_BLOCKED = 5,
  RELATIONSHIP_TYPE_BLOCKED_BY = 6,
  RELATIONSHIP_TYPE_MUTED = 7,
  RELATIONSHIP_TYPE_CLOSE_FRIENDS = 8,
  RELATIONSHIP_TYPE_PENDING_INCOMING = 9,
  RELATIONSHIP_TYPE_PENDING_OUTGOING = 10,
  RELATIONSHIP_TYPE_RESTRICTED = 11,
  RelationshipType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RelationshipType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RelationshipType_IsValid(int value);
constexpr RelationshipType RelationshipType_MIN = RELATIONSHIP_TYPE_UNSPECIFIED;
constexpr RelationshipType RelationshipType_MAX = RELATIONSHIP_TYPE_RESTRICTED;
constexpr int RelationshipType_ARRAYSIZE = RelationshipType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationshipType_descriptor();
template<typename T>
inline const std::string& RelationshipType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelationshipType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelationshipType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelationshipType_descriptor(), enum_t_value);
}
inline bool RelationshipType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelationshipType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelationshipType>(
    RelationshipType_descriptor(), name, value);
}
enum RecommendationAlgorithm : int {
  RECOMMENDATION_ALGORITHM_UNSPECIFIED = 0,
  RECOMMENDATION_ALGORITHM_MUTUAL_FRIENDS = 1,
  RECOMMENDATION_ALGORITHM_INTERESTS = 2,
  RECOMMENDATION_ALGORITHM_ENGAGEMENT = 3,
  RECOMMENDATION_ALGORITHM_LOCATION = 4,
  RECOMMENDATION_ALGORITHM_TRENDING = 5,
  RECOMMENDATION_ALGORITHM_COLLABORATIVE = 6,
  RECOMMENDATION_ALGORITHM_HYBRID = 7,
  RecommendationAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecommendationAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecommendationAlgorithm_IsValid(int value);
constexpr RecommendationAlgorithm RecommendationAlgorithm_MIN = RECOMMENDATION_ALGORITHM_UNSPECIFIED;
constexpr RecommendationAlgorithm RecommendationAlgorithm_MAX = RECOMMENDATION_ALGORITHM_HYBRID;
constexpr int RecommendationAlgorithm_ARRAYSIZE = RecommendationAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecommendationAlgorithm_descriptor();
template<typename T>
inline const std::string& RecommendationAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecommendationAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecommendationAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecommendationAlgorithm_descriptor(), enum_t_value);
}
inline bool RecommendationAlgorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecommendationAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecommendationAlgorithm>(
    RecommendationAlgorithm_descriptor(), name, value);
}
// ===================================================================

class Follow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.Follow) */ {
 public:
  inline Follow() : Follow(nullptr) {}
  ~Follow() override;
  explicit PROTOBUF_CONSTEXPR Follow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Follow(const Follow& from);
  Follow(Follow&& from) noexcept
    : Follow() {
    *this = ::std::move(from);
  }

  inline Follow& operator=(const Follow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Follow& operator=(Follow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Follow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Follow* internal_default_instance() {
    return reinterpret_cast<const Follow*>(
               &_Follow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Follow& a, Follow& b) {
    a.Swap(&b);
  }
  inline void Swap(Follow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Follow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Follow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Follow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Follow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Follow& from) {
    Follow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Follow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.Follow";
  }
  protected:
  explicit Follow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowIdFieldNumber = 1,
    kFollowerIdFieldNumber = 2,
    kFollowingIdFieldNumber = 3,
    kFollowSourceFieldNumber = 17,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kApprovedAtFieldNumber = 8,
    kLastInteractionAtFieldNumber = 10,
    kTypeFieldNumber = 4,
    kStatusFieldNumber = 5,
    kEngagementScoreFieldNumber = 11,
    kInteractionCountFieldNumber = 9,
    kIsMutedFieldNumber = 12,
    kShowRetweetsFieldNumber = 13,
    kShowRepliesFieldNumber = 14,
    kIsCloseFriendFieldNumber = 15,
    kNotificationLevelFieldNumber = 16,
    kMutualFriendsCountFieldNumber = 19,
    kRelationshipStrengthFieldNumber = 18,
  };
  // string follow_id = 1;
  void clear_follow_id();
  const std::string& follow_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follow_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follow_id();
  PROTOBUF_NODISCARD std::string* release_follow_id();
  void set_allocated_follow_id(std::string* follow_id);
  private:
  const std::string& _internal_follow_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follow_id(const std::string& value);
  std::string* _internal_mutable_follow_id();
  public:

  // string follower_id = 2;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // string following_id = 3;
  void clear_following_id();
  const std::string& following_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_following_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_following_id();
  PROTOBUF_NODISCARD std::string* release_following_id();
  void set_allocated_following_id(std::string* following_id);
  private:
  const std::string& _internal_following_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_following_id(const std::string& value);
  std::string* _internal_mutable_following_id();
  public:

  // string follow_source = 17;
  void clear_follow_source();
  const std::string& follow_source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follow_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follow_source();
  PROTOBUF_NODISCARD std::string* release_follow_source();
  void set_allocated_follow_source(std::string* follow_source);
  private:
  const std::string& _internal_follow_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follow_source(const std::string& value);
  std::string* _internal_mutable_follow_source();
  public:

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 7;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Timestamp approved_at = 8;
  bool has_approved_at() const;
  private:
  bool _internal_has_approved_at() const;
  public:
  void clear_approved_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& approved_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_approved_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_approved_at();
  void set_allocated_approved_at(::PROTOBUF_NAMESPACE_ID::Timestamp* approved_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_approved_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_approved_at();
  public:
  void unsafe_arena_set_allocated_approved_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* approved_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_approved_at();

  // .google.protobuf.Timestamp last_interaction_at = 10;
  bool has_last_interaction_at() const;
  private:
  bool _internal_has_last_interaction_at() const;
  public:
  void clear_last_interaction_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_interaction_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_interaction_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_interaction_at();
  void set_allocated_last_interaction_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_interaction_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_interaction_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_interaction_at();
  public:
  void unsafe_arena_set_allocated_last_interaction_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_interaction_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_interaction_at();

  // .sonet.follow.v1.FollowType type = 4;
  void clear_type();
  ::sonet::follow::v1::FollowType type() const;
  void set_type(::sonet::follow::v1::FollowType value);
  private:
  ::sonet::follow::v1::FollowType _internal_type() const;
  void _internal_set_type(::sonet::follow::v1::FollowType value);
  public:

  // .sonet.follow.v1.FollowStatus status = 5;
  void clear_status();
  ::sonet::follow::v1::FollowStatus status() const;
  void set_status(::sonet::follow::v1::FollowStatus value);
  private:
  ::sonet::follow::v1::FollowStatus _internal_status() const;
  void _internal_set_status(::sonet::follow::v1::FollowStatus value);
  public:

  // double engagement_score = 11;
  void clear_engagement_score();
  double engagement_score() const;
  void set_engagement_score(double value);
  private:
  double _internal_engagement_score() const;
  void _internal_set_engagement_score(double value);
  public:

  // int32 interaction_count = 9;
  void clear_interaction_count();
  int32_t interaction_count() const;
  void set_interaction_count(int32_t value);
  private:
  int32_t _internal_interaction_count() const;
  void _internal_set_interaction_count(int32_t value);
  public:

  // bool is_muted = 12;
  void clear_is_muted();
  bool is_muted() const;
  void set_is_muted(bool value);
  private:
  bool _internal_is_muted() const;
  void _internal_set_is_muted(bool value);
  public:

  // bool show_retweets = 13;
  void clear_show_retweets();
  bool show_retweets() const;
  void set_show_retweets(bool value);
  private:
  bool _internal_show_retweets() const;
  void _internal_set_show_retweets(bool value);
  public:

  // bool show_replies = 14;
  void clear_show_replies();
  bool show_replies() const;
  void set_show_replies(bool value);
  private:
  bool _internal_show_replies() const;
  void _internal_set_show_replies(bool value);
  public:

  // bool is_close_friend = 15;
  void clear_is_close_friend();
  bool is_close_friend() const;
  void set_is_close_friend(bool value);
  private:
  bool _internal_is_close_friend() const;
  void _internal_set_is_close_friend(bool value);
  public:

  // .sonet.follow.v1.FollowNotificationLevel notification_level = 16;
  void clear_notification_level();
  ::sonet::follow::v1::FollowNotificationLevel notification_level() const;
  void set_notification_level(::sonet::follow::v1::FollowNotificationLevel value);
  private:
  ::sonet::follow::v1::FollowNotificationLevel _internal_notification_level() const;
  void _internal_set_notification_level(::sonet::follow::v1::FollowNotificationLevel value);
  public:

  // int32 mutual_friends_count = 19;
  void clear_mutual_friends_count();
  int32_t mutual_friends_count() const;
  void set_mutual_friends_count(int32_t value);
  private:
  int32_t _internal_mutual_friends_count() const;
  void _internal_set_mutual_friends_count(int32_t value);
  public:

  // double relationship_strength = 18;
  void clear_relationship_strength();
  double relationship_strength() const;
  void set_relationship_strength(double value);
  private:
  double _internal_relationship_strength() const;
  void _internal_set_relationship_strength(double value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.Follow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follow_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr following_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follow_source_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* approved_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_interaction_at_;
    int type_;
    int status_;
    double engagement_score_;
    int32_t interaction_count_;
    bool is_muted_;
    bool show_retweets_;
    bool show_replies_;
    bool is_close_friend_;
    int notification_level_;
    int32_t mutual_friends_count_;
    double relationship_strength_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Relationship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.Relationship) */ {
 public:
  inline Relationship() : Relationship(nullptr) {}
  ~Relationship() override;
  explicit PROTOBUF_CONSTEXPR Relationship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Relationship(const Relationship& from);
  Relationship(Relationship&& from) noexcept
    : Relationship() {
    *this = ::std::move(from);
  }

  inline Relationship& operator=(const Relationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline Relationship& operator=(Relationship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Relationship& default_instance() {
    return *internal_default_instance();
  }
  static inline const Relationship* internal_default_instance() {
    return reinterpret_cast<const Relationship*>(
               &_Relationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Relationship& a, Relationship& b) {
    a.Swap(&b);
  }
  inline void Swap(Relationship* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Relationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Relationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Relationship>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Relationship& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Relationship& from) {
    Relationship::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Relationship* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.Relationship";
  }
  protected:
  explicit Relationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipIdFieldNumber = 1,
    kUser1IdFieldNumber = 2,
    kUser2IdFieldNumber = 3,
    kCreatedAtFieldNumber = 13,
    kUpdatedAtFieldNumber = 14,
    kUser1FollowedUser2AtFieldNumber = 15,
    kUser2FollowedUser1AtFieldNumber = 16,
    kTypeFieldNumber = 4,
    kUser1FollowsUser2FieldNumber = 5,
    kUser2FollowsUser1FieldNumber = 6,
    kUser1BlocksUser2FieldNumber = 7,
    kUser2BlocksUser1FieldNumber = 8,
    kUser1MutesUser2FieldNumber = 9,
    kUser2MutesUser1FieldNumber = 10,
    kIsCloseFriendsFieldNumber = 11,
    kIsVerifiedRelationshipFieldNumber = 12,
    kTotalInteractionsFieldNumber = 17,
    kRelationshipStrengthFieldNumber = 18,
    kEngagementRateFieldNumber = 19,
    kMutualFollowersCountFieldNumber = 20,
  };
  // string relationship_id = 1;
  void clear_relationship_id();
  const std::string& relationship_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relationship_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relationship_id();
  PROTOBUF_NODISCARD std::string* release_relationship_id();
  void set_allocated_relationship_id(std::string* relationship_id);
  private:
  const std::string& _internal_relationship_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relationship_id(const std::string& value);
  std::string* _internal_mutable_relationship_id();
  public:

  // string user1_id = 2;
  void clear_user1_id();
  const std::string& user1_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user1_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user1_id();
  PROTOBUF_NODISCARD std::string* release_user1_id();
  void set_allocated_user1_id(std::string* user1_id);
  private:
  const std::string& _internal_user1_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user1_id(const std::string& value);
  std::string* _internal_mutable_user1_id();
  public:

  // string user2_id = 3;
  void clear_user2_id();
  const std::string& user2_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user2_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user2_id();
  PROTOBUF_NODISCARD std::string* release_user2_id();
  void set_allocated_user2_id(std::string* user2_id);
  private:
  const std::string& _internal_user2_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user2_id(const std::string& value);
  std::string* _internal_mutable_user2_id();
  public:

  // .google.protobuf.Timestamp created_at = 13;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 14;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .google.protobuf.Timestamp user1_followed_user2_at = 15;
  bool has_user1_followed_user2_at() const;
  private:
  bool _internal_has_user1_followed_user2_at() const;
  public:
  void clear_user1_followed_user2_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& user1_followed_user2_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_user1_followed_user2_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_user1_followed_user2_at();
  void set_allocated_user1_followed_user2_at(::PROTOBUF_NAMESPACE_ID::Timestamp* user1_followed_user2_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_user1_followed_user2_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_user1_followed_user2_at();
  public:
  void unsafe_arena_set_allocated_user1_followed_user2_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* user1_followed_user2_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_user1_followed_user2_at();

  // .google.protobuf.Timestamp user2_followed_user1_at = 16;
  bool has_user2_followed_user1_at() const;
  private:
  bool _internal_has_user2_followed_user1_at() const;
  public:
  void clear_user2_followed_user1_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& user2_followed_user1_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_user2_followed_user1_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_user2_followed_user1_at();
  void set_allocated_user2_followed_user1_at(::PROTOBUF_NAMESPACE_ID::Timestamp* user2_followed_user1_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_user2_followed_user1_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_user2_followed_user1_at();
  public:
  void unsafe_arena_set_allocated_user2_followed_user1_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* user2_followed_user1_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_user2_followed_user1_at();

  // .sonet.follow.v1.RelationshipType type = 4;
  void clear_type();
  ::sonet::follow::v1::RelationshipType type() const;
  void set_type(::sonet::follow::v1::RelationshipType value);
  private:
  ::sonet::follow::v1::RelationshipType _internal_type() const;
  void _internal_set_type(::sonet::follow::v1::RelationshipType value);
  public:

  // bool user1_follows_user2 = 5;
  void clear_user1_follows_user2();
  bool user1_follows_user2() const;
  void set_user1_follows_user2(bool value);
  private:
  bool _internal_user1_follows_user2() const;
  void _internal_set_user1_follows_user2(bool value);
  public:

  // bool user2_follows_user1 = 6;
  void clear_user2_follows_user1();
  bool user2_follows_user1() const;
  void set_user2_follows_user1(bool value);
  private:
  bool _internal_user2_follows_user1() const;
  void _internal_set_user2_follows_user1(bool value);
  public:

  // bool user1_blocks_user2 = 7;
  void clear_user1_blocks_user2();
  bool user1_blocks_user2() const;
  void set_user1_blocks_user2(bool value);
  private:
  bool _internal_user1_blocks_user2() const;
  void _internal_set_user1_blocks_user2(bool value);
  public:

  // bool user2_blocks_user1 = 8;
  void clear_user2_blocks_user1();
  bool user2_blocks_user1() const;
  void set_user2_blocks_user1(bool value);
  private:
  bool _internal_user2_blocks_user1() const;
  void _internal_set_user2_blocks_user1(bool value);
  public:

  // bool user1_mutes_user2 = 9;
  void clear_user1_mutes_user2();
  bool user1_mutes_user2() const;
  void set_user1_mutes_user2(bool value);
  private:
  bool _internal_user1_mutes_user2() const;
  void _internal_set_user1_mutes_user2(bool value);
  public:

  // bool user2_mutes_user1 = 10;
  void clear_user2_mutes_user1();
  bool user2_mutes_user1() const;
  void set_user2_mutes_user1(bool value);
  private:
  bool _internal_user2_mutes_user1() const;
  void _internal_set_user2_mutes_user1(bool value);
  public:

  // bool is_close_friends = 11;
  void clear_is_close_friends();
  bool is_close_friends() const;
  void set_is_close_friends(bool value);
  private:
  bool _internal_is_close_friends() const;
  void _internal_set_is_close_friends(bool value);
  public:

  // bool is_verified_relationship = 12;
  void clear_is_verified_relationship();
  bool is_verified_relationship() const;
  void set_is_verified_relationship(bool value);
  private:
  bool _internal_is_verified_relationship() const;
  void _internal_set_is_verified_relationship(bool value);
  public:

  // int32 total_interactions = 17;
  void clear_total_interactions();
  int32_t total_interactions() const;
  void set_total_interactions(int32_t value);
  private:
  int32_t _internal_total_interactions() const;
  void _internal_set_total_interactions(int32_t value);
  public:

  // double relationship_strength = 18;
  void clear_relationship_strength();
  double relationship_strength() const;
  void set_relationship_strength(double value);
  private:
  double _internal_relationship_strength() const;
  void _internal_set_relationship_strength(double value);
  public:

  // double engagement_rate = 19;
  void clear_engagement_rate();
  double engagement_rate() const;
  void set_engagement_rate(double value);
  private:
  double _internal_engagement_rate() const;
  void _internal_set_engagement_rate(double value);
  public:

  // int32 mutual_followers_count = 20;
  void clear_mutual_followers_count();
  int32_t mutual_followers_count() const;
  void set_mutual_followers_count(int32_t value);
  private:
  int32_t _internal_mutual_followers_count() const;
  void _internal_set_mutual_followers_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.Relationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relationship_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user1_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user2_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* user1_followed_user2_at_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* user2_followed_user1_at_;
    int type_;
    bool user1_follows_user2_;
    bool user2_follows_user1_;
    bool user1_blocks_user2_;
    bool user2_blocks_user1_;
    bool user1_mutes_user2_;
    bool user2_mutes_user1_;
    bool is_close_friends_;
    bool is_verified_relationship_;
    int32_t total_interactions_;
    double relationship_strength_;
    double engagement_rate_;
    int32_t mutual_followers_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUsernameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kLastActiveAtFieldNumber = 9,
    kIsVerifiedFieldNumber = 5,
    kIsPrivateFieldNumber = 6,
    kFollowersCountFieldNumber = 7,
    kFollowingCountFieldNumber = 8,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string display_name = 3;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_NODISCARD std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // .google.protobuf.Timestamp last_active_at = 9;
  bool has_last_active_at() const;
  private:
  bool _internal_has_last_active_at() const;
  public:
  void clear_last_active_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_active_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_active_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_active_at();
  void set_allocated_last_active_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_active_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_active_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_active_at();
  public:
  void unsafe_arena_set_allocated_last_active_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_active_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_active_at();

  // bool is_verified = 5;
  void clear_is_verified();
  bool is_verified() const;
  void set_is_verified(bool value);
  private:
  bool _internal_is_verified() const;
  void _internal_set_is_verified(bool value);
  public:

  // bool is_private = 6;
  void clear_is_private();
  bool is_private() const;
  void set_is_private(bool value);
  private:
  bool _internal_is_private() const;
  void _internal_set_is_private(bool value);
  public:

  // int32 followers_count = 7;
  void clear_followers_count();
  int32_t followers_count() const;
  void set_followers_count(int32_t value);
  private:
  int32_t _internal_followers_count() const;
  void _internal_set_followers_count(int32_t value);
  public:

  // int32 following_count = 8;
  void clear_following_count();
  int32_t following_count() const;
  void set_following_count(int32_t value);
  private:
  int32_t _internal_following_count() const;
  void _internal_set_following_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_active_at_;
    bool is_verified_;
    bool is_private_;
    int32_t followers_count_;
    int32_t following_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Recommendation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.Recommendation) */ {
 public:
  inline Recommendation() : Recommendation(nullptr) {}
  ~Recommendation() override;
  explicit PROTOBUF_CONSTEXPR Recommendation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Recommendation(const Recommendation& from);
  Recommendation(Recommendation&& from) noexcept
    : Recommendation() {
    *this = ::std::move(from);
  }

  inline Recommendation& operator=(const Recommendation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recommendation& operator=(Recommendation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recommendation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recommendation* internal_default_instance() {
    return reinterpret_cast<const Recommendation*>(
               &_Recommendation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Recommendation& a, Recommendation& b) {
    a.Swap(&b);
  }
  inline void Swap(Recommendation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recommendation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recommendation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recommendation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Recommendation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Recommendation& from) {
    Recommendation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recommendation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.Recommendation";
  }
  protected:
  explicit Recommendation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonInterestsFieldNumber = 6,
    kReasonFieldNumber = 3,
    kUserFieldNumber = 1,
    kScoreFieldNumber = 2,
    kAlgorithmFieldNumber = 4,
    kMutualFriendsCountFieldNumber = 5,
  };
  // repeated string common_interests = 6;
  int common_interests_size() const;
  private:
  int _internal_common_interests_size() const;
  public:
  void clear_common_interests();
  const std::string& common_interests(int index) const;
  std::string* mutable_common_interests(int index);
  void set_common_interests(int index, const std::string& value);
  void set_common_interests(int index, std::string&& value);
  void set_common_interests(int index, const char* value);
  void set_common_interests(int index, const char* value, size_t size);
  std::string* add_common_interests();
  void add_common_interests(const std::string& value);
  void add_common_interests(std::string&& value);
  void add_common_interests(const char* value);
  void add_common_interests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& common_interests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_common_interests();
  private:
  const std::string& _internal_common_interests(int index) const;
  std::string* _internal_add_common_interests();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .sonet.follow.v1.UserInfo user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::sonet::follow::v1::UserInfo& user() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::UserInfo* release_user();
  ::sonet::follow::v1::UserInfo* mutable_user();
  void set_allocated_user(::sonet::follow::v1::UserInfo* user);
  private:
  const ::sonet::follow::v1::UserInfo& _internal_user() const;
  ::sonet::follow::v1::UserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::sonet::follow::v1::UserInfo* user);
  ::sonet::follow::v1::UserInfo* unsafe_arena_release_user();

  // double score = 2;
  void clear_score();
  double score() const;
  void set_score(double value);
  private:
  double _internal_score() const;
  void _internal_set_score(double value);
  public:

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 4;
  void clear_algorithm();
  ::sonet::follow::v1::RecommendationAlgorithm algorithm() const;
  void set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value);
  private:
  ::sonet::follow::v1::RecommendationAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value);
  public:

  // int32 mutual_friends_count = 5;
  void clear_mutual_friends_count();
  int32_t mutual_friends_count() const;
  void set_mutual_friends_count(int32_t value);
  private:
  int32_t _internal_mutual_friends_count() const;
  void _internal_set_mutual_friends_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.Recommendation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> common_interests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::sonet::follow::v1::UserInfo* user_;
    double score_;
    int algorithm_;
    int32_t mutual_friends_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PaginationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.PaginationInfo) */ {
 public:
  inline PaginationInfo() : PaginationInfo(nullptr) {}
  ~PaginationInfo() override;
  explicit PROTOBUF_CONSTEXPR PaginationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaginationInfo(const PaginationInfo& from);
  PaginationInfo(PaginationInfo&& from) noexcept
    : PaginationInfo() {
    *this = ::std::move(from);
  }

  inline PaginationInfo& operator=(const PaginationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationInfo& operator=(PaginationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationInfo* internal_default_instance() {
    return reinterpret_cast<const PaginationInfo*>(
               &_PaginationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaginationInfo& a, PaginationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PaginationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaginationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaginationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PaginationInfo& from) {
    PaginationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaginationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.PaginationInfo";
  }
  protected:
  explicit PaginationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextCursorFieldNumber = 1,
    kPreviousCursorFieldNumber = 2,
    kHasNextFieldNumber = 3,
    kHasPreviousFieldNumber = 4,
    kTotalCountFieldNumber = 5,
  };
  // string next_cursor = 1;
  void clear_next_cursor();
  const std::string& next_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_cursor();
  PROTOBUF_NODISCARD std::string* release_next_cursor();
  void set_allocated_next_cursor(std::string* next_cursor);
  private:
  const std::string& _internal_next_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_cursor(const std::string& value);
  std::string* _internal_mutable_next_cursor();
  public:

  // string previous_cursor = 2;
  void clear_previous_cursor();
  const std::string& previous_cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_previous_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_previous_cursor();
  PROTOBUF_NODISCARD std::string* release_previous_cursor();
  void set_allocated_previous_cursor(std::string* previous_cursor);
  private:
  const std::string& _internal_previous_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_cursor(const std::string& value);
  std::string* _internal_mutable_previous_cursor();
  public:

  // bool has_next = 3;
  void clear_has_next();
  bool has_next() const;
  void set_has_next(bool value);
  private:
  bool _internal_has_next() const;
  void _internal_set_has_next(bool value);
  public:

  // bool has_previous = 4;
  void clear_has_previous();
  bool has_previous() const;
  void set_has_previous(bool value);
  private:
  bool _internal_has_previous() const;
  void _internal_set_has_previous(bool value);
  public:

  // int32 total_count = 5;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.PaginationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_cursor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_cursor_;
    bool has_next_;
    bool has_previous_;
    int32_t total_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FollowUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.FollowUserRequest) */ {
 public:
  inline FollowUserRequest() : FollowUserRequest(nullptr) {}
  ~FollowUserRequest() override;
  explicit PROTOBUF_CONSTEXPR FollowUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowUserRequest(const FollowUserRequest& from);
  FollowUserRequest(FollowUserRequest&& from) noexcept
    : FollowUserRequest() {
    *this = ::std::move(from);
  }

  inline FollowUserRequest& operator=(const FollowUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowUserRequest& operator=(FollowUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FollowUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowUserRequest* internal_default_instance() {
    return reinterpret_cast<const FollowUserRequest*>(
               &_FollowUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FollowUserRequest& a, FollowUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FollowUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FollowUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FollowUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FollowUserRequest& from) {
    FollowUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.FollowUserRequest";
  }
  protected:
  explicit FollowUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFollowerIdFieldNumber = 2,
    kSourceFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string follower_id = 2;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // string source = 4;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // .sonet.follow.v1.FollowType type = 3;
  void clear_type();
  ::sonet::follow::v1::FollowType type() const;
  void set_type(::sonet::follow::v1::FollowType value);
  private:
  ::sonet::follow::v1::FollowType _internal_type() const;
  void _internal_set_type(::sonet::follow::v1::FollowType value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.FollowUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FollowUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.FollowUserResponse) */ {
 public:
  inline FollowUserResponse() : FollowUserResponse(nullptr) {}
  ~FollowUserResponse() override;
  explicit PROTOBUF_CONSTEXPR FollowUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowUserResponse(const FollowUserResponse& from);
  FollowUserResponse(FollowUserResponse&& from) noexcept
    : FollowUserResponse() {
    *this = ::std::move(from);
  }

  inline FollowUserResponse& operator=(const FollowUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowUserResponse& operator=(FollowUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FollowUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowUserResponse* internal_default_instance() {
    return reinterpret_cast<const FollowUserResponse*>(
               &_FollowUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FollowUserResponse& a, FollowUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FollowUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FollowUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FollowUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FollowUserResponse& from) {
    FollowUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.FollowUserResponse";
  }
  protected:
  explicit FollowUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kFollowFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kWasAlreadyFollowingFieldNumber = 4,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .sonet.follow.v1.Follow follow = 1;
  bool has_follow() const;
  private:
  bool _internal_has_follow() const;
  public:
  void clear_follow();
  const ::sonet::follow::v1::Follow& follow() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::Follow* release_follow();
  ::sonet::follow::v1::Follow* mutable_follow();
  void set_allocated_follow(::sonet::follow::v1::Follow* follow);
  private:
  const ::sonet::follow::v1::Follow& _internal_follow() const;
  ::sonet::follow::v1::Follow* _internal_mutable_follow();
  public:
  void unsafe_arena_set_allocated_follow(
      ::sonet::follow::v1::Follow* follow);
  ::sonet::follow::v1::Follow* unsafe_arena_release_follow();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_already_following = 4;
  void clear_was_already_following();
  bool was_already_following() const;
  void set_was_already_following(bool value);
  private:
  bool _internal_was_already_following() const;
  void _internal_set_was_already_following(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.FollowUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::sonet::follow::v1::Follow* follow_;
    bool success_;
    bool was_already_following_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnfollowUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnfollowUserRequest) */ {
 public:
  inline UnfollowUserRequest() : UnfollowUserRequest(nullptr) {}
  ~UnfollowUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UnfollowUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfollowUserRequest(const UnfollowUserRequest& from);
  UnfollowUserRequest(UnfollowUserRequest&& from) noexcept
    : UnfollowUserRequest() {
    *this = ::std::move(from);
  }

  inline UnfollowUserRequest& operator=(const UnfollowUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfollowUserRequest& operator=(UnfollowUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnfollowUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfollowUserRequest* internal_default_instance() {
    return reinterpret_cast<const UnfollowUserRequest*>(
               &_UnfollowUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnfollowUserRequest& a, UnfollowUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfollowUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfollowUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnfollowUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnfollowUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnfollowUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnfollowUserRequest& from) {
    UnfollowUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfollowUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnfollowUserRequest";
  }
  protected:
  explicit UnfollowUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFollowerIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string follower_id = 2;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnfollowUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnfollowUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnfollowUserResponse) */ {
 public:
  inline UnfollowUserResponse() : UnfollowUserResponse(nullptr) {}
  ~UnfollowUserResponse() override;
  explicit PROTOBUF_CONSTEXPR UnfollowUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfollowUserResponse(const UnfollowUserResponse& from);
  UnfollowUserResponse(UnfollowUserResponse&& from) noexcept
    : UnfollowUserResponse() {
    *this = ::std::move(from);
  }

  inline UnfollowUserResponse& operator=(const UnfollowUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfollowUserResponse& operator=(UnfollowUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnfollowUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfollowUserResponse* internal_default_instance() {
    return reinterpret_cast<const UnfollowUserResponse*>(
               &_UnfollowUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UnfollowUserResponse& a, UnfollowUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnfollowUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfollowUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnfollowUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnfollowUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnfollowUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnfollowUserResponse& from) {
    UnfollowUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnfollowUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnfollowUserResponse";
  }
  protected:
  explicit UnfollowUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kWasFollowingFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_following = 3;
  void clear_was_following();
  bool was_following() const;
  void set_was_following(bool value);
  private:
  bool _internal_was_following() const;
  void _internal_set_was_following(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnfollowUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    bool was_following_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BlockUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.BlockUserRequest) */ {
 public:
  inline BlockUserRequest() : BlockUserRequest(nullptr) {}
  ~BlockUserRequest() override;
  explicit PROTOBUF_CONSTEXPR BlockUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockUserRequest(const BlockUserRequest& from);
  BlockUserRequest(BlockUserRequest&& from) noexcept
    : BlockUserRequest() {
    *this = ::std::move(from);
  }

  inline BlockUserRequest& operator=(const BlockUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockUserRequest& operator=(BlockUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockUserRequest* internal_default_instance() {
    return reinterpret_cast<const BlockUserRequest*>(
               &_BlockUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlockUserRequest& a, BlockUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockUserRequest& from) {
    BlockUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.BlockUserRequest";
  }
  protected:
  explicit BlockUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBlockerIdFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string blocker_id = 2;
  void clear_blocker_id();
  const std::string& blocker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blocker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blocker_id();
  PROTOBUF_NODISCARD std::string* release_blocker_id();
  void set_allocated_blocker_id(std::string* blocker_id);
  private:
  const std::string& _internal_blocker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blocker_id(const std::string& value);
  std::string* _internal_mutable_blocker_id();
  public:

  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.BlockUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blocker_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BlockUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.BlockUserResponse) */ {
 public:
  inline BlockUserResponse() : BlockUserResponse(nullptr) {}
  ~BlockUserResponse() override;
  explicit PROTOBUF_CONSTEXPR BlockUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockUserResponse(const BlockUserResponse& from);
  BlockUserResponse(BlockUserResponse&& from) noexcept
    : BlockUserResponse() {
    *this = ::std::move(from);
  }

  inline BlockUserResponse& operator=(const BlockUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockUserResponse& operator=(BlockUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockUserResponse* internal_default_instance() {
    return reinterpret_cast<const BlockUserResponse*>(
               &_BlockUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockUserResponse& a, BlockUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockUserResponse& from) {
    BlockUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.BlockUserResponse";
  }
  protected:
  explicit BlockUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kWasAlreadyBlockedFieldNumber = 3,
    kUnfollowedAutomaticallyFieldNumber = 4,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_already_blocked = 3;
  void clear_was_already_blocked();
  bool was_already_blocked() const;
  void set_was_already_blocked(bool value);
  private:
  bool _internal_was_already_blocked() const;
  void _internal_set_was_already_blocked(bool value);
  public:

  // bool unfollowed_automatically = 4;
  void clear_unfollowed_automatically();
  bool unfollowed_automatically() const;
  void set_unfollowed_automatically(bool value);
  private:
  bool _internal_unfollowed_automatically() const;
  void _internal_set_unfollowed_automatically(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.BlockUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    bool was_already_blocked_;
    bool unfollowed_automatically_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnblockUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnblockUserRequest) */ {
 public:
  inline UnblockUserRequest() : UnblockUserRequest(nullptr) {}
  ~UnblockUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UnblockUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockUserRequest(const UnblockUserRequest& from);
  UnblockUserRequest(UnblockUserRequest&& from) noexcept
    : UnblockUserRequest() {
    *this = ::std::move(from);
  }

  inline UnblockUserRequest& operator=(const UnblockUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockUserRequest& operator=(UnblockUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnblockUserRequest* internal_default_instance() {
    return reinterpret_cast<const UnblockUserRequest*>(
               &_UnblockUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UnblockUserRequest& a, UnblockUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnblockUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnblockUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnblockUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnblockUserRequest& from) {
    UnblockUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnblockUserRequest";
  }
  protected:
  explicit UnblockUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBlockerIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string blocker_id = 2;
  void clear_blocker_id();
  const std::string& blocker_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blocker_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blocker_id();
  PROTOBUF_NODISCARD std::string* release_blocker_id();
  void set_allocated_blocker_id(std::string* blocker_id);
  private:
  const std::string& _internal_blocker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blocker_id(const std::string& value);
  std::string* _internal_mutable_blocker_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnblockUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blocker_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnblockUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnblockUserResponse) */ {
 public:
  inline UnblockUserResponse() : UnblockUserResponse(nullptr) {}
  ~UnblockUserResponse() override;
  explicit PROTOBUF_CONSTEXPR UnblockUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnblockUserResponse(const UnblockUserResponse& from);
  UnblockUserResponse(UnblockUserResponse&& from) noexcept
    : UnblockUserResponse() {
    *this = ::std::move(from);
  }

  inline UnblockUserResponse& operator=(const UnblockUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnblockUserResponse& operator=(UnblockUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnblockUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnblockUserResponse* internal_default_instance() {
    return reinterpret_cast<const UnblockUserResponse*>(
               &_UnblockUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UnblockUserResponse& a, UnblockUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnblockUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnblockUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnblockUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnblockUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnblockUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnblockUserResponse& from) {
    UnblockUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnblockUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnblockUserResponse";
  }
  protected:
  explicit UnblockUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kWasBlockedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_blocked = 3;
  void clear_was_blocked();
  bool was_blocked() const;
  void set_was_blocked(bool value);
  private:
  bool _internal_was_blocked() const;
  void _internal_set_was_blocked(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnblockUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    bool was_blocked_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MuteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.MuteUserRequest) */ {
 public:
  inline MuteUserRequest() : MuteUserRequest(nullptr) {}
  ~MuteUserRequest() override;
  explicit PROTOBUF_CONSTEXPR MuteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteUserRequest(const MuteUserRequest& from);
  MuteUserRequest(MuteUserRequest&& from) noexcept
    : MuteUserRequest() {
    *this = ::std::move(from);
  }

  inline MuteUserRequest& operator=(const MuteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteUserRequest& operator=(MuteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteUserRequest* internal_default_instance() {
    return reinterpret_cast<const MuteUserRequest*>(
               &_MuteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MuteUserRequest& a, MuteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MuteUserRequest& from) {
    MuteUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.MuteUserRequest";
  }
  protected:
  explicit MuteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMuterIdFieldNumber = 2,
    kMuteNotificationsFieldNumber = 3,
    kMuteContentFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string muter_id = 2;
  void clear_muter_id();
  const std::string& muter_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_muter_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_muter_id();
  PROTOBUF_NODISCARD std::string* release_muter_id();
  void set_allocated_muter_id(std::string* muter_id);
  private:
  const std::string& _internal_muter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_muter_id(const std::string& value);
  std::string* _internal_mutable_muter_id();
  public:

  // bool mute_notifications = 3;
  void clear_mute_notifications();
  bool mute_notifications() const;
  void set_mute_notifications(bool value);
  private:
  bool _internal_mute_notifications() const;
  void _internal_set_mute_notifications(bool value);
  public:

  // bool mute_content = 4;
  void clear_mute_content();
  bool mute_content() const;
  void set_mute_content(bool value);
  private:
  bool _internal_mute_content() const;
  void _internal_set_mute_content(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.MuteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr muter_id_;
    bool mute_notifications_;
    bool mute_content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MuteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.MuteUserResponse) */ {
 public:
  inline MuteUserResponse() : MuteUserResponse(nullptr) {}
  ~MuteUserResponse() override;
  explicit PROTOBUF_CONSTEXPR MuteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteUserResponse(const MuteUserResponse& from);
  MuteUserResponse(MuteUserResponse&& from) noexcept
    : MuteUserResponse() {
    *this = ::std::move(from);
  }

  inline MuteUserResponse& operator=(const MuteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteUserResponse& operator=(MuteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MuteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteUserResponse* internal_default_instance() {
    return reinterpret_cast<const MuteUserResponse*>(
               &_MuteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MuteUserResponse& a, MuteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MuteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MuteUserResponse& from) {
    MuteUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MuteUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.MuteUserResponse";
  }
  protected:
  explicit MuteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kWasAlreadyMutedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_already_muted = 3;
  void clear_was_already_muted();
  bool was_already_muted() const;
  void set_was_already_muted(bool value);
  private:
  bool _internal_was_already_muted() const;
  void _internal_set_was_already_muted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.MuteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    bool was_already_muted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnmuteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnmuteUserRequest) */ {
 public:
  inline UnmuteUserRequest() : UnmuteUserRequest(nullptr) {}
  ~UnmuteUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UnmuteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteUserRequest(const UnmuteUserRequest& from);
  UnmuteUserRequest(UnmuteUserRequest&& from) noexcept
    : UnmuteUserRequest() {
    *this = ::std::move(from);
  }

  inline UnmuteUserRequest& operator=(const UnmuteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteUserRequest& operator=(UnmuteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteUserRequest* internal_default_instance() {
    return reinterpret_cast<const UnmuteUserRequest*>(
               &_UnmuteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UnmuteUserRequest& a, UnmuteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnmuteUserRequest& from) {
    UnmuteUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnmuteUserRequest";
  }
  protected:
  explicit UnmuteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kMuterIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string muter_id = 2;
  void clear_muter_id();
  const std::string& muter_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_muter_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_muter_id();
  PROTOBUF_NODISCARD std::string* release_muter_id();
  void set_allocated_muter_id(std::string* muter_id);
  private:
  const std::string& _internal_muter_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_muter_id(const std::string& value);
  std::string* _internal_mutable_muter_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnmuteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr muter_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UnmuteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.UnmuteUserResponse) */ {
 public:
  inline UnmuteUserResponse() : UnmuteUserResponse(nullptr) {}
  ~UnmuteUserResponse() override;
  explicit PROTOBUF_CONSTEXPR UnmuteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnmuteUserResponse(const UnmuteUserResponse& from);
  UnmuteUserResponse(UnmuteUserResponse&& from) noexcept
    : UnmuteUserResponse() {
    *this = ::std::move(from);
  }

  inline UnmuteUserResponse& operator=(const UnmuteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnmuteUserResponse& operator=(UnmuteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnmuteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnmuteUserResponse* internal_default_instance() {
    return reinterpret_cast<const UnmuteUserResponse*>(
               &_UnmuteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UnmuteUserResponse& a, UnmuteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnmuteUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnmuteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnmuteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnmuteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnmuteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnmuteUserResponse& from) {
    UnmuteUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnmuteUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.UnmuteUserResponse";
  }
  protected:
  explicit UnmuteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kWasMutedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool was_muted = 3;
  void clear_was_muted();
  bool was_muted() const;
  void set_was_muted(bool value);
  private:
  bool _internal_was_muted() const;
  void _internal_set_was_muted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.UnmuteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    bool was_muted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRelationshipRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRelationshipRequest) */ {
 public:
  inline GetRelationshipRequest() : GetRelationshipRequest(nullptr) {}
  ~GetRelationshipRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRelationshipRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRelationshipRequest(const GetRelationshipRequest& from);
  GetRelationshipRequest(GetRelationshipRequest&& from) noexcept
    : GetRelationshipRequest() {
    *this = ::std::move(from);
  }

  inline GetRelationshipRequest& operator=(const GetRelationshipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRelationshipRequest& operator=(GetRelationshipRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRelationshipRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRelationshipRequest* internal_default_instance() {
    return reinterpret_cast<const GetRelationshipRequest*>(
               &_GetRelationshipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetRelationshipRequest& a, GetRelationshipRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRelationshipRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRelationshipRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRelationshipRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRelationshipRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRelationshipRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRelationshipRequest& from) {
    GetRelationshipRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRelationshipRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRelationshipRequest";
  }
  protected:
  explicit GetRelationshipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUser1IdFieldNumber = 1,
    kUser2IdFieldNumber = 2,
  };
  // string user1_id = 1;
  void clear_user1_id();
  const std::string& user1_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user1_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user1_id();
  PROTOBUF_NODISCARD std::string* release_user1_id();
  void set_allocated_user1_id(std::string* user1_id);
  private:
  const std::string& _internal_user1_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user1_id(const std::string& value);
  std::string* _internal_mutable_user1_id();
  public:

  // string user2_id = 2;
  void clear_user2_id();
  const std::string& user2_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user2_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user2_id();
  PROTOBUF_NODISCARD std::string* release_user2_id();
  void set_allocated_user2_id(std::string* user2_id);
  private:
  const std::string& _internal_user2_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user2_id(const std::string& value);
  std::string* _internal_mutable_user2_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRelationshipRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user1_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user2_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRelationshipResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRelationshipResponse) */ {
 public:
  inline GetRelationshipResponse() : GetRelationshipResponse(nullptr) {}
  ~GetRelationshipResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRelationshipResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRelationshipResponse(const GetRelationshipResponse& from);
  GetRelationshipResponse(GetRelationshipResponse&& from) noexcept
    : GetRelationshipResponse() {
    *this = ::std::move(from);
  }

  inline GetRelationshipResponse& operator=(const GetRelationshipResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRelationshipResponse& operator=(GetRelationshipResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRelationshipResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRelationshipResponse* internal_default_instance() {
    return reinterpret_cast<const GetRelationshipResponse*>(
               &_GetRelationshipResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetRelationshipResponse& a, GetRelationshipResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRelationshipResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRelationshipResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRelationshipResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRelationshipResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRelationshipResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRelationshipResponse& from) {
    GetRelationshipResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRelationshipResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRelationshipResponse";
  }
  protected:
  explicit GetRelationshipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipFieldNumber = 1,
    kFoundFieldNumber = 2,
  };
  // .sonet.follow.v1.Relationship relationship = 1;
  bool has_relationship() const;
  private:
  bool _internal_has_relationship() const;
  public:
  void clear_relationship();
  const ::sonet::follow::v1::Relationship& relationship() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::Relationship* release_relationship();
  ::sonet::follow::v1::Relationship* mutable_relationship();
  void set_allocated_relationship(::sonet::follow::v1::Relationship* relationship);
  private:
  const ::sonet::follow::v1::Relationship& _internal_relationship() const;
  ::sonet::follow::v1::Relationship* _internal_mutable_relationship();
  public:
  void unsafe_arena_set_allocated_relationship(
      ::sonet::follow::v1::Relationship* relationship);
  ::sonet::follow::v1::Relationship* unsafe_arena_release_relationship();

  // bool found = 2;
  void clear_found();
  bool found() const;
  void set_found(bool value);
  private:
  bool _internal_found() const;
  void _internal_set_found(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRelationshipResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::sonet::follow::v1::Relationship* relationship_;
    bool found_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckRelationshipRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.CheckRelationshipRequest) */ {
 public:
  inline CheckRelationshipRequest() : CheckRelationshipRequest(nullptr) {}
  ~CheckRelationshipRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckRelationshipRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRelationshipRequest(const CheckRelationshipRequest& from);
  CheckRelationshipRequest(CheckRelationshipRequest&& from) noexcept
    : CheckRelationshipRequest() {
    *this = ::std::move(from);
  }

  inline CheckRelationshipRequest& operator=(const CheckRelationshipRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRelationshipRequest& operator=(CheckRelationshipRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRelationshipRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRelationshipRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRelationshipRequest*>(
               &_CheckRelationshipRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CheckRelationshipRequest& a, CheckRelationshipRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRelationshipRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRelationshipRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRelationshipRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRelationshipRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRelationshipRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRelationshipRequest& from) {
    CheckRelationshipRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRelationshipRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.CheckRelationshipRequest";
  }
  protected:
  explicit CheckRelationshipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowerIdFieldNumber = 1,
    kFollowingIdFieldNumber = 2,
    kRelationshipTypeFieldNumber = 3,
  };
  // string follower_id = 1;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // string following_id = 2;
  void clear_following_id();
  const std::string& following_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_following_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_following_id();
  PROTOBUF_NODISCARD std::string* release_following_id();
  void set_allocated_following_id(std::string* following_id);
  private:
  const std::string& _internal_following_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_following_id(const std::string& value);
  std::string* _internal_mutable_following_id();
  public:

  // string relationship_type = 3;
  void clear_relationship_type();
  const std::string& relationship_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relationship_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relationship_type();
  PROTOBUF_NODISCARD std::string* release_relationship_type();
  void set_allocated_relationship_type(std::string* relationship_type);
  private:
  const std::string& _internal_relationship_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relationship_type(const std::string& value);
  std::string* _internal_mutable_relationship_type();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.CheckRelationshipRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr following_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relationship_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckRelationshipResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.CheckRelationshipResponse) */ {
 public:
  inline CheckRelationshipResponse() : CheckRelationshipResponse(nullptr) {}
  ~CheckRelationshipResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckRelationshipResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRelationshipResponse(const CheckRelationshipResponse& from);
  CheckRelationshipResponse(CheckRelationshipResponse&& from) noexcept
    : CheckRelationshipResponse() {
    *this = ::std::move(from);
  }

  inline CheckRelationshipResponse& operator=(const CheckRelationshipResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRelationshipResponse& operator=(CheckRelationshipResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRelationshipResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRelationshipResponse* internal_default_instance() {
    return reinterpret_cast<const CheckRelationshipResponse*>(
               &_CheckRelationshipResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CheckRelationshipResponse& a, CheckRelationshipResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRelationshipResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRelationshipResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRelationshipResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRelationshipResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRelationshipResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRelationshipResponse& from) {
    CheckRelationshipResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRelationshipResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.CheckRelationshipResponse";
  }
  protected:
  explicit CheckRelationshipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinceFieldNumber = 2,
    kExistsFieldNumber = 1,
  };
  // .google.protobuf.Timestamp since = 2;
  bool has_since() const;
  private:
  bool _internal_has_since() const;
  public:
  void clear_since();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& since() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_since();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_since();
  void set_allocated_since(::PROTOBUF_NAMESPACE_ID::Timestamp* since);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_since() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_since();
  public:
  void unsafe_arena_set_allocated_since(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* since);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_since();

  // bool exists = 1;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.CheckRelationshipResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* since_;
    bool exists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBulkRelationshipsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetBulkRelationshipsRequest) */ {
 public:
  inline GetBulkRelationshipsRequest() : GetBulkRelationshipsRequest(nullptr) {}
  ~GetBulkRelationshipsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBulkRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBulkRelationshipsRequest(const GetBulkRelationshipsRequest& from);
  GetBulkRelationshipsRequest(GetBulkRelationshipsRequest&& from) noexcept
    : GetBulkRelationshipsRequest() {
    *this = ::std::move(from);
  }

  inline GetBulkRelationshipsRequest& operator=(const GetBulkRelationshipsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkRelationshipsRequest& operator=(GetBulkRelationshipsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBulkRelationshipsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBulkRelationshipsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBulkRelationshipsRequest*>(
               &_GetBulkRelationshipsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetBulkRelationshipsRequest& a, GetBulkRelationshipsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkRelationshipsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkRelationshipsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBulkRelationshipsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBulkRelationshipsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBulkRelationshipsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBulkRelationshipsRequest& from) {
    GetBulkRelationshipsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkRelationshipsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetBulkRelationshipsRequest";
  }
  protected:
  explicit GetBulkRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserIdsFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated string target_user_ids = 2;
  int target_user_ids_size() const;
  private:
  int _internal_target_user_ids_size() const;
  public:
  void clear_target_user_ids();
  const std::string& target_user_ids(int index) const;
  std::string* mutable_target_user_ids(int index);
  void set_target_user_ids(int index, const std::string& value);
  void set_target_user_ids(int index, std::string&& value);
  void set_target_user_ids(int index, const char* value);
  void set_target_user_ids(int index, const char* value, size_t size);
  std::string* add_target_user_ids();
  void add_target_user_ids(const std::string& value);
  void add_target_user_ids(std::string&& value);
  void add_target_user_ids(const char* value);
  void add_target_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_user_ids();
  private:
  const std::string& _internal_target_user_ids(int index) const;
  std::string* _internal_add_target_user_ids();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetBulkRelationshipsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, 
    std::string, ::sonet::follow::v1::Relationship,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, 
    std::string, ::sonet::follow::v1::Relationship,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse& other);
  static const GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse*>(&_GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.follow.v1.GetBulkRelationshipsResponse.RelationshipsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};

// -------------------------------------------------------------------

class GetBulkRelationshipsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetBulkRelationshipsResponse) */ {
 public:
  inline GetBulkRelationshipsResponse() : GetBulkRelationshipsResponse(nullptr) {}
  ~GetBulkRelationshipsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetBulkRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBulkRelationshipsResponse(const GetBulkRelationshipsResponse& from);
  GetBulkRelationshipsResponse(GetBulkRelationshipsResponse&& from) noexcept
    : GetBulkRelationshipsResponse() {
    *this = ::std::move(from);
  }

  inline GetBulkRelationshipsResponse& operator=(const GetBulkRelationshipsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBulkRelationshipsResponse& operator=(GetBulkRelationshipsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBulkRelationshipsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBulkRelationshipsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBulkRelationshipsResponse*>(
               &_GetBulkRelationshipsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetBulkRelationshipsResponse& a, GetBulkRelationshipsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBulkRelationshipsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBulkRelationshipsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBulkRelationshipsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBulkRelationshipsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBulkRelationshipsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBulkRelationshipsResponse& from) {
    GetBulkRelationshipsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBulkRelationshipsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetBulkRelationshipsResponse";
  }
  protected:
  explicit GetBulkRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipsFieldNumber = 1,
    kNotFoundFieldNumber = 2,
  };
  // map<string, .sonet.follow.v1.Relationship> relationships = 1;
  int relationships_size() const;
  private:
  int _internal_relationships_size() const;
  public:
  void clear_relationships();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >&
      _internal_relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >*
      _internal_mutable_relationships();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >&
      relationships() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >*
      mutable_relationships();

  // repeated string not_found = 2;
  int not_found_size() const;
  private:
  int _internal_not_found_size() const;
  public:
  void clear_not_found();
  const std::string& not_found(int index) const;
  std::string* mutable_not_found(int index);
  void set_not_found(int index, const std::string& value);
  void set_not_found(int index, std::string&& value);
  void set_not_found(int index, const char* value);
  void set_not_found(int index, const char* value, size_t size);
  std::string* add_not_found();
  void add_not_found(const std::string& value);
  void add_not_found(std::string&& value);
  void add_not_found(const char* value);
  void add_not_found(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_found() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_found();
  private:
  const std::string& _internal_not_found(int index) const;
  std::string* _internal_add_not_found();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetBulkRelationshipsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse,
        std::string, ::sonet::follow::v1::Relationship,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> relationships_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_found_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkFollowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.BulkFollowRequest) */ {
 public:
  inline BulkFollowRequest() : BulkFollowRequest(nullptr) {}
  ~BulkFollowRequest() override;
  explicit PROTOBUF_CONSTEXPR BulkFollowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkFollowRequest(const BulkFollowRequest& from);
  BulkFollowRequest(BulkFollowRequest&& from) noexcept
    : BulkFollowRequest() {
    *this = ::std::move(from);
  }

  inline BulkFollowRequest& operator=(const BulkFollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkFollowRequest& operator=(BulkFollowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkFollowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkFollowRequest* internal_default_instance() {
    return reinterpret_cast<const BulkFollowRequest*>(
               &_BulkFollowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BulkFollowRequest& a, BulkFollowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkFollowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkFollowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkFollowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkFollowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkFollowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkFollowRequest& from) {
    BulkFollowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkFollowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.BulkFollowRequest";
  }
  protected:
  explicit BulkFollowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kFollowerIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string follower_id = 1;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // .sonet.follow.v1.FollowType type = 3;
  void clear_type();
  ::sonet::follow::v1::FollowType type() const;
  void set_type(::sonet::follow::v1::FollowType value);
  private:
  ::sonet::follow::v1::FollowType _internal_type() const;
  void _internal_set_type(::sonet::follow::v1::FollowType value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.BulkFollowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BulkFollowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.BulkFollowResponse) */ {
 public:
  inline BulkFollowResponse() : BulkFollowResponse(nullptr) {}
  ~BulkFollowResponse() override;
  explicit PROTOBUF_CONSTEXPR BulkFollowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BulkFollowResponse(const BulkFollowResponse& from);
  BulkFollowResponse(BulkFollowResponse&& from) noexcept
    : BulkFollowResponse() {
    *this = ::std::move(from);
  }

  inline BulkFollowResponse& operator=(const BulkFollowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BulkFollowResponse& operator=(BulkFollowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BulkFollowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BulkFollowResponse* internal_default_instance() {
    return reinterpret_cast<const BulkFollowResponse*>(
               &_BulkFollowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BulkFollowResponse& a, BulkFollowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BulkFollowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BulkFollowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BulkFollowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BulkFollowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BulkFollowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BulkFollowResponse& from) {
    BulkFollowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulkFollowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.BulkFollowResponse";
  }
  protected:
  explicit BulkFollowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessfulFieldNumber = 1,
    kFailedFieldNumber = 2,
    kAlreadyFollowingFieldNumber = 3,
    kBlockedFieldNumber = 4,
    kPendingFieldNumber = 5,
    kTotalRequestedFieldNumber = 6,
    kTotalSuccessfulFieldNumber = 7,
  };
  // repeated string successful = 1;
  int successful_size() const;
  private:
  int _internal_successful_size() const;
  public:
  void clear_successful();
  const std::string& successful(int index) const;
  std::string* mutable_successful(int index);
  void set_successful(int index, const std::string& value);
  void set_successful(int index, std::string&& value);
  void set_successful(int index, const char* value);
  void set_successful(int index, const char* value, size_t size);
  std::string* add_successful();
  void add_successful(const std::string& value);
  void add_successful(std::string&& value);
  void add_successful(const char* value);
  void add_successful(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& successful() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_successful();
  private:
  const std::string& _internal_successful(int index) const;
  std::string* _internal_add_successful();
  public:

  // repeated string failed = 2;
  int failed_size() const;
  private:
  int _internal_failed_size() const;
  public:
  void clear_failed();
  const std::string& failed(int index) const;
  std::string* mutable_failed(int index);
  void set_failed(int index, const std::string& value);
  void set_failed(int index, std::string&& value);
  void set_failed(int index, const char* value);
  void set_failed(int index, const char* value, size_t size);
  std::string* add_failed();
  void add_failed(const std::string& value);
  void add_failed(std::string&& value);
  void add_failed(const char* value);
  void add_failed(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& failed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_failed();
  private:
  const std::string& _internal_failed(int index) const;
  std::string* _internal_add_failed();
  public:

  // repeated string already_following = 3;
  int already_following_size() const;
  private:
  int _internal_already_following_size() const;
  public:
  void clear_already_following();
  const std::string& already_following(int index) const;
  std::string* mutable_already_following(int index);
  void set_already_following(int index, const std::string& value);
  void set_already_following(int index, std::string&& value);
  void set_already_following(int index, const char* value);
  void set_already_following(int index, const char* value, size_t size);
  std::string* add_already_following();
  void add_already_following(const std::string& value);
  void add_already_following(std::string&& value);
  void add_already_following(const char* value);
  void add_already_following(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& already_following() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_already_following();
  private:
  const std::string& _internal_already_following(int index) const;
  std::string* _internal_add_already_following();
  public:

  // repeated string blocked = 4;
  int blocked_size() const;
  private:
  int _internal_blocked_size() const;
  public:
  void clear_blocked();
  const std::string& blocked(int index) const;
  std::string* mutable_blocked(int index);
  void set_blocked(int index, const std::string& value);
  void set_blocked(int index, std::string&& value);
  void set_blocked(int index, const char* value);
  void set_blocked(int index, const char* value, size_t size);
  std::string* add_blocked();
  void add_blocked(const std::string& value);
  void add_blocked(std::string&& value);
  void add_blocked(const char* value);
  void add_blocked(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blocked() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blocked();
  private:
  const std::string& _internal_blocked(int index) const;
  std::string* _internal_add_blocked();
  public:

  // repeated string pending = 5;
  int pending_size() const;
  private:
  int _internal_pending_size() const;
  public:
  void clear_pending();
  const std::string& pending(int index) const;
  std::string* mutable_pending(int index);
  void set_pending(int index, const std::string& value);
  void set_pending(int index, std::string&& value);
  void set_pending(int index, const char* value);
  void set_pending(int index, const char* value, size_t size);
  std::string* add_pending();
  void add_pending(const std::string& value);
  void add_pending(std::string&& value);
  void add_pending(const char* value);
  void add_pending(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pending() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pending();
  private:
  const std::string& _internal_pending(int index) const;
  std::string* _internal_add_pending();
  public:

  // int32 total_requested = 6;
  void clear_total_requested();
  int32_t total_requested() const;
  void set_total_requested(int32_t value);
  private:
  int32_t _internal_total_requested() const;
  void _internal_set_total_requested(int32_t value);
  public:

  // int32 total_successful = 7;
  void clear_total_successful();
  int32_t total_successful() const;
  void set_total_successful(int32_t value);
  private:
  int32_t _internal_total_successful() const;
  void _internal_set_total_successful(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.BulkFollowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> successful_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> failed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> already_following_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blocked_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pending_;
    int32_t total_requested_;
    int32_t total_successful_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowersRequest) */ {
 public:
  inline GetFollowersRequest() : GetFollowersRequest(nullptr) {}
  ~GetFollowersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFollowersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowersRequest(const GetFollowersRequest& from);
  GetFollowersRequest(GetFollowersRequest&& from) noexcept
    : GetFollowersRequest() {
    *this = ::std::move(from);
  }

  inline GetFollowersRequest& operator=(const GetFollowersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowersRequest& operator=(GetFollowersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowersRequest* internal_default_instance() {
    return reinterpret_cast<const GetFollowersRequest*>(
               &_GetFollowersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetFollowersRequest& a, GetFollowersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowersRequest& from) {
    GetFollowersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowersRequest";
  }
  protected:
  explicit GetFollowersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
    kIncludeAnalyticsFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 3;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // bool include_analytics = 5;
  void clear_include_analytics();
  bool include_analytics() const;
  void set_include_analytics(bool value);
  private:
  bool _internal_include_analytics() const;
  void _internal_set_include_analytics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    bool include_analytics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowersResponse) */ {
 public:
  inline GetFollowersResponse() : GetFollowersResponse(nullptr) {}
  ~GetFollowersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFollowersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowersResponse(const GetFollowersResponse& from);
  GetFollowersResponse(GetFollowersResponse&& from) noexcept
    : GetFollowersResponse() {
    *this = ::std::move(from);
  }

  inline GetFollowersResponse& operator=(const GetFollowersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowersResponse& operator=(GetFollowersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowersResponse* internal_default_instance() {
    return reinterpret_cast<const GetFollowersResponse*>(
               &_GetFollowersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetFollowersResponse& a, GetFollowersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowersResponse& from) {
    GetFollowersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowersResponse";
  }
  protected:
  explicit GetFollowersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowersFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kTotalCountFieldNumber = 3,
  };
  // repeated .sonet.follow.v1.UserInfo followers = 1;
  int followers_size() const;
  private:
  int _internal_followers_size() const;
  public:
  void clear_followers();
  ::sonet::follow::v1::UserInfo* mutable_followers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
      mutable_followers();
  private:
  const ::sonet::follow::v1::UserInfo& _internal_followers(int index) const;
  ::sonet::follow::v1::UserInfo* _internal_add_followers();
  public:
  const ::sonet::follow::v1::UserInfo& followers(int index) const;
  ::sonet::follow::v1::UserInfo* add_followers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
      followers() const;

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::follow::v1::PaginationInfo& pagination() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::PaginationInfo* release_pagination();
  ::sonet::follow::v1::PaginationInfo* mutable_pagination();
  void set_allocated_pagination(::sonet::follow::v1::PaginationInfo* pagination);
  private:
  const ::sonet::follow::v1::PaginationInfo& _internal_pagination() const;
  ::sonet::follow::v1::PaginationInfo* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::follow::v1::PaginationInfo* pagination);
  ::sonet::follow::v1::PaginationInfo* unsafe_arena_release_pagination();

  // int32 total_count = 3;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo > followers_;
    ::sonet::follow::v1::PaginationInfo* pagination_;
    int32_t total_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowingRequest) */ {
 public:
  inline GetFollowingRequest() : GetFollowingRequest(nullptr) {}
  ~GetFollowingRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFollowingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowingRequest(const GetFollowingRequest& from);
  GetFollowingRequest(GetFollowingRequest&& from) noexcept
    : GetFollowingRequest() {
    *this = ::std::move(from);
  }

  inline GetFollowingRequest& operator=(const GetFollowingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowingRequest& operator=(GetFollowingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowingRequest* internal_default_instance() {
    return reinterpret_cast<const GetFollowingRequest*>(
               &_GetFollowingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetFollowingRequest& a, GetFollowingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowingRequest& from) {
    GetFollowingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowingRequest";
  }
  protected:
  explicit GetFollowingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kCursorFieldNumber = 4,
    kLimitFieldNumber = 3,
    kIncludeAnalyticsFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cursor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cursor();
  PROTOBUF_NODISCARD std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int32 limit = 3;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // bool include_analytics = 5;
  void clear_include_analytics();
  bool include_analytics() const;
  void set_include_analytics(bool value);
  private:
  bool _internal_include_analytics() const;
  void _internal_set_include_analytics(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
    int32_t limit_;
    bool include_analytics_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowingResponse) */ {
 public:
  inline GetFollowingResponse() : GetFollowingResponse(nullptr) {}
  ~GetFollowingResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFollowingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowingResponse(const GetFollowingResponse& from);
  GetFollowingResponse(GetFollowingResponse&& from) noexcept
    : GetFollowingResponse() {
    *this = ::std::move(from);
  }

  inline GetFollowingResponse& operator=(const GetFollowingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowingResponse& operator=(GetFollowingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowingResponse* internal_default_instance() {
    return reinterpret_cast<const GetFollowingResponse*>(
               &_GetFollowingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetFollowingResponse& a, GetFollowingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowingResponse& from) {
    GetFollowingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowingResponse";
  }
  protected:
  explicit GetFollowingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowingFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kTotalCountFieldNumber = 3,
  };
  // repeated .sonet.follow.v1.UserInfo following = 1;
  int following_size() const;
  private:
  int _internal_following_size() const;
  public:
  void clear_following();
  ::sonet::follow::v1::UserInfo* mutable_following(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
      mutable_following();
  private:
  const ::sonet::follow::v1::UserInfo& _internal_following(int index) const;
  ::sonet::follow::v1::UserInfo* _internal_add_following();
  public:
  const ::sonet::follow::v1::UserInfo& following(int index) const;
  ::sonet::follow::v1::UserInfo* add_following();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
      following() const;

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  bool has_pagination() const;
  private:
  bool _internal_has_pagination() const;
  public:
  void clear_pagination();
  const ::sonet::follow::v1::PaginationInfo& pagination() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::PaginationInfo* release_pagination();
  ::sonet::follow::v1::PaginationInfo* mutable_pagination();
  void set_allocated_pagination(::sonet::follow::v1::PaginationInfo* pagination);
  private:
  const ::sonet::follow::v1::PaginationInfo& _internal_pagination() const;
  ::sonet::follow::v1::PaginationInfo* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::sonet::follow::v1::PaginationInfo* pagination);
  ::sonet::follow::v1::PaginationInfo* unsafe_arena_release_pagination();

  // int32 total_count = 3;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo > following_;
    ::sonet::follow::v1::PaginationInfo* pagination_;
    int32_t total_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMutualFriendsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetMutualFriendsRequest) */ {
 public:
  inline GetMutualFriendsRequest() : GetMutualFriendsRequest(nullptr) {}
  ~GetMutualFriendsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMutualFriendsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMutualFriendsRequest(const GetMutualFriendsRequest& from);
  GetMutualFriendsRequest(GetMutualFriendsRequest&& from) noexcept
    : GetMutualFriendsRequest() {
    *this = ::std::move(from);
  }

  inline GetMutualFriendsRequest& operator=(const GetMutualFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMutualFriendsRequest& operator=(GetMutualFriendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMutualFriendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMutualFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const GetMutualFriendsRequest*>(
               &_GetMutualFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetMutualFriendsRequest& a, GetMutualFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMutualFriendsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMutualFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMutualFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMutualFriendsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMutualFriendsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMutualFriendsRequest& from) {
    GetMutualFriendsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMutualFriendsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetMutualFriendsRequest";
  }
  protected:
  explicit GetMutualFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUser1IdFieldNumber = 1,
    kUser2IdFieldNumber = 2,
    kRequestingUserIdFieldNumber = 3,
    kLimitFieldNumber = 4,
  };
  // string user1_id = 1;
  void clear_user1_id();
  const std::string& user1_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user1_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user1_id();
  PROTOBUF_NODISCARD std::string* release_user1_id();
  void set_allocated_user1_id(std::string* user1_id);
  private:
  const std::string& _internal_user1_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user1_id(const std::string& value);
  std::string* _internal_mutable_user1_id();
  public:

  // string user2_id = 2;
  void clear_user2_id();
  const std::string& user2_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user2_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user2_id();
  PROTOBUF_NODISCARD std::string* release_user2_id();
  void set_allocated_user2_id(std::string* user2_id);
  private:
  const std::string& _internal_user2_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user2_id(const std::string& value);
  std::string* _internal_mutable_user2_id();
  public:

  // string requesting_user_id = 3;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // int32 limit = 4;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetMutualFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user1_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user2_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMutualFriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetMutualFriendsResponse) */ {
 public:
  inline GetMutualFriendsResponse() : GetMutualFriendsResponse(nullptr) {}
  ~GetMutualFriendsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMutualFriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMutualFriendsResponse(const GetMutualFriendsResponse& from);
  GetMutualFriendsResponse(GetMutualFriendsResponse&& from) noexcept
    : GetMutualFriendsResponse() {
    *this = ::std::move(from);
  }

  inline GetMutualFriendsResponse& operator=(const GetMutualFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMutualFriendsResponse& operator=(GetMutualFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMutualFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMutualFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const GetMutualFriendsResponse*>(
               &_GetMutualFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetMutualFriendsResponse& a, GetMutualFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMutualFriendsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMutualFriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMutualFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMutualFriendsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMutualFriendsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMutualFriendsResponse& from) {
    GetMutualFriendsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMutualFriendsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetMutualFriendsResponse";
  }
  protected:
  explicit GetMutualFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMutualFriendsFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .sonet.follow.v1.UserInfo mutual_friends = 1;
  int mutual_friends_size() const;
  private:
  int _internal_mutual_friends_size() const;
  public:
  void clear_mutual_friends();
  ::sonet::follow::v1::UserInfo* mutable_mutual_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
      mutable_mutual_friends();
  private:
  const ::sonet::follow::v1::UserInfo& _internal_mutual_friends(int index) const;
  ::sonet::follow::v1::UserInfo* _internal_add_mutual_friends();
  public:
  const ::sonet::follow::v1::UserInfo& mutual_friends(int index) const;
  ::sonet::follow::v1::UserInfo* add_mutual_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
      mutual_friends() const;

  // int32 total_count = 2;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetMutualFriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo > mutual_friends_;
    int32_t total_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRecommendationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRecommendationsRequest) */ {
 public:
  inline GetRecommendationsRequest() : GetRecommendationsRequest(nullptr) {}
  ~GetRecommendationsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRecommendationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecommendationsRequest(const GetRecommendationsRequest& from);
  GetRecommendationsRequest(GetRecommendationsRequest&& from) noexcept
    : GetRecommendationsRequest() {
    *this = ::std::move(from);
  }

  inline GetRecommendationsRequest& operator=(const GetRecommendationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecommendationsRequest& operator=(GetRecommendationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecommendationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecommendationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecommendationsRequest*>(
               &_GetRecommendationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetRecommendationsRequest& a, GetRecommendationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecommendationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecommendationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecommendationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecommendationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecommendationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecommendationsRequest& from) {
    GetRecommendationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecommendationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRecommendationsRequest";
  }
  protected:
  explicit GetRecommendationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludeUserIdsFieldNumber = 4,
    kInterestsFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // repeated string exclude_user_ids = 4;
  int exclude_user_ids_size() const;
  private:
  int _internal_exclude_user_ids_size() const;
  public:
  void clear_exclude_user_ids();
  const std::string& exclude_user_ids(int index) const;
  std::string* mutable_exclude_user_ids(int index);
  void set_exclude_user_ids(int index, const std::string& value);
  void set_exclude_user_ids(int index, std::string&& value);
  void set_exclude_user_ids(int index, const char* value);
  void set_exclude_user_ids(int index, const char* value, size_t size);
  std::string* add_exclude_user_ids();
  void add_exclude_user_ids(const std::string& value);
  void add_exclude_user_ids(std::string&& value);
  void add_exclude_user_ids(const char* value);
  void add_exclude_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_user_ids();
  private:
  const std::string& _internal_exclude_user_ids(int index) const;
  std::string* _internal_add_exclude_user_ids();
  public:

  // repeated string interests = 5;
  int interests_size() const;
  private:
  int _internal_interests_size() const;
  public:
  void clear_interests();
  const std::string& interests(int index) const;
  std::string* mutable_interests(int index);
  void set_interests(int index, const std::string& value);
  void set_interests(int index, std::string&& value);
  void set_interests(int index, const char* value);
  void set_interests(int index, const char* value, size_t size);
  std::string* add_interests();
  void add_interests(const std::string& value);
  void add_interests(std::string&& value);
  void add_interests(const char* value);
  void add_interests(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& interests() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_interests();
  private:
  const std::string& _internal_interests(int index) const;
  std::string* _internal_add_interests();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 2;
  void clear_algorithm();
  ::sonet::follow::v1::RecommendationAlgorithm algorithm() const;
  void set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value);
  private:
  ::sonet::follow::v1::RecommendationAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value);
  public:

  // int32 limit = 3;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRecommendationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_user_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> interests_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int algorithm_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRecommendationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRecommendationsResponse) */ {
 public:
  inline GetRecommendationsResponse() : GetRecommendationsResponse(nullptr) {}
  ~GetRecommendationsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRecommendationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecommendationsResponse(const GetRecommendationsResponse& from);
  GetRecommendationsResponse(GetRecommendationsResponse&& from) noexcept
    : GetRecommendationsResponse() {
    *this = ::std::move(from);
  }

  inline GetRecommendationsResponse& operator=(const GetRecommendationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecommendationsResponse& operator=(GetRecommendationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecommendationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecommendationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecommendationsResponse*>(
               &_GetRecommendationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetRecommendationsResponse& a, GetRecommendationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecommendationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecommendationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecommendationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecommendationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecommendationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecommendationsResponse& from) {
    GetRecommendationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecommendationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRecommendationsResponse";
  }
  protected:
  explicit GetRecommendationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecommendationsFieldNumber = 1,
    kAlgorithmUsedFieldNumber = 2,
    kGeneratedAtFieldNumber = 3,
  };
  // repeated .sonet.follow.v1.Recommendation recommendations = 1;
  int recommendations_size() const;
  private:
  int _internal_recommendations_size() const;
  public:
  void clear_recommendations();
  ::sonet::follow::v1::Recommendation* mutable_recommendations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >*
      mutable_recommendations();
  private:
  const ::sonet::follow::v1::Recommendation& _internal_recommendations(int index) const;
  ::sonet::follow::v1::Recommendation* _internal_add_recommendations();
  public:
  const ::sonet::follow::v1::Recommendation& recommendations(int index) const;
  ::sonet::follow::v1::Recommendation* add_recommendations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >&
      recommendations() const;

  // string algorithm_used = 2;
  void clear_algorithm_used();
  const std::string& algorithm_used() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithm_used(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithm_used();
  PROTOBUF_NODISCARD std::string* release_algorithm_used();
  void set_allocated_algorithm_used(std::string* algorithm_used);
  private:
  const std::string& _internal_algorithm_used() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithm_used(const std::string& value);
  std::string* _internal_mutable_algorithm_used();
  public:

  // .google.protobuf.Timestamp generated_at = 3;
  bool has_generated_at() const;
  private:
  bool _internal_has_generated_at() const;
  public:
  void clear_generated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_generated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_generated_at();
  void set_allocated_generated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_generated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_generated_at();
  public:
  void unsafe_arena_set_allocated_generated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_generated_at();

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRecommendationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation > recommendations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_used_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTrendingUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetTrendingUsersRequest) */ {
 public:
  inline GetTrendingUsersRequest() : GetTrendingUsersRequest(nullptr) {}
  ~GetTrendingUsersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTrendingUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrendingUsersRequest(const GetTrendingUsersRequest& from);
  GetTrendingUsersRequest(GetTrendingUsersRequest&& from) noexcept
    : GetTrendingUsersRequest() {
    *this = ::std::move(from);
  }

  inline GetTrendingUsersRequest& operator=(const GetTrendingUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrendingUsersRequest& operator=(GetTrendingUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrendingUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrendingUsersRequest* internal_default_instance() {
    return reinterpret_cast<const GetTrendingUsersRequest*>(
               &_GetTrendingUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetTrendingUsersRequest& a, GetTrendingUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrendingUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrendingUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrendingUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrendingUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrendingUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrendingUsersRequest& from) {
    GetTrendingUsersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrendingUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetTrendingUsersRequest";
  }
  protected:
  explicit GetTrendingUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestingUserIdFieldNumber = 1,
    kCategoryFieldNumber = 3,
    kLimitFieldNumber = 2,
    kTimeWindowHoursFieldNumber = 4,
  };
  // string requesting_user_id = 1;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // string category = 3;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 time_window_hours = 4;
  void clear_time_window_hours();
  int32_t time_window_hours() const;
  void set_time_window_hours(int32_t value);
  private:
  int32_t _internal_time_window_hours() const;
  void _internal_set_time_window_hours(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetTrendingUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
    int32_t limit_;
    int32_t time_window_hours_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTrendingUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetTrendingUsersResponse) */ {
 public:
  inline GetTrendingUsersResponse() : GetTrendingUsersResponse(nullptr) {}
  ~GetTrendingUsersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTrendingUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrendingUsersResponse(const GetTrendingUsersResponse& from);
  GetTrendingUsersResponse(GetTrendingUsersResponse&& from) noexcept
    : GetTrendingUsersResponse() {
    *this = ::std::move(from);
  }

  inline GetTrendingUsersResponse& operator=(const GetTrendingUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrendingUsersResponse& operator=(GetTrendingUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrendingUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrendingUsersResponse* internal_default_instance() {
    return reinterpret_cast<const GetTrendingUsersResponse*>(
               &_GetTrendingUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetTrendingUsersResponse& a, GetTrendingUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrendingUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrendingUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrendingUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrendingUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrendingUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrendingUsersResponse& from) {
    GetTrendingUsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrendingUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetTrendingUsersResponse";
  }
  protected:
  explicit GetTrendingUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrendingUsersFieldNumber = 1,
    kTimePeriodFieldNumber = 2,
    kGeneratedAtFieldNumber = 3,
  };
  // repeated .sonet.follow.v1.Recommendation trending_users = 1;
  int trending_users_size() const;
  private:
  int _internal_trending_users_size() const;
  public:
  void clear_trending_users();
  ::sonet::follow::v1::Recommendation* mutable_trending_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >*
      mutable_trending_users();
  private:
  const ::sonet::follow::v1::Recommendation& _internal_trending_users(int index) const;
  ::sonet::follow::v1::Recommendation* _internal_add_trending_users();
  public:
  const ::sonet::follow::v1::Recommendation& trending_users(int index) const;
  ::sonet::follow::v1::Recommendation* add_trending_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >&
      trending_users() const;

  // string time_period = 2;
  void clear_time_period();
  const std::string& time_period() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_period(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_period();
  PROTOBUF_NODISCARD std::string* release_time_period();
  void set_allocated_time_period(std::string* time_period);
  private:
  const std::string& _internal_time_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_period(const std::string& value);
  std::string* _internal_mutable_time_period();
  public:

  // .google.protobuf.Timestamp generated_at = 3;
  bool has_generated_at() const;
  private:
  bool _internal_has_generated_at() const;
  public:
  void clear_generated_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_generated_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_generated_at();
  void set_allocated_generated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_generated_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_generated_at();
  public:
  void unsafe_arena_set_allocated_generated_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_generated_at();

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetTrendingUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation > trending_users_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_period_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowerAnalyticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowerAnalyticsRequest) */ {
 public:
  inline GetFollowerAnalyticsRequest() : GetFollowerAnalyticsRequest(nullptr) {}
  ~GetFollowerAnalyticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFollowerAnalyticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowerAnalyticsRequest(const GetFollowerAnalyticsRequest& from);
  GetFollowerAnalyticsRequest(GetFollowerAnalyticsRequest&& from) noexcept
    : GetFollowerAnalyticsRequest() {
    *this = ::std::move(from);
  }

  inline GetFollowerAnalyticsRequest& operator=(const GetFollowerAnalyticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowerAnalyticsRequest& operator=(GetFollowerAnalyticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowerAnalyticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowerAnalyticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFollowerAnalyticsRequest*>(
               &_GetFollowerAnalyticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetFollowerAnalyticsRequest& a, GetFollowerAnalyticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowerAnalyticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowerAnalyticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowerAnalyticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowerAnalyticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowerAnalyticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowerAnalyticsRequest& from) {
    GetFollowerAnalyticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowerAnalyticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowerAnalyticsRequest";
  }
  protected:
  explicit GetFollowerAnalyticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
    kTimeRangeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // string time_range = 3;
  void clear_time_range();
  const std::string& time_range() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_range(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_range();
  PROTOBUF_NODISCARD std::string* release_time_range();
  void set_allocated_time_range(std::string* time_range);
  private:
  const std::string& _internal_time_range() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_range(const std::string& value);
  std::string* _internal_mutable_time_range();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowerAnalyticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_range_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse& other);
  static const GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse*>(&_GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.follow.v1.GetFollowerAnalyticsResponse.FollowersByCountryEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};

// -------------------------------------------------------------------

class GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse& other);
  static const GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse*>(&_GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sonet.follow.v1.GetFollowerAnalyticsResponse.DailyGrowthEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};

// -------------------------------------------------------------------

class GetFollowerAnalyticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetFollowerAnalyticsResponse) */ {
 public:
  inline GetFollowerAnalyticsResponse() : GetFollowerAnalyticsResponse(nullptr) {}
  ~GetFollowerAnalyticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFollowerAnalyticsResponse(const GetFollowerAnalyticsResponse& from);
  GetFollowerAnalyticsResponse(GetFollowerAnalyticsResponse&& from) noexcept
    : GetFollowerAnalyticsResponse() {
    *this = ::std::move(from);
  }

  inline GetFollowerAnalyticsResponse& operator=(const GetFollowerAnalyticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFollowerAnalyticsResponse& operator=(GetFollowerAnalyticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFollowerAnalyticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFollowerAnalyticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFollowerAnalyticsResponse*>(
               &_GetFollowerAnalyticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetFollowerAnalyticsResponse& a, GetFollowerAnalyticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFollowerAnalyticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFollowerAnalyticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFollowerAnalyticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFollowerAnalyticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFollowerAnalyticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFollowerAnalyticsResponse& from) {
    GetFollowerAnalyticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFollowerAnalyticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetFollowerAnalyticsResponse";
  }
  protected:
  explicit GetFollowerAnalyticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFollowersByCountryFieldNumber = 11,
    kDailyGrowthFieldNumber = 12,
    kTotalFollowersFieldNumber = 1,
    kTotalFollowingFieldNumber = 2,
    kMutualFollowsFieldNumber = 3,
    kFollowersGainedTodayFieldNumber = 4,
    kFollowersLostTodayFieldNumber = 5,
    kFollowersGainedWeekFieldNumber = 6,
    kFollowersLostWeekFieldNumber = 7,
    kFollowersGainedMonthFieldNumber = 8,
    kAverageEngagementRateFieldNumber = 10,
    kFollowersLostMonthFieldNumber = 9,
  };
  // map<string, int32> followers_by_country = 11;
  int followers_by_country_size() const;
  private:
  int _internal_followers_by_country_size() const;
  public:
  void clear_followers_by_country();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_followers_by_country() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_followers_by_country();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      followers_by_country() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_followers_by_country();

  // map<string, int32> daily_growth = 12;
  int daily_growth_size() const;
  private:
  int _internal_daily_growth_size() const;
  public:
  void clear_daily_growth();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_daily_growth() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_daily_growth();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      daily_growth() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_daily_growth();

  // int32 total_followers = 1;
  void clear_total_followers();
  int32_t total_followers() const;
  void set_total_followers(int32_t value);
  private:
  int32_t _internal_total_followers() const;
  void _internal_set_total_followers(int32_t value);
  public:

  // int32 total_following = 2;
  void clear_total_following();
  int32_t total_following() const;
  void set_total_following(int32_t value);
  private:
  int32_t _internal_total_following() const;
  void _internal_set_total_following(int32_t value);
  public:

  // int32 mutual_follows = 3;
  void clear_mutual_follows();
  int32_t mutual_follows() const;
  void set_mutual_follows(int32_t value);
  private:
  int32_t _internal_mutual_follows() const;
  void _internal_set_mutual_follows(int32_t value);
  public:

  // int32 followers_gained_today = 4;
  void clear_followers_gained_today();
  int32_t followers_gained_today() const;
  void set_followers_gained_today(int32_t value);
  private:
  int32_t _internal_followers_gained_today() const;
  void _internal_set_followers_gained_today(int32_t value);
  public:

  // int32 followers_lost_today = 5;
  void clear_followers_lost_today();
  int32_t followers_lost_today() const;
  void set_followers_lost_today(int32_t value);
  private:
  int32_t _internal_followers_lost_today() const;
  void _internal_set_followers_lost_today(int32_t value);
  public:

  // int32 followers_gained_week = 6;
  void clear_followers_gained_week();
  int32_t followers_gained_week() const;
  void set_followers_gained_week(int32_t value);
  private:
  int32_t _internal_followers_gained_week() const;
  void _internal_set_followers_gained_week(int32_t value);
  public:

  // int32 followers_lost_week = 7;
  void clear_followers_lost_week();
  int32_t followers_lost_week() const;
  void set_followers_lost_week(int32_t value);
  private:
  int32_t _internal_followers_lost_week() const;
  void _internal_set_followers_lost_week(int32_t value);
  public:

  // int32 followers_gained_month = 8;
  void clear_followers_gained_month();
  int32_t followers_gained_month() const;
  void set_followers_gained_month(int32_t value);
  private:
  int32_t _internal_followers_gained_month() const;
  void _internal_set_followers_gained_month(int32_t value);
  public:

  // double average_engagement_rate = 10;
  void clear_average_engagement_rate();
  double average_engagement_rate() const;
  void set_average_engagement_rate(double value);
  private:
  double _internal_average_engagement_rate() const;
  void _internal_set_average_engagement_rate(double value);
  public:

  // int32 followers_lost_month = 9;
  void clear_followers_lost_month();
  int32_t followers_lost_month() const;
  void set_followers_lost_month(int32_t value);
  private:
  int32_t _internal_followers_lost_month() const;
  void _internal_set_followers_lost_month(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetFollowerAnalyticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> followers_by_country_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> daily_growth_;
    int32_t total_followers_;
    int32_t total_following_;
    int32_t mutual_follows_;
    int32_t followers_gained_today_;
    int32_t followers_lost_today_;
    int32_t followers_gained_week_;
    int32_t followers_lost_week_;
    int32_t followers_gained_month_;
    double average_engagement_rate_;
    int32_t followers_lost_month_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSocialMetricsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetSocialMetricsRequest) */ {
 public:
  inline GetSocialMetricsRequest() : GetSocialMetricsRequest(nullptr) {}
  ~GetSocialMetricsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSocialMetricsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSocialMetricsRequest(const GetSocialMetricsRequest& from);
  GetSocialMetricsRequest(GetSocialMetricsRequest&& from) noexcept
    : GetSocialMetricsRequest() {
    *this = ::std::move(from);
  }

  inline GetSocialMetricsRequest& operator=(const GetSocialMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSocialMetricsRequest& operator=(GetSocialMetricsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSocialMetricsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSocialMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSocialMetricsRequest*>(
               &_GetSocialMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetSocialMetricsRequest& a, GetSocialMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSocialMetricsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSocialMetricsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSocialMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSocialMetricsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSocialMetricsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSocialMetricsRequest& from) {
    GetSocialMetricsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSocialMetricsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetSocialMetricsRequest";
  }
  protected:
  explicit GetSocialMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetSocialMetricsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetSocialMetricsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetSocialMetricsResponse) */ {
 public:
  inline GetSocialMetricsResponse() : GetSocialMetricsResponse(nullptr) {}
  ~GetSocialMetricsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSocialMetricsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSocialMetricsResponse(const GetSocialMetricsResponse& from);
  GetSocialMetricsResponse(GetSocialMetricsResponse&& from) noexcept
    : GetSocialMetricsResponse() {
    *this = ::std::move(from);
  }

  inline GetSocialMetricsResponse& operator=(const GetSocialMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSocialMetricsResponse& operator=(GetSocialMetricsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSocialMetricsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSocialMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSocialMetricsResponse*>(
               &_GetSocialMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetSocialMetricsResponse& a, GetSocialMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSocialMetricsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSocialMetricsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSocialMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSocialMetricsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSocialMetricsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSocialMetricsResponse& from) {
    GetSocialMetricsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSocialMetricsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetSocialMetricsResponse";
  }
  protected:
  explicit GetSocialMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastUpdatedFieldNumber = 8,
    kFollowersCountFieldNumber = 1,
    kFollowingCountFieldNumber = 2,
    kFollowersFollowingRatioFieldNumber = 3,
    kAverageEngagementScoreFieldNumber = 4,
    kInfluenceScoreFieldNumber = 5,
    kNetworkReachFieldNumber = 7,
    kMutualConnectionsFieldNumber = 6,
  };
  // .google.protobuf.Timestamp last_updated = 8;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // int32 followers_count = 1;
  void clear_followers_count();
  int32_t followers_count() const;
  void set_followers_count(int32_t value);
  private:
  int32_t _internal_followers_count() const;
  void _internal_set_followers_count(int32_t value);
  public:

  // int32 following_count = 2;
  void clear_following_count();
  int32_t following_count() const;
  void set_following_count(int32_t value);
  private:
  int32_t _internal_following_count() const;
  void _internal_set_following_count(int32_t value);
  public:

  // double followers_following_ratio = 3;
  void clear_followers_following_ratio();
  double followers_following_ratio() const;
  void set_followers_following_ratio(double value);
  private:
  double _internal_followers_following_ratio() const;
  void _internal_set_followers_following_ratio(double value);
  public:

  // double average_engagement_score = 4;
  void clear_average_engagement_score();
  double average_engagement_score() const;
  void set_average_engagement_score(double value);
  private:
  double _internal_average_engagement_score() const;
  void _internal_set_average_engagement_score(double value);
  public:

  // double influence_score = 5;
  void clear_influence_score();
  double influence_score() const;
  void set_influence_score(double value);
  private:
  double _internal_influence_score() const;
  void _internal_set_influence_score(double value);
  public:

  // double network_reach = 7;
  void clear_network_reach();
  double network_reach() const;
  void set_network_reach(double value);
  private:
  double _internal_network_reach() const;
  void _internal_set_network_reach(double value);
  public:

  // int32 mutual_connections = 6;
  void clear_mutual_connections();
  int32_t mutual_connections() const;
  void set_mutual_connections(int32_t value);
  private:
  int32_t _internal_mutual_connections() const;
  void _internal_set_mutual_connections(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetSocialMetricsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
    int32_t followers_count_;
    int32_t following_count_;
    double followers_following_ratio_;
    double average_engagement_score_;
    double influence_score_;
    double network_reach_;
    int32_t mutual_connections_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLiveFollowerCountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetLiveFollowerCountRequest) */ {
 public:
  inline GetLiveFollowerCountRequest() : GetLiveFollowerCountRequest(nullptr) {}
  ~GetLiveFollowerCountRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLiveFollowerCountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLiveFollowerCountRequest(const GetLiveFollowerCountRequest& from);
  GetLiveFollowerCountRequest(GetLiveFollowerCountRequest&& from) noexcept
    : GetLiveFollowerCountRequest() {
    *this = ::std::move(from);
  }

  inline GetLiveFollowerCountRequest& operator=(const GetLiveFollowerCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiveFollowerCountRequest& operator=(GetLiveFollowerCountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLiveFollowerCountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLiveFollowerCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetLiveFollowerCountRequest*>(
               &_GetLiveFollowerCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetLiveFollowerCountRequest& a, GetLiveFollowerCountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiveFollowerCountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLiveFollowerCountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLiveFollowerCountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLiveFollowerCountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLiveFollowerCountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLiveFollowerCountRequest& from) {
    GetLiveFollowerCountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiveFollowerCountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetLiveFollowerCountRequest";
  }
  protected:
  explicit GetLiveFollowerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRequestingUserIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string requesting_user_id = 2;
  void clear_requesting_user_id();
  const std::string& requesting_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requesting_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requesting_user_id();
  PROTOBUF_NODISCARD std::string* release_requesting_user_id();
  void set_allocated_requesting_user_id(std::string* requesting_user_id);
  private:
  const std::string& _internal_requesting_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requesting_user_id(const std::string& value);
  std::string* _internal_mutable_requesting_user_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetLiveFollowerCountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesting_user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLiveFollowerCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetLiveFollowerCountResponse) */ {
 public:
  inline GetLiveFollowerCountResponse() : GetLiveFollowerCountResponse(nullptr) {}
  ~GetLiveFollowerCountResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLiveFollowerCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLiveFollowerCountResponse(const GetLiveFollowerCountResponse& from);
  GetLiveFollowerCountResponse(GetLiveFollowerCountResponse&& from) noexcept
    : GetLiveFollowerCountResponse() {
    *this = ::std::move(from);
  }

  inline GetLiveFollowerCountResponse& operator=(const GetLiveFollowerCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLiveFollowerCountResponse& operator=(GetLiveFollowerCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLiveFollowerCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLiveFollowerCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetLiveFollowerCountResponse*>(
               &_GetLiveFollowerCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetLiveFollowerCountResponse& a, GetLiveFollowerCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLiveFollowerCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLiveFollowerCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLiveFollowerCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLiveFollowerCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLiveFollowerCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLiveFollowerCountResponse& from) {
    GetLiveFollowerCountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLiveFollowerCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetLiveFollowerCountResponse";
  }
  protected:
  explicit GetLiveFollowerCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastUpdatedFieldNumber = 3,
    kFollowerCountFieldNumber = 1,
    kFollowingCountFieldNumber = 2,
    kChangeSinceYesterdayFieldNumber = 4,
  };
  // .google.protobuf.Timestamp last_updated = 3;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // int32 follower_count = 1;
  void clear_follower_count();
  int32_t follower_count() const;
  void set_follower_count(int32_t value);
  private:
  int32_t _internal_follower_count() const;
  void _internal_set_follower_count(int32_t value);
  public:

  // int32 following_count = 2;
  void clear_following_count();
  int32_t following_count() const;
  void set_following_count(int32_t value);
  private:
  int32_t _internal_following_count() const;
  void _internal_set_following_count(int32_t value);
  public:

  // int32 change_since_yesterday = 4;
  void clear_change_since_yesterday();
  int32_t change_since_yesterday() const;
  void set_change_since_yesterday(int32_t value);
  private:
  int32_t _internal_change_since_yesterday() const;
  void _internal_set_change_since_yesterday(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetLiveFollowerCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
    int32_t follower_count_;
    int32_t following_count_;
    int32_t change_since_yesterday_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRecentActivityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRecentActivityRequest) */ {
 public:
  inline GetRecentActivityRequest() : GetRecentActivityRequest(nullptr) {}
  ~GetRecentActivityRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRecentActivityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecentActivityRequest(const GetRecentActivityRequest& from);
  GetRecentActivityRequest(GetRecentActivityRequest&& from) noexcept
    : GetRecentActivityRequest() {
    *this = ::std::move(from);
  }

  inline GetRecentActivityRequest& operator=(const GetRecentActivityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecentActivityRequest& operator=(GetRecentActivityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecentActivityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecentActivityRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecentActivityRequest*>(
               &_GetRecentActivityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetRecentActivityRequest& a, GetRecentActivityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecentActivityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecentActivityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecentActivityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecentActivityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecentActivityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecentActivityRequest& from) {
    GetRecentActivityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecentActivityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRecentActivityRequest";
  }
  protected:
  explicit GetRecentActivityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kActivityTypeFieldNumber = 3,
    kLimitFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string activity_type = 3;
  void clear_activity_type();
  const std::string& activity_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activity_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activity_type();
  PROTOBUF_NODISCARD std::string* release_activity_type();
  void set_allocated_activity_type(std::string* activity_type);
  private:
  const std::string& _internal_activity_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activity_type(const std::string& value);
  std::string* _internal_mutable_activity_type();
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRecentActivityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activity_type_;
    int32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRecentActivityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.GetRecentActivityResponse) */ {
 public:
  inline GetRecentActivityResponse() : GetRecentActivityResponse(nullptr) {}
  ~GetRecentActivityResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRecentActivityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRecentActivityResponse(const GetRecentActivityResponse& from);
  GetRecentActivityResponse(GetRecentActivityResponse&& from) noexcept
    : GetRecentActivityResponse() {
    *this = ::std::move(from);
  }

  inline GetRecentActivityResponse& operator=(const GetRecentActivityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecentActivityResponse& operator=(GetRecentActivityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRecentActivityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRecentActivityResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecentActivityResponse*>(
               &_GetRecentActivityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetRecentActivityResponse& a, GetRecentActivityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecentActivityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecentActivityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRecentActivityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRecentActivityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRecentActivityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRecentActivityResponse& from) {
    GetRecentActivityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecentActivityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.GetRecentActivityResponse";
  }
  protected:
  explicit GetRecentActivityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivitiesFieldNumber = 1,
    kLastUpdatedFieldNumber = 3,
    kHasMoreFieldNumber = 2,
  };
  // repeated .sonet.follow.v1.FollowActivity activities = 1;
  int activities_size() const;
  private:
  int _internal_activities_size() const;
  public:
  void clear_activities();
  ::sonet::follow::v1::FollowActivity* mutable_activities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::FollowActivity >*
      mutable_activities();
  private:
  const ::sonet::follow::v1::FollowActivity& _internal_activities(int index) const;
  ::sonet::follow::v1::FollowActivity* _internal_add_activities();
  public:
  const ::sonet::follow::v1::FollowActivity& activities(int index) const;
  ::sonet::follow::v1::FollowActivity* add_activities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::FollowActivity >&
      activities() const;

  // .google.protobuf.Timestamp last_updated = 3;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // bool has_more = 2;
  void clear_has_more();
  bool has_more() const;
  void set_has_more(bool value);
  private:
  bool _internal_has_more() const;
  void _internal_set_has_more(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.GetRecentActivityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::FollowActivity > activities_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
    bool has_more_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FollowActivity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.FollowActivity) */ {
 public:
  inline FollowActivity() : FollowActivity(nullptr) {}
  ~FollowActivity() override;
  explicit PROTOBUF_CONSTEXPR FollowActivity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowActivity(const FollowActivity& from);
  FollowActivity(FollowActivity&& from) noexcept
    : FollowActivity() {
    *this = ::std::move(from);
  }

  inline FollowActivity& operator=(const FollowActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowActivity& operator=(FollowActivity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FollowActivity& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowActivity* internal_default_instance() {
    return reinterpret_cast<const FollowActivity*>(
               &_FollowActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(FollowActivity& a, FollowActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(FollowActivity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowActivity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FollowActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FollowActivity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FollowActivity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FollowActivity& from) {
    FollowActivity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FollowActivity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.FollowActivity";
  }
  protected:
  explicit FollowActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityIdFieldNumber = 1,
    kActorUserIdFieldNumber = 2,
    kTargetUserIdFieldNumber = 3,
    kActionFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kActorFieldNumber = 6,
  };
  // string activity_id = 1;
  void clear_activity_id();
  const std::string& activity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activity_id();
  PROTOBUF_NODISCARD std::string* release_activity_id();
  void set_allocated_activity_id(std::string* activity_id);
  private:
  const std::string& _internal_activity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activity_id(const std::string& value);
  std::string* _internal_mutable_activity_id();
  public:

  // string actor_user_id = 2;
  void clear_actor_user_id();
  const std::string& actor_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_actor_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_actor_user_id();
  PROTOBUF_NODISCARD std::string* release_actor_user_id();
  void set_allocated_actor_user_id(std::string* actor_user_id);
  private:
  const std::string& _internal_actor_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_actor_user_id(const std::string& value);
  std::string* _internal_mutable_actor_user_id();
  public:

  // string target_user_id = 3;
  void clear_target_user_id();
  const std::string& target_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_user_id();
  PROTOBUF_NODISCARD std::string* release_target_user_id();
  void set_allocated_target_user_id(std::string* target_user_id);
  private:
  const std::string& _internal_target_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_user_id(const std::string& value);
  std::string* _internal_mutable_target_user_id();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .sonet.follow.v1.UserInfo actor = 6;
  bool has_actor() const;
  private:
  bool _internal_has_actor() const;
  public:
  void clear_actor();
  const ::sonet::follow::v1::UserInfo& actor() const;
  PROTOBUF_NODISCARD ::sonet::follow::v1::UserInfo* release_actor();
  ::sonet::follow::v1::UserInfo* mutable_actor();
  void set_allocated_actor(::sonet::follow::v1::UserInfo* actor);
  private:
  const ::sonet::follow::v1::UserInfo& _internal_actor() const;
  ::sonet::follow::v1::UserInfo* _internal_mutable_actor();
  public:
  void unsafe_arena_set_allocated_actor(
      ::sonet::follow::v1::UserInfo* actor);
  ::sonet::follow::v1::UserInfo* unsafe_arena_release_actor();

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.FollowActivity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activity_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actor_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::sonet::follow::v1::UserInfo* actor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateFollowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.ValidateFollowRequest) */ {
 public:
  inline ValidateFollowRequest() : ValidateFollowRequest(nullptr) {}
  ~ValidateFollowRequest() override;
  explicit PROTOBUF_CONSTEXPR ValidateFollowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateFollowRequest(const ValidateFollowRequest& from);
  ValidateFollowRequest(ValidateFollowRequest&& from) noexcept
    : ValidateFollowRequest() {
    *this = ::std::move(from);
  }

  inline ValidateFollowRequest& operator=(const ValidateFollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateFollowRequest& operator=(ValidateFollowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateFollowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateFollowRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateFollowRequest*>(
               &_ValidateFollowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ValidateFollowRequest& a, ValidateFollowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateFollowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateFollowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateFollowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateFollowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateFollowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateFollowRequest& from) {
    ValidateFollowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateFollowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.ValidateFollowRequest";
  }
  protected:
  explicit ValidateFollowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowerIdFieldNumber = 1,
    kFollowingIdFieldNumber = 2,
  };
  // string follower_id = 1;
  void clear_follower_id();
  const std::string& follower_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_follower_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_follower_id();
  PROTOBUF_NODISCARD std::string* release_follower_id();
  void set_allocated_follower_id(std::string* follower_id);
  private:
  const std::string& _internal_follower_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_id(const std::string& value);
  std::string* _internal_mutable_follower_id();
  public:

  // string following_id = 2;
  void clear_following_id();
  const std::string& following_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_following_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_following_id();
  PROTOBUF_NODISCARD std::string* release_following_id();
  void set_allocated_following_id(std::string* following_id);
  private:
  const std::string& _internal_following_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_following_id(const std::string& value);
  std::string* _internal_mutable_following_id();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.ValidateFollowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr following_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ValidateFollowResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.ValidateFollowResponse) */ {
 public:
  inline ValidateFollowResponse() : ValidateFollowResponse(nullptr) {}
  ~ValidateFollowResponse() override;
  explicit PROTOBUF_CONSTEXPR ValidateFollowResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateFollowResponse(const ValidateFollowResponse& from);
  ValidateFollowResponse(ValidateFollowResponse&& from) noexcept
    : ValidateFollowResponse() {
    *this = ::std::move(from);
  }

  inline ValidateFollowResponse& operator=(const ValidateFollowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateFollowResponse& operator=(ValidateFollowResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateFollowResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateFollowResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateFollowResponse*>(
               &_ValidateFollowResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ValidateFollowResponse& a, ValidateFollowResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateFollowResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateFollowResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateFollowResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateFollowResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateFollowResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidateFollowResponse& from) {
    ValidateFollowResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateFollowResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.ValidateFollowResponse";
  }
  protected:
  explicit ValidateFollowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kCanFollowFieldNumber = 1,
    kRequiresApprovalFieldNumber = 3,
    kIsBlockedFieldNumber = 4,
    kAtFollowLimitFieldNumber = 5,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool can_follow = 1;
  void clear_can_follow();
  bool can_follow() const;
  void set_can_follow(bool value);
  private:
  bool _internal_can_follow() const;
  void _internal_set_can_follow(bool value);
  public:

  // bool requires_approval = 3;
  void clear_requires_approval();
  bool requires_approval() const;
  void set_requires_approval(bool value);
  private:
  bool _internal_requires_approval() const;
  void _internal_set_requires_approval(bool value);
  public:

  // bool is_blocked = 4;
  void clear_is_blocked();
  bool is_blocked() const;
  void set_is_blocked(bool value);
  private:
  bool _internal_is_blocked() const;
  void _internal_set_is_blocked(bool value);
  public:

  // bool at_follow_limit = 5;
  void clear_at_follow_limit();
  bool at_follow_limit() const;
  void set_at_follow_limit(bool value);
  private:
  bool _internal_at_follow_limit() const;
  void _internal_set_at_follow_limit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.ValidateFollowResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    bool can_follow_;
    bool requires_approval_;
    bool is_blocked_;
    bool at_follow_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckRateLimitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.CheckRateLimitRequest) */ {
 public:
  inline CheckRateLimitRequest() : CheckRateLimitRequest(nullptr) {}
  ~CheckRateLimitRequest() override;
  explicit PROTOBUF_CONSTEXPR CheckRateLimitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRateLimitRequest(const CheckRateLimitRequest& from);
  CheckRateLimitRequest(CheckRateLimitRequest&& from) noexcept
    : CheckRateLimitRequest() {
    *this = ::std::move(from);
  }

  inline CheckRateLimitRequest& operator=(const CheckRateLimitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRateLimitRequest& operator=(CheckRateLimitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRateLimitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRateLimitRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRateLimitRequest*>(
               &_CheckRateLimitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CheckRateLimitRequest& a, CheckRateLimitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRateLimitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRateLimitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRateLimitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRateLimitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRateLimitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRateLimitRequest& from) {
    CheckRateLimitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRateLimitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.CheckRateLimitRequest";
  }
  protected:
  explicit CheckRateLimitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.CheckRateLimitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckRateLimitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sonet.follow.v1.CheckRateLimitResponse) */ {
 public:
  inline CheckRateLimitResponse() : CheckRateLimitResponse(nullptr) {}
  ~CheckRateLimitResponse() override;
  explicit PROTOBUF_CONSTEXPR CheckRateLimitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckRateLimitResponse(const CheckRateLimitResponse& from);
  CheckRateLimitResponse(CheckRateLimitResponse&& from) noexcept
    : CheckRateLimitResponse() {
    *this = ::std::move(from);
  }

  inline CheckRateLimitResponse& operator=(const CheckRateLimitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRateLimitResponse& operator=(CheckRateLimitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckRateLimitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckRateLimitResponse* internal_default_instance() {
    return reinterpret_cast<const CheckRateLimitResponse*>(
               &_CheckRateLimitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CheckRateLimitResponse& a, CheckRateLimitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRateLimitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRateLimitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckRateLimitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckRateLimitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckRateLimitResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckRateLimitResponse& from) {
    CheckRateLimitResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRateLimitResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sonet.follow.v1.CheckRateLimitResponse";
  }
  protected:
  explicit CheckRateLimitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResetTimeFieldNumber = 4,
    kAllowedFieldNumber = 1,
    kLimitFieldNumber = 2,
    kRemainingFieldNumber = 3,
    kRetryAfterSecondsFieldNumber = 5,
  };
  // .google.protobuf.Timestamp reset_time = 4;
  bool has_reset_time() const;
  private:
  bool _internal_has_reset_time() const;
  public:
  void clear_reset_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& reset_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_reset_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reset_time();
  void set_allocated_reset_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reset_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reset_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reset_time();
  public:
  void unsafe_arena_set_allocated_reset_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* reset_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reset_time();

  // bool allowed = 1;
  void clear_allowed();
  bool allowed() const;
  void set_allowed(bool value);
  private:
  bool _internal_allowed() const;
  void _internal_set_allowed(bool value);
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 remaining = 3;
  void clear_remaining();
  int32_t remaining() const;
  void set_remaining(int32_t value);
  private:
  int32_t _internal_remaining() const;
  void _internal_set_remaining(int32_t value);
  public:

  // int32 retry_after_seconds = 5;
  void clear_retry_after_seconds();
  int32_t retry_after_seconds() const;
  void set_retry_after_seconds(int32_t value);
  private:
  int32_t _internal_retry_after_seconds() const;
  void _internal_set_retry_after_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sonet.follow.v1.CheckRateLimitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reset_time_;
    bool allowed_;
    int32_t limit_;
    int32_t remaining_;
    int32_t retry_after_seconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2ffollow_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Follow

// string follow_id = 1;
inline void Follow::clear_follow_id() {
  _impl_.follow_id_.ClearToEmpty();
}
inline const std::string& Follow::follow_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.follow_id)
  return _internal_follow_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Follow::set_follow_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follow_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.follow_id)
}
inline std::string* Follow::mutable_follow_id() {
  std::string* _s = _internal_mutable_follow_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.follow_id)
  return _s;
}
inline const std::string& Follow::_internal_follow_id() const {
  return _impl_.follow_id_.Get();
}
inline void Follow::_internal_set_follow_id(const std::string& value) {
  
  _impl_.follow_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Follow::_internal_mutable_follow_id() {
  
  return _impl_.follow_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Follow::release_follow_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.follow_id)
  return _impl_.follow_id_.Release();
}
inline void Follow::set_allocated_follow_id(std::string* follow_id) {
  if (follow_id != nullptr) {
    
  } else {
    
  }
  _impl_.follow_id_.SetAllocated(follow_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follow_id_.IsDefault()) {
    _impl_.follow_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.follow_id)
}

// string follower_id = 2;
inline void Follow::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& Follow::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Follow::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.follower_id)
}
inline std::string* Follow::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.follower_id)
  return _s;
}
inline const std::string& Follow::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void Follow::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Follow::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Follow::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.follower_id)
  return _impl_.follower_id_.Release();
}
inline void Follow::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.follower_id)
}

// string following_id = 3;
inline void Follow::clear_following_id() {
  _impl_.following_id_.ClearToEmpty();
}
inline const std::string& Follow::following_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.following_id)
  return _internal_following_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Follow::set_following_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.following_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.following_id)
}
inline std::string* Follow::mutable_following_id() {
  std::string* _s = _internal_mutable_following_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.following_id)
  return _s;
}
inline const std::string& Follow::_internal_following_id() const {
  return _impl_.following_id_.Get();
}
inline void Follow::_internal_set_following_id(const std::string& value) {
  
  _impl_.following_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Follow::_internal_mutable_following_id() {
  
  return _impl_.following_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Follow::release_following_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.following_id)
  return _impl_.following_id_.Release();
}
inline void Follow::set_allocated_following_id(std::string* following_id) {
  if (following_id != nullptr) {
    
  } else {
    
  }
  _impl_.following_id_.SetAllocated(following_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.following_id_.IsDefault()) {
    _impl_.following_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.following_id)
}

// .sonet.follow.v1.FollowType type = 4;
inline void Follow::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::follow::v1::FollowType Follow::_internal_type() const {
  return static_cast< ::sonet::follow::v1::FollowType >(_impl_.type_);
}
inline ::sonet::follow::v1::FollowType Follow::type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.type)
  return _internal_type();
}
inline void Follow::_internal_set_type(::sonet::follow::v1::FollowType value) {
  
  _impl_.type_ = value;
}
inline void Follow::set_type(::sonet::follow::v1::FollowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.type)
}

// .sonet.follow.v1.FollowStatus status = 5;
inline void Follow::clear_status() {
  _impl_.status_ = 0;
}
inline ::sonet::follow::v1::FollowStatus Follow::_internal_status() const {
  return static_cast< ::sonet::follow::v1::FollowStatus >(_impl_.status_);
}
inline ::sonet::follow::v1::FollowStatus Follow::status() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.status)
  return _internal_status();
}
inline void Follow::_internal_set_status(::sonet::follow::v1::FollowStatus value) {
  
  _impl_.status_ = value;
}
inline void Follow::set_status(::sonet::follow::v1::FollowStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.status)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool Follow::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Follow::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.created_at)
  return _internal_created_at();
}
inline void Follow::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Follow.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.created_at)
  return _msg;
}
inline void Follow::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.created_at)
}

// .google.protobuf.Timestamp updated_at = 7;
inline bool Follow::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool Follow::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.updated_at)
  return _internal_updated_at();
}
inline void Follow::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Follow.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.updated_at)
  return _msg;
}
inline void Follow::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.updated_at)
}

// .google.protobuf.Timestamp approved_at = 8;
inline bool Follow::_internal_has_approved_at() const {
  return this != internal_default_instance() && _impl_.approved_at_ != nullptr;
}
inline bool Follow::has_approved_at() const {
  return _internal_has_approved_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::_internal_approved_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.approved_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::approved_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.approved_at)
  return _internal_approved_at();
}
inline void Follow::unsafe_arena_set_allocated_approved_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* approved_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.approved_at_);
  }
  _impl_.approved_at_ = approved_at;
  if (approved_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Follow.approved_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::release_approved_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.approved_at_;
  _impl_.approved_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::unsafe_arena_release_approved_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.approved_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.approved_at_;
  _impl_.approved_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::_internal_mutable_approved_at() {
  
  if (_impl_.approved_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.approved_at_ = p;
  }
  return _impl_.approved_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::mutable_approved_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_approved_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.approved_at)
  return _msg;
}
inline void Follow::set_allocated_approved_at(::PROTOBUF_NAMESPACE_ID::Timestamp* approved_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.approved_at_);
  }
  if (approved_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(approved_at));
    if (message_arena != submessage_arena) {
      approved_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, approved_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.approved_at_ = approved_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.approved_at)
}

// int32 interaction_count = 9;
inline void Follow::clear_interaction_count() {
  _impl_.interaction_count_ = 0;
}
inline int32_t Follow::_internal_interaction_count() const {
  return _impl_.interaction_count_;
}
inline int32_t Follow::interaction_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.interaction_count)
  return _internal_interaction_count();
}
inline void Follow::_internal_set_interaction_count(int32_t value) {
  
  _impl_.interaction_count_ = value;
}
inline void Follow::set_interaction_count(int32_t value) {
  _internal_set_interaction_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.interaction_count)
}

// .google.protobuf.Timestamp last_interaction_at = 10;
inline bool Follow::_internal_has_last_interaction_at() const {
  return this != internal_default_instance() && _impl_.last_interaction_at_ != nullptr;
}
inline bool Follow::has_last_interaction_at() const {
  return _internal_has_last_interaction_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::_internal_last_interaction_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_interaction_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Follow::last_interaction_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.last_interaction_at)
  return _internal_last_interaction_at();
}
inline void Follow::unsafe_arena_set_allocated_last_interaction_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_interaction_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_interaction_at_);
  }
  _impl_.last_interaction_at_ = last_interaction_at;
  if (last_interaction_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Follow.last_interaction_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::release_last_interaction_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_interaction_at_;
  _impl_.last_interaction_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::unsafe_arena_release_last_interaction_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.last_interaction_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_interaction_at_;
  _impl_.last_interaction_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::_internal_mutable_last_interaction_at() {
  
  if (_impl_.last_interaction_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_interaction_at_ = p;
  }
  return _impl_.last_interaction_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Follow::mutable_last_interaction_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_interaction_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.last_interaction_at)
  return _msg;
}
inline void Follow::set_allocated_last_interaction_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_interaction_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_interaction_at_);
  }
  if (last_interaction_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_interaction_at));
    if (message_arena != submessage_arena) {
      last_interaction_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_interaction_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_interaction_at_ = last_interaction_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.last_interaction_at)
}

// double engagement_score = 11;
inline void Follow::clear_engagement_score() {
  _impl_.engagement_score_ = 0;
}
inline double Follow::_internal_engagement_score() const {
  return _impl_.engagement_score_;
}
inline double Follow::engagement_score() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.engagement_score)
  return _internal_engagement_score();
}
inline void Follow::_internal_set_engagement_score(double value) {
  
  _impl_.engagement_score_ = value;
}
inline void Follow::set_engagement_score(double value) {
  _internal_set_engagement_score(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.engagement_score)
}

// bool is_muted = 12;
inline void Follow::clear_is_muted() {
  _impl_.is_muted_ = false;
}
inline bool Follow::_internal_is_muted() const {
  return _impl_.is_muted_;
}
inline bool Follow::is_muted() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.is_muted)
  return _internal_is_muted();
}
inline void Follow::_internal_set_is_muted(bool value) {
  
  _impl_.is_muted_ = value;
}
inline void Follow::set_is_muted(bool value) {
  _internal_set_is_muted(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.is_muted)
}

// bool show_retweets = 13;
inline void Follow::clear_show_retweets() {
  _impl_.show_retweets_ = false;
}
inline bool Follow::_internal_show_retweets() const {
  return _impl_.show_retweets_;
}
inline bool Follow::show_retweets() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.show_retweets)
  return _internal_show_retweets();
}
inline void Follow::_internal_set_show_retweets(bool value) {
  
  _impl_.show_retweets_ = value;
}
inline void Follow::set_show_retweets(bool value) {
  _internal_set_show_retweets(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.show_retweets)
}

// bool show_replies = 14;
inline void Follow::clear_show_replies() {
  _impl_.show_replies_ = false;
}
inline bool Follow::_internal_show_replies() const {
  return _impl_.show_replies_;
}
inline bool Follow::show_replies() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.show_replies)
  return _internal_show_replies();
}
inline void Follow::_internal_set_show_replies(bool value) {
  
  _impl_.show_replies_ = value;
}
inline void Follow::set_show_replies(bool value) {
  _internal_set_show_replies(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.show_replies)
}

// bool is_close_friend = 15;
inline void Follow::clear_is_close_friend() {
  _impl_.is_close_friend_ = false;
}
inline bool Follow::_internal_is_close_friend() const {
  return _impl_.is_close_friend_;
}
inline bool Follow::is_close_friend() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.is_close_friend)
  return _internal_is_close_friend();
}
inline void Follow::_internal_set_is_close_friend(bool value) {
  
  _impl_.is_close_friend_ = value;
}
inline void Follow::set_is_close_friend(bool value) {
  _internal_set_is_close_friend(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.is_close_friend)
}

// .sonet.follow.v1.FollowNotificationLevel notification_level = 16;
inline void Follow::clear_notification_level() {
  _impl_.notification_level_ = 0;
}
inline ::sonet::follow::v1::FollowNotificationLevel Follow::_internal_notification_level() const {
  return static_cast< ::sonet::follow::v1::FollowNotificationLevel >(_impl_.notification_level_);
}
inline ::sonet::follow::v1::FollowNotificationLevel Follow::notification_level() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.notification_level)
  return _internal_notification_level();
}
inline void Follow::_internal_set_notification_level(::sonet::follow::v1::FollowNotificationLevel value) {
  
  _impl_.notification_level_ = value;
}
inline void Follow::set_notification_level(::sonet::follow::v1::FollowNotificationLevel value) {
  _internal_set_notification_level(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.notification_level)
}

// string follow_source = 17;
inline void Follow::clear_follow_source() {
  _impl_.follow_source_.ClearToEmpty();
}
inline const std::string& Follow::follow_source() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.follow_source)
  return _internal_follow_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Follow::set_follow_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follow_source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.follow_source)
}
inline std::string* Follow::mutable_follow_source() {
  std::string* _s = _internal_mutable_follow_source();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Follow.follow_source)
  return _s;
}
inline const std::string& Follow::_internal_follow_source() const {
  return _impl_.follow_source_.Get();
}
inline void Follow::_internal_set_follow_source(const std::string& value) {
  
  _impl_.follow_source_.Set(value, GetArenaForAllocation());
}
inline std::string* Follow::_internal_mutable_follow_source() {
  
  return _impl_.follow_source_.Mutable(GetArenaForAllocation());
}
inline std::string* Follow::release_follow_source() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Follow.follow_source)
  return _impl_.follow_source_.Release();
}
inline void Follow::set_allocated_follow_source(std::string* follow_source) {
  if (follow_source != nullptr) {
    
  } else {
    
  }
  _impl_.follow_source_.SetAllocated(follow_source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follow_source_.IsDefault()) {
    _impl_.follow_source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Follow.follow_source)
}

// double relationship_strength = 18;
inline void Follow::clear_relationship_strength() {
  _impl_.relationship_strength_ = 0;
}
inline double Follow::_internal_relationship_strength() const {
  return _impl_.relationship_strength_;
}
inline double Follow::relationship_strength() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.relationship_strength)
  return _internal_relationship_strength();
}
inline void Follow::_internal_set_relationship_strength(double value) {
  
  _impl_.relationship_strength_ = value;
}
inline void Follow::set_relationship_strength(double value) {
  _internal_set_relationship_strength(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.relationship_strength)
}

// int32 mutual_friends_count = 19;
inline void Follow::clear_mutual_friends_count() {
  _impl_.mutual_friends_count_ = 0;
}
inline int32_t Follow::_internal_mutual_friends_count() const {
  return _impl_.mutual_friends_count_;
}
inline int32_t Follow::mutual_friends_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Follow.mutual_friends_count)
  return _internal_mutual_friends_count();
}
inline void Follow::_internal_set_mutual_friends_count(int32_t value) {
  
  _impl_.mutual_friends_count_ = value;
}
inline void Follow::set_mutual_friends_count(int32_t value) {
  _internal_set_mutual_friends_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Follow.mutual_friends_count)
}

// -------------------------------------------------------------------

// Relationship

// string relationship_id = 1;
inline void Relationship::clear_relationship_id() {
  _impl_.relationship_id_.ClearToEmpty();
}
inline const std::string& Relationship::relationship_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.relationship_id)
  return _internal_relationship_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Relationship::set_relationship_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relationship_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.relationship_id)
}
inline std::string* Relationship::mutable_relationship_id() {
  std::string* _s = _internal_mutable_relationship_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.relationship_id)
  return _s;
}
inline const std::string& Relationship::_internal_relationship_id() const {
  return _impl_.relationship_id_.Get();
}
inline void Relationship::_internal_set_relationship_id(const std::string& value) {
  
  _impl_.relationship_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Relationship::_internal_mutable_relationship_id() {
  
  return _impl_.relationship_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Relationship::release_relationship_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.relationship_id)
  return _impl_.relationship_id_.Release();
}
inline void Relationship::set_allocated_relationship_id(std::string* relationship_id) {
  if (relationship_id != nullptr) {
    
  } else {
    
  }
  _impl_.relationship_id_.SetAllocated(relationship_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relationship_id_.IsDefault()) {
    _impl_.relationship_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.relationship_id)
}

// string user1_id = 2;
inline void Relationship::clear_user1_id() {
  _impl_.user1_id_.ClearToEmpty();
}
inline const std::string& Relationship::user1_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user1_id)
  return _internal_user1_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Relationship::set_user1_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user1_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user1_id)
}
inline std::string* Relationship::mutable_user1_id() {
  std::string* _s = _internal_mutable_user1_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.user1_id)
  return _s;
}
inline const std::string& Relationship::_internal_user1_id() const {
  return _impl_.user1_id_.Get();
}
inline void Relationship::_internal_set_user1_id(const std::string& value) {
  
  _impl_.user1_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Relationship::_internal_mutable_user1_id() {
  
  return _impl_.user1_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Relationship::release_user1_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.user1_id)
  return _impl_.user1_id_.Release();
}
inline void Relationship::set_allocated_user1_id(std::string* user1_id) {
  if (user1_id != nullptr) {
    
  } else {
    
  }
  _impl_.user1_id_.SetAllocated(user1_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user1_id_.IsDefault()) {
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.user1_id)
}

// string user2_id = 3;
inline void Relationship::clear_user2_id() {
  _impl_.user2_id_.ClearToEmpty();
}
inline const std::string& Relationship::user2_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user2_id)
  return _internal_user2_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Relationship::set_user2_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user2_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user2_id)
}
inline std::string* Relationship::mutable_user2_id() {
  std::string* _s = _internal_mutable_user2_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.user2_id)
  return _s;
}
inline const std::string& Relationship::_internal_user2_id() const {
  return _impl_.user2_id_.Get();
}
inline void Relationship::_internal_set_user2_id(const std::string& value) {
  
  _impl_.user2_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Relationship::_internal_mutable_user2_id() {
  
  return _impl_.user2_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Relationship::release_user2_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.user2_id)
  return _impl_.user2_id_.Release();
}
inline void Relationship::set_allocated_user2_id(std::string* user2_id) {
  if (user2_id != nullptr) {
    
  } else {
    
  }
  _impl_.user2_id_.SetAllocated(user2_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user2_id_.IsDefault()) {
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.user2_id)
}

// .sonet.follow.v1.RelationshipType type = 4;
inline void Relationship::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::follow::v1::RelationshipType Relationship::_internal_type() const {
  return static_cast< ::sonet::follow::v1::RelationshipType >(_impl_.type_);
}
inline ::sonet::follow::v1::RelationshipType Relationship::type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.type)
  return _internal_type();
}
inline void Relationship::_internal_set_type(::sonet::follow::v1::RelationshipType value) {
  
  _impl_.type_ = value;
}
inline void Relationship::set_type(::sonet::follow::v1::RelationshipType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.type)
}

// bool user1_follows_user2 = 5;
inline void Relationship::clear_user1_follows_user2() {
  _impl_.user1_follows_user2_ = false;
}
inline bool Relationship::_internal_user1_follows_user2() const {
  return _impl_.user1_follows_user2_;
}
inline bool Relationship::user1_follows_user2() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user1_follows_user2)
  return _internal_user1_follows_user2();
}
inline void Relationship::_internal_set_user1_follows_user2(bool value) {
  
  _impl_.user1_follows_user2_ = value;
}
inline void Relationship::set_user1_follows_user2(bool value) {
  _internal_set_user1_follows_user2(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user1_follows_user2)
}

// bool user2_follows_user1 = 6;
inline void Relationship::clear_user2_follows_user1() {
  _impl_.user2_follows_user1_ = false;
}
inline bool Relationship::_internal_user2_follows_user1() const {
  return _impl_.user2_follows_user1_;
}
inline bool Relationship::user2_follows_user1() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user2_follows_user1)
  return _internal_user2_follows_user1();
}
inline void Relationship::_internal_set_user2_follows_user1(bool value) {
  
  _impl_.user2_follows_user1_ = value;
}
inline void Relationship::set_user2_follows_user1(bool value) {
  _internal_set_user2_follows_user1(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user2_follows_user1)
}

// bool user1_blocks_user2 = 7;
inline void Relationship::clear_user1_blocks_user2() {
  _impl_.user1_blocks_user2_ = false;
}
inline bool Relationship::_internal_user1_blocks_user2() const {
  return _impl_.user1_blocks_user2_;
}
inline bool Relationship::user1_blocks_user2() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user1_blocks_user2)
  return _internal_user1_blocks_user2();
}
inline void Relationship::_internal_set_user1_blocks_user2(bool value) {
  
  _impl_.user1_blocks_user2_ = value;
}
inline void Relationship::set_user1_blocks_user2(bool value) {
  _internal_set_user1_blocks_user2(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user1_blocks_user2)
}

// bool user2_blocks_user1 = 8;
inline void Relationship::clear_user2_blocks_user1() {
  _impl_.user2_blocks_user1_ = false;
}
inline bool Relationship::_internal_user2_blocks_user1() const {
  return _impl_.user2_blocks_user1_;
}
inline bool Relationship::user2_blocks_user1() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user2_blocks_user1)
  return _internal_user2_blocks_user1();
}
inline void Relationship::_internal_set_user2_blocks_user1(bool value) {
  
  _impl_.user2_blocks_user1_ = value;
}
inline void Relationship::set_user2_blocks_user1(bool value) {
  _internal_set_user2_blocks_user1(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user2_blocks_user1)
}

// bool user1_mutes_user2 = 9;
inline void Relationship::clear_user1_mutes_user2() {
  _impl_.user1_mutes_user2_ = false;
}
inline bool Relationship::_internal_user1_mutes_user2() const {
  return _impl_.user1_mutes_user2_;
}
inline bool Relationship::user1_mutes_user2() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user1_mutes_user2)
  return _internal_user1_mutes_user2();
}
inline void Relationship::_internal_set_user1_mutes_user2(bool value) {
  
  _impl_.user1_mutes_user2_ = value;
}
inline void Relationship::set_user1_mutes_user2(bool value) {
  _internal_set_user1_mutes_user2(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user1_mutes_user2)
}

// bool user2_mutes_user1 = 10;
inline void Relationship::clear_user2_mutes_user1() {
  _impl_.user2_mutes_user1_ = false;
}
inline bool Relationship::_internal_user2_mutes_user1() const {
  return _impl_.user2_mutes_user1_;
}
inline bool Relationship::user2_mutes_user1() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user2_mutes_user1)
  return _internal_user2_mutes_user1();
}
inline void Relationship::_internal_set_user2_mutes_user1(bool value) {
  
  _impl_.user2_mutes_user1_ = value;
}
inline void Relationship::set_user2_mutes_user1(bool value) {
  _internal_set_user2_mutes_user1(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.user2_mutes_user1)
}

// bool is_close_friends = 11;
inline void Relationship::clear_is_close_friends() {
  _impl_.is_close_friends_ = false;
}
inline bool Relationship::_internal_is_close_friends() const {
  return _impl_.is_close_friends_;
}
inline bool Relationship::is_close_friends() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.is_close_friends)
  return _internal_is_close_friends();
}
inline void Relationship::_internal_set_is_close_friends(bool value) {
  
  _impl_.is_close_friends_ = value;
}
inline void Relationship::set_is_close_friends(bool value) {
  _internal_set_is_close_friends(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.is_close_friends)
}

// bool is_verified_relationship = 12;
inline void Relationship::clear_is_verified_relationship() {
  _impl_.is_verified_relationship_ = false;
}
inline bool Relationship::_internal_is_verified_relationship() const {
  return _impl_.is_verified_relationship_;
}
inline bool Relationship::is_verified_relationship() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.is_verified_relationship)
  return _internal_is_verified_relationship();
}
inline void Relationship::_internal_set_is_verified_relationship(bool value) {
  
  _impl_.is_verified_relationship_ = value;
}
inline void Relationship::set_is_verified_relationship(bool value) {
  _internal_set_is_verified_relationship(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.is_verified_relationship)
}

// .google.protobuf.Timestamp created_at = 13;
inline bool Relationship::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool Relationship::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::created_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.created_at)
  return _internal_created_at();
}
inline void Relationship::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Relationship.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.created_at)
  return _msg;
}
inline void Relationship::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.created_at)
}

// .google.protobuf.Timestamp updated_at = 14;
inline bool Relationship::_internal_has_updated_at() const {
  return this != internal_default_instance() && _impl_.updated_at_ != nullptr;
}
inline bool Relationship::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::_internal_updated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::updated_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.updated_at)
  return _internal_updated_at();
}
inline void Relationship::unsafe_arena_set_allocated_updated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  _impl_.updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Relationship.updated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::release_updated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.updated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.updated_at_;
  _impl_.updated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::_internal_mutable_updated_at() {
  
  if (_impl_.updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.updated_at_ = p;
  }
  return _impl_.updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::mutable_updated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.updated_at)
  return _msg;
}
inline void Relationship::set_allocated_updated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at));
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.updated_at)
}

// .google.protobuf.Timestamp user1_followed_user2_at = 15;
inline bool Relationship::_internal_has_user1_followed_user2_at() const {
  return this != internal_default_instance() && _impl_.user1_followed_user2_at_ != nullptr;
}
inline bool Relationship::has_user1_followed_user2_at() const {
  return _internal_has_user1_followed_user2_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::_internal_user1_followed_user2_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.user1_followed_user2_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::user1_followed_user2_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user1_followed_user2_at)
  return _internal_user1_followed_user2_at();
}
inline void Relationship::unsafe_arena_set_allocated_user1_followed_user2_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* user1_followed_user2_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user1_followed_user2_at_);
  }
  _impl_.user1_followed_user2_at_ = user1_followed_user2_at;
  if (user1_followed_user2_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Relationship.user1_followed_user2_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::release_user1_followed_user2_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.user1_followed_user2_at_;
  _impl_.user1_followed_user2_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::unsafe_arena_release_user1_followed_user2_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.user1_followed_user2_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.user1_followed_user2_at_;
  _impl_.user1_followed_user2_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::_internal_mutable_user1_followed_user2_at() {
  
  if (_impl_.user1_followed_user2_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.user1_followed_user2_at_ = p;
  }
  return _impl_.user1_followed_user2_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::mutable_user1_followed_user2_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_user1_followed_user2_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.user1_followed_user2_at)
  return _msg;
}
inline void Relationship::set_allocated_user1_followed_user2_at(::PROTOBUF_NAMESPACE_ID::Timestamp* user1_followed_user2_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user1_followed_user2_at_);
  }
  if (user1_followed_user2_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user1_followed_user2_at));
    if (message_arena != submessage_arena) {
      user1_followed_user2_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user1_followed_user2_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user1_followed_user2_at_ = user1_followed_user2_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.user1_followed_user2_at)
}

// .google.protobuf.Timestamp user2_followed_user1_at = 16;
inline bool Relationship::_internal_has_user2_followed_user1_at() const {
  return this != internal_default_instance() && _impl_.user2_followed_user1_at_ != nullptr;
}
inline bool Relationship::has_user2_followed_user1_at() const {
  return _internal_has_user2_followed_user1_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::_internal_user2_followed_user1_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.user2_followed_user1_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Relationship::user2_followed_user1_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.user2_followed_user1_at)
  return _internal_user2_followed_user1_at();
}
inline void Relationship::unsafe_arena_set_allocated_user2_followed_user1_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* user2_followed_user1_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user2_followed_user1_at_);
  }
  _impl_.user2_followed_user1_at_ = user2_followed_user1_at;
  if (user2_followed_user1_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Relationship.user2_followed_user1_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::release_user2_followed_user1_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.user2_followed_user1_at_;
  _impl_.user2_followed_user1_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::unsafe_arena_release_user2_followed_user1_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Relationship.user2_followed_user1_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.user2_followed_user1_at_;
  _impl_.user2_followed_user1_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::_internal_mutable_user2_followed_user1_at() {
  
  if (_impl_.user2_followed_user1_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.user2_followed_user1_at_ = p;
  }
  return _impl_.user2_followed_user1_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Relationship::mutable_user2_followed_user1_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_user2_followed_user1_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Relationship.user2_followed_user1_at)
  return _msg;
}
inline void Relationship::set_allocated_user2_followed_user1_at(::PROTOBUF_NAMESPACE_ID::Timestamp* user2_followed_user1_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user2_followed_user1_at_);
  }
  if (user2_followed_user1_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user2_followed_user1_at));
    if (message_arena != submessage_arena) {
      user2_followed_user1_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user2_followed_user1_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user2_followed_user1_at_ = user2_followed_user1_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Relationship.user2_followed_user1_at)
}

// int32 total_interactions = 17;
inline void Relationship::clear_total_interactions() {
  _impl_.total_interactions_ = 0;
}
inline int32_t Relationship::_internal_total_interactions() const {
  return _impl_.total_interactions_;
}
inline int32_t Relationship::total_interactions() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.total_interactions)
  return _internal_total_interactions();
}
inline void Relationship::_internal_set_total_interactions(int32_t value) {
  
  _impl_.total_interactions_ = value;
}
inline void Relationship::set_total_interactions(int32_t value) {
  _internal_set_total_interactions(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.total_interactions)
}

// double relationship_strength = 18;
inline void Relationship::clear_relationship_strength() {
  _impl_.relationship_strength_ = 0;
}
inline double Relationship::_internal_relationship_strength() const {
  return _impl_.relationship_strength_;
}
inline double Relationship::relationship_strength() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.relationship_strength)
  return _internal_relationship_strength();
}
inline void Relationship::_internal_set_relationship_strength(double value) {
  
  _impl_.relationship_strength_ = value;
}
inline void Relationship::set_relationship_strength(double value) {
  _internal_set_relationship_strength(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.relationship_strength)
}

// double engagement_rate = 19;
inline void Relationship::clear_engagement_rate() {
  _impl_.engagement_rate_ = 0;
}
inline double Relationship::_internal_engagement_rate() const {
  return _impl_.engagement_rate_;
}
inline double Relationship::engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.engagement_rate)
  return _internal_engagement_rate();
}
inline void Relationship::_internal_set_engagement_rate(double value) {
  
  _impl_.engagement_rate_ = value;
}
inline void Relationship::set_engagement_rate(double value) {
  _internal_set_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.engagement_rate)
}

// int32 mutual_followers_count = 20;
inline void Relationship::clear_mutual_followers_count() {
  _impl_.mutual_followers_count_ = 0;
}
inline int32_t Relationship::_internal_mutual_followers_count() const {
  return _impl_.mutual_followers_count_;
}
inline int32_t Relationship::mutual_followers_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Relationship.mutual_followers_count)
  return _internal_mutual_followers_count();
}
inline void Relationship::_internal_set_mutual_followers_count(int32_t value) {
  
  _impl_.mutual_followers_count_ = value;
}
inline void Relationship::set_mutual_followers_count(int32_t value) {
  _internal_set_mutual_followers_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Relationship.mutual_followers_count)
}

// -------------------------------------------------------------------

// UserInfo

// string user_id = 1;
inline void UserInfo::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.user_id)
}
inline std::string* UserInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UserInfo.user_id)
  return _s;
}
inline const std::string& UserInfo::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserInfo::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UserInfo.user_id)
  return _impl_.user_id_.Release();
}
inline void UserInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UserInfo.user_id)
}

// string username = 2;
inline void UserInfo::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.username)
}
inline std::string* UserInfo::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UserInfo.username)
  return _s;
}
inline const std::string& UserInfo::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserInfo::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UserInfo.username)
  return _impl_.username_.Release();
}
inline void UserInfo::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UserInfo.username)
}

// string display_name = 3;
inline void UserInfo::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& UserInfo::display_name() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.display_name)
}
inline std::string* UserInfo::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UserInfo.display_name)
  return _s;
}
inline const std::string& UserInfo::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void UserInfo::_internal_set_display_name(const std::string& value) {
  
  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_display_name() {
  
  return _impl_.display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_display_name() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UserInfo.display_name)
  return _impl_.display_name_.Release();
}
inline void UserInfo::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  _impl_.display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_name_.IsDefault()) {
    _impl_.display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UserInfo.display_name)
}

// string avatar_url = 4;
inline void UserInfo::clear_avatar_url() {
  _impl_.avatar_url_.ClearToEmpty();
}
inline const std::string& UserInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.avatar_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.avatar_url)
}
inline std::string* UserInfo::mutable_avatar_url() {
  std::string* _s = _internal_mutable_avatar_url();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UserInfo.avatar_url)
  return _s;
}
inline const std::string& UserInfo::_internal_avatar_url() const {
  return _impl_.avatar_url_.Get();
}
inline void UserInfo::_internal_set_avatar_url(const std::string& value) {
  
  _impl_.avatar_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_avatar_url() {
  
  return _impl_.avatar_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UserInfo.avatar_url)
  return _impl_.avatar_url_.Release();
}
inline void UserInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  _impl_.avatar_url_.SetAllocated(avatar_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.avatar_url_.IsDefault()) {
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UserInfo.avatar_url)
}

// bool is_verified = 5;
inline void UserInfo::clear_is_verified() {
  _impl_.is_verified_ = false;
}
inline bool UserInfo::_internal_is_verified() const {
  return _impl_.is_verified_;
}
inline bool UserInfo::is_verified() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.is_verified)
  return _internal_is_verified();
}
inline void UserInfo::_internal_set_is_verified(bool value) {
  
  _impl_.is_verified_ = value;
}
inline void UserInfo::set_is_verified(bool value) {
  _internal_set_is_verified(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.is_verified)
}

// bool is_private = 6;
inline void UserInfo::clear_is_private() {
  _impl_.is_private_ = false;
}
inline bool UserInfo::_internal_is_private() const {
  return _impl_.is_private_;
}
inline bool UserInfo::is_private() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.is_private)
  return _internal_is_private();
}
inline void UserInfo::_internal_set_is_private(bool value) {
  
  _impl_.is_private_ = value;
}
inline void UserInfo::set_is_private(bool value) {
  _internal_set_is_private(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.is_private)
}

// int32 followers_count = 7;
inline void UserInfo::clear_followers_count() {
  _impl_.followers_count_ = 0;
}
inline int32_t UserInfo::_internal_followers_count() const {
  return _impl_.followers_count_;
}
inline int32_t UserInfo::followers_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.followers_count)
  return _internal_followers_count();
}
inline void UserInfo::_internal_set_followers_count(int32_t value) {
  
  _impl_.followers_count_ = value;
}
inline void UserInfo::set_followers_count(int32_t value) {
  _internal_set_followers_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.followers_count)
}

// int32 following_count = 8;
inline void UserInfo::clear_following_count() {
  _impl_.following_count_ = 0;
}
inline int32_t UserInfo::_internal_following_count() const {
  return _impl_.following_count_;
}
inline int32_t UserInfo::following_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.following_count)
  return _internal_following_count();
}
inline void UserInfo::_internal_set_following_count(int32_t value) {
  
  _impl_.following_count_ = value;
}
inline void UserInfo::set_following_count(int32_t value) {
  _internal_set_following_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UserInfo.following_count)
}

// .google.protobuf.Timestamp last_active_at = 9;
inline bool UserInfo::_internal_has_last_active_at() const {
  return this != internal_default_instance() && _impl_.last_active_at_ != nullptr;
}
inline bool UserInfo::has_last_active_at() const {
  return _internal_has_last_active_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserInfo::_internal_last_active_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_active_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& UserInfo::last_active_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UserInfo.last_active_at)
  return _internal_last_active_at();
}
inline void UserInfo::unsafe_arena_set_allocated_last_active_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_active_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_active_at_);
  }
  _impl_.last_active_at_ = last_active_at;
  if (last_active_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.UserInfo.last_active_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserInfo::release_last_active_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_active_at_;
  _impl_.last_active_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserInfo::unsafe_arena_release_last_active_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UserInfo.last_active_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_active_at_;
  _impl_.last_active_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserInfo::_internal_mutable_last_active_at() {
  
  if (_impl_.last_active_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_active_at_ = p;
  }
  return _impl_.last_active_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* UserInfo::mutable_last_active_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_active_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UserInfo.last_active_at)
  return _msg;
}
inline void UserInfo::set_allocated_last_active_at(::PROTOBUF_NAMESPACE_ID::Timestamp* last_active_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_active_at_);
  }
  if (last_active_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_active_at));
    if (message_arena != submessage_arena) {
      last_active_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_active_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_active_at_ = last_active_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UserInfo.last_active_at)
}

// -------------------------------------------------------------------

// Recommendation

// .sonet.follow.v1.UserInfo user = 1;
inline bool Recommendation::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool Recommendation::has_user() const {
  return _internal_has_user();
}
inline void Recommendation::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::sonet::follow::v1::UserInfo& Recommendation::_internal_user() const {
  const ::sonet::follow::v1::UserInfo* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::UserInfo&>(
      ::sonet::follow::v1::_UserInfo_default_instance_);
}
inline const ::sonet::follow::v1::UserInfo& Recommendation::user() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.user)
  return _internal_user();
}
inline void Recommendation::unsafe_arena_set_allocated_user(
    ::sonet::follow::v1::UserInfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.Recommendation.user)
}
inline ::sonet::follow::v1::UserInfo* Recommendation::release_user() {
  
  ::sonet::follow::v1::UserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::UserInfo* Recommendation::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Recommendation.user)
  
  ::sonet::follow::v1::UserInfo* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::UserInfo* Recommendation::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::UserInfo>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::sonet::follow::v1::UserInfo* Recommendation::mutable_user() {
  ::sonet::follow::v1::UserInfo* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Recommendation.user)
  return _msg;
}
inline void Recommendation::set_allocated_user(::sonet::follow::v1::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Recommendation.user)
}

// double score = 2;
inline void Recommendation::clear_score() {
  _impl_.score_ = 0;
}
inline double Recommendation::_internal_score() const {
  return _impl_.score_;
}
inline double Recommendation::score() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.score)
  return _internal_score();
}
inline void Recommendation::_internal_set_score(double value) {
  
  _impl_.score_ = value;
}
inline void Recommendation::set_score(double value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.score)
}

// string reason = 3;
inline void Recommendation::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& Recommendation::reason() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Recommendation::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.reason)
}
inline std::string* Recommendation::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Recommendation.reason)
  return _s;
}
inline const std::string& Recommendation::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void Recommendation::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* Recommendation::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* Recommendation::release_reason() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.Recommendation.reason)
  return _impl_.reason_.Release();
}
inline void Recommendation::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.Recommendation.reason)
}

// .sonet.follow.v1.RecommendationAlgorithm algorithm = 4;
inline void Recommendation::clear_algorithm() {
  _impl_.algorithm_ = 0;
}
inline ::sonet::follow::v1::RecommendationAlgorithm Recommendation::_internal_algorithm() const {
  return static_cast< ::sonet::follow::v1::RecommendationAlgorithm >(_impl_.algorithm_);
}
inline ::sonet::follow::v1::RecommendationAlgorithm Recommendation::algorithm() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.algorithm)
  return _internal_algorithm();
}
inline void Recommendation::_internal_set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value) {
  
  _impl_.algorithm_ = value;
}
inline void Recommendation::set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.algorithm)
}

// int32 mutual_friends_count = 5;
inline void Recommendation::clear_mutual_friends_count() {
  _impl_.mutual_friends_count_ = 0;
}
inline int32_t Recommendation::_internal_mutual_friends_count() const {
  return _impl_.mutual_friends_count_;
}
inline int32_t Recommendation::mutual_friends_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.mutual_friends_count)
  return _internal_mutual_friends_count();
}
inline void Recommendation::_internal_set_mutual_friends_count(int32_t value) {
  
  _impl_.mutual_friends_count_ = value;
}
inline void Recommendation::set_mutual_friends_count(int32_t value) {
  _internal_set_mutual_friends_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.mutual_friends_count)
}

// repeated string common_interests = 6;
inline int Recommendation::_internal_common_interests_size() const {
  return _impl_.common_interests_.size();
}
inline int Recommendation::common_interests_size() const {
  return _internal_common_interests_size();
}
inline void Recommendation::clear_common_interests() {
  _impl_.common_interests_.Clear();
}
inline std::string* Recommendation::add_common_interests() {
  std::string* _s = _internal_add_common_interests();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.Recommendation.common_interests)
  return _s;
}
inline const std::string& Recommendation::_internal_common_interests(int index) const {
  return _impl_.common_interests_.Get(index);
}
inline const std::string& Recommendation::common_interests(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.Recommendation.common_interests)
  return _internal_common_interests(index);
}
inline std::string* Recommendation::mutable_common_interests(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.Recommendation.common_interests)
  return _impl_.common_interests_.Mutable(index);
}
inline void Recommendation::set_common_interests(int index, const std::string& value) {
  _impl_.common_interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::set_common_interests(int index, std::string&& value) {
  _impl_.common_interests_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::set_common_interests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.common_interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::set_common_interests(int index, const char* value, size_t size) {
  _impl_.common_interests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.Recommendation.common_interests)
}
inline std::string* Recommendation::_internal_add_common_interests() {
  return _impl_.common_interests_.Add();
}
inline void Recommendation::add_common_interests(const std::string& value) {
  _impl_.common_interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::add_common_interests(std::string&& value) {
  _impl_.common_interests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::add_common_interests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.common_interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.Recommendation.common_interests)
}
inline void Recommendation::add_common_interests(const char* value, size_t size) {
  _impl_.common_interests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.Recommendation.common_interests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Recommendation::common_interests() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.Recommendation.common_interests)
  return _impl_.common_interests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Recommendation::mutable_common_interests() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.Recommendation.common_interests)
  return &_impl_.common_interests_;
}

// -------------------------------------------------------------------

// PaginationInfo

// string next_cursor = 1;
inline void PaginationInfo::clear_next_cursor() {
  _impl_.next_cursor_.ClearToEmpty();
}
inline const std::string& PaginationInfo::next_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.PaginationInfo.next_cursor)
  return _internal_next_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaginationInfo::set_next_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.PaginationInfo.next_cursor)
}
inline std::string* PaginationInfo::mutable_next_cursor() {
  std::string* _s = _internal_mutable_next_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.PaginationInfo.next_cursor)
  return _s;
}
inline const std::string& PaginationInfo::_internal_next_cursor() const {
  return _impl_.next_cursor_.Get();
}
inline void PaginationInfo::_internal_set_next_cursor(const std::string& value) {
  
  _impl_.next_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* PaginationInfo::_internal_mutable_next_cursor() {
  
  return _impl_.next_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* PaginationInfo::release_next_cursor() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.PaginationInfo.next_cursor)
  return _impl_.next_cursor_.Release();
}
inline void PaginationInfo::set_allocated_next_cursor(std::string* next_cursor) {
  if (next_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.next_cursor_.SetAllocated(next_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_cursor_.IsDefault()) {
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.PaginationInfo.next_cursor)
}

// string previous_cursor = 2;
inline void PaginationInfo::clear_previous_cursor() {
  _impl_.previous_cursor_.ClearToEmpty();
}
inline const std::string& PaginationInfo::previous_cursor() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.PaginationInfo.previous_cursor)
  return _internal_previous_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaginationInfo::set_previous_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.previous_cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.PaginationInfo.previous_cursor)
}
inline std::string* PaginationInfo::mutable_previous_cursor() {
  std::string* _s = _internal_mutable_previous_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.PaginationInfo.previous_cursor)
  return _s;
}
inline const std::string& PaginationInfo::_internal_previous_cursor() const {
  return _impl_.previous_cursor_.Get();
}
inline void PaginationInfo::_internal_set_previous_cursor(const std::string& value) {
  
  _impl_.previous_cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* PaginationInfo::_internal_mutable_previous_cursor() {
  
  return _impl_.previous_cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* PaginationInfo::release_previous_cursor() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.PaginationInfo.previous_cursor)
  return _impl_.previous_cursor_.Release();
}
inline void PaginationInfo::set_allocated_previous_cursor(std::string* previous_cursor) {
  if (previous_cursor != nullptr) {
    
  } else {
    
  }
  _impl_.previous_cursor_.SetAllocated(previous_cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.previous_cursor_.IsDefault()) {
    _impl_.previous_cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.PaginationInfo.previous_cursor)
}

// bool has_next = 3;
inline void PaginationInfo::clear_has_next() {
  _impl_.has_next_ = false;
}
inline bool PaginationInfo::_internal_has_next() const {
  return _impl_.has_next_;
}
inline bool PaginationInfo::has_next() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.PaginationInfo.has_next)
  return _internal_has_next();
}
inline void PaginationInfo::_internal_set_has_next(bool value) {
  
  _impl_.has_next_ = value;
}
inline void PaginationInfo::set_has_next(bool value) {
  _internal_set_has_next(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.PaginationInfo.has_next)
}

// bool has_previous = 4;
inline void PaginationInfo::clear_has_previous() {
  _impl_.has_previous_ = false;
}
inline bool PaginationInfo::_internal_has_previous() const {
  return _impl_.has_previous_;
}
inline bool PaginationInfo::has_previous() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.PaginationInfo.has_previous)
  return _internal_has_previous();
}
inline void PaginationInfo::_internal_set_has_previous(bool value) {
  
  _impl_.has_previous_ = value;
}
inline void PaginationInfo::set_has_previous(bool value) {
  _internal_set_has_previous(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.PaginationInfo.has_previous)
}

// int32 total_count = 5;
inline void PaginationInfo::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t PaginationInfo::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t PaginationInfo::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.PaginationInfo.total_count)
  return _internal_total_count();
}
inline void PaginationInfo::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void PaginationInfo::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.PaginationInfo.total_count)
}

// -------------------------------------------------------------------

// FollowUserRequest

// string user_id = 1;
inline void FollowUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& FollowUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserRequest.user_id)
}
inline std::string* FollowUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowUserRequest.user_id)
  return _s;
}
inline const std::string& FollowUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void FollowUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void FollowUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowUserRequest.user_id)
}

// string follower_id = 2;
inline void FollowUserRequest::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& FollowUserRequest::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserRequest.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowUserRequest::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserRequest.follower_id)
}
inline std::string* FollowUserRequest::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowUserRequest.follower_id)
  return _s;
}
inline const std::string& FollowUserRequest::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void FollowUserRequest::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowUserRequest::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowUserRequest::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowUserRequest.follower_id)
  return _impl_.follower_id_.Release();
}
inline void FollowUserRequest::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowUserRequest.follower_id)
}

// .sonet.follow.v1.FollowType type = 3;
inline void FollowUserRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::follow::v1::FollowType FollowUserRequest::_internal_type() const {
  return static_cast< ::sonet::follow::v1::FollowType >(_impl_.type_);
}
inline ::sonet::follow::v1::FollowType FollowUserRequest::type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserRequest.type)
  return _internal_type();
}
inline void FollowUserRequest::_internal_set_type(::sonet::follow::v1::FollowType value) {
  
  _impl_.type_ = value;
}
inline void FollowUserRequest::set_type(::sonet::follow::v1::FollowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserRequest.type)
}

// string source = 4;
inline void FollowUserRequest::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& FollowUserRequest::source() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserRequest.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowUserRequest::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserRequest.source)
}
inline std::string* FollowUserRequest::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowUserRequest.source)
  return _s;
}
inline const std::string& FollowUserRequest::_internal_source() const {
  return _impl_.source_.Get();
}
inline void FollowUserRequest::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowUserRequest::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowUserRequest::release_source() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowUserRequest.source)
  return _impl_.source_.Release();
}
inline void FollowUserRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowUserRequest.source)
}

// -------------------------------------------------------------------

// FollowUserResponse

// .sonet.follow.v1.Follow follow = 1;
inline bool FollowUserResponse::_internal_has_follow() const {
  return this != internal_default_instance() && _impl_.follow_ != nullptr;
}
inline bool FollowUserResponse::has_follow() const {
  return _internal_has_follow();
}
inline void FollowUserResponse::clear_follow() {
  if (GetArenaForAllocation() == nullptr && _impl_.follow_ != nullptr) {
    delete _impl_.follow_;
  }
  _impl_.follow_ = nullptr;
}
inline const ::sonet::follow::v1::Follow& FollowUserResponse::_internal_follow() const {
  const ::sonet::follow::v1::Follow* p = _impl_.follow_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::Follow&>(
      ::sonet::follow::v1::_Follow_default_instance_);
}
inline const ::sonet::follow::v1::Follow& FollowUserResponse::follow() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserResponse.follow)
  return _internal_follow();
}
inline void FollowUserResponse::unsafe_arena_set_allocated_follow(
    ::sonet::follow::v1::Follow* follow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.follow_);
  }
  _impl_.follow_ = follow;
  if (follow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.FollowUserResponse.follow)
}
inline ::sonet::follow::v1::Follow* FollowUserResponse::release_follow() {
  
  ::sonet::follow::v1::Follow* temp = _impl_.follow_;
  _impl_.follow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::Follow* FollowUserResponse::unsafe_arena_release_follow() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowUserResponse.follow)
  
  ::sonet::follow::v1::Follow* temp = _impl_.follow_;
  _impl_.follow_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::Follow* FollowUserResponse::_internal_mutable_follow() {
  
  if (_impl_.follow_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::Follow>(GetArenaForAllocation());
    _impl_.follow_ = p;
  }
  return _impl_.follow_;
}
inline ::sonet::follow::v1::Follow* FollowUserResponse::mutable_follow() {
  ::sonet::follow::v1::Follow* _msg = _internal_mutable_follow();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowUserResponse.follow)
  return _msg;
}
inline void FollowUserResponse::set_allocated_follow(::sonet::follow::v1::Follow* follow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.follow_;
  }
  if (follow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(follow);
    if (message_arena != submessage_arena) {
      follow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.follow_ = follow;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowUserResponse.follow)
}

// bool success = 2;
inline void FollowUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool FollowUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool FollowUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserResponse.success)
  return _internal_success();
}
inline void FollowUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void FollowUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserResponse.success)
}

// string message = 3;
inline void FollowUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& FollowUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserResponse.message)
}
inline std::string* FollowUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowUserResponse.message)
  return _s;
}
inline const std::string& FollowUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void FollowUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowUserResponse.message)
  return _impl_.message_.Release();
}
inline void FollowUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowUserResponse.message)
}

// bool was_already_following = 4;
inline void FollowUserResponse::clear_was_already_following() {
  _impl_.was_already_following_ = false;
}
inline bool FollowUserResponse::_internal_was_already_following() const {
  return _impl_.was_already_following_;
}
inline bool FollowUserResponse::was_already_following() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowUserResponse.was_already_following)
  return _internal_was_already_following();
}
inline void FollowUserResponse::_internal_set_was_already_following(bool value) {
  
  _impl_.was_already_following_ = value;
}
inline void FollowUserResponse::set_was_already_following(bool value) {
  _internal_set_was_already_following(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowUserResponse.was_already_following)
}

// -------------------------------------------------------------------

// UnfollowUserRequest

// string user_id = 1;
inline void UnfollowUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UnfollowUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnfollowUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfollowUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnfollowUserRequest.user_id)
}
inline std::string* UnfollowUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnfollowUserRequest.user_id)
  return _s;
}
inline const std::string& UnfollowUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UnfollowUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnfollowUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnfollowUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnfollowUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UnfollowUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnfollowUserRequest.user_id)
}

// string follower_id = 2;
inline void UnfollowUserRequest::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& UnfollowUserRequest::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnfollowUserRequest.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfollowUserRequest::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnfollowUserRequest.follower_id)
}
inline std::string* UnfollowUserRequest::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnfollowUserRequest.follower_id)
  return _s;
}
inline const std::string& UnfollowUserRequest::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void UnfollowUserRequest::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnfollowUserRequest::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnfollowUserRequest::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnfollowUserRequest.follower_id)
  return _impl_.follower_id_.Release();
}
inline void UnfollowUserRequest::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnfollowUserRequest.follower_id)
}

// -------------------------------------------------------------------

// UnfollowUserResponse

// bool success = 1;
inline void UnfollowUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UnfollowUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UnfollowUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnfollowUserResponse.success)
  return _internal_success();
}
inline void UnfollowUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UnfollowUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnfollowUserResponse.success)
}

// string message = 2;
inline void UnfollowUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UnfollowUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnfollowUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfollowUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnfollowUserResponse.message)
}
inline std::string* UnfollowUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnfollowUserResponse.message)
  return _s;
}
inline const std::string& UnfollowUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UnfollowUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UnfollowUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UnfollowUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnfollowUserResponse.message)
  return _impl_.message_.Release();
}
inline void UnfollowUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnfollowUserResponse.message)
}

// bool was_following = 3;
inline void UnfollowUserResponse::clear_was_following() {
  _impl_.was_following_ = false;
}
inline bool UnfollowUserResponse::_internal_was_following() const {
  return _impl_.was_following_;
}
inline bool UnfollowUserResponse::was_following() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnfollowUserResponse.was_following)
  return _internal_was_following();
}
inline void UnfollowUserResponse::_internal_set_was_following(bool value) {
  
  _impl_.was_following_ = value;
}
inline void UnfollowUserResponse::set_was_following(bool value) {
  _internal_set_was_following(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnfollowUserResponse.was_following)
}

// -------------------------------------------------------------------

// BlockUserRequest

// string user_id = 1;
inline void BlockUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& BlockUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserRequest.user_id)
}
inline std::string* BlockUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BlockUserRequest.user_id)
  return _s;
}
inline const std::string& BlockUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void BlockUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.BlockUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void BlockUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.BlockUserRequest.user_id)
}

// string blocker_id = 2;
inline void BlockUserRequest::clear_blocker_id() {
  _impl_.blocker_id_.ClearToEmpty();
}
inline const std::string& BlockUserRequest::blocker_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserRequest.blocker_id)
  return _internal_blocker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockUserRequest::set_blocker_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blocker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserRequest.blocker_id)
}
inline std::string* BlockUserRequest::mutable_blocker_id() {
  std::string* _s = _internal_mutable_blocker_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BlockUserRequest.blocker_id)
  return _s;
}
inline const std::string& BlockUserRequest::_internal_blocker_id() const {
  return _impl_.blocker_id_.Get();
}
inline void BlockUserRequest::_internal_set_blocker_id(const std::string& value) {
  
  _impl_.blocker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockUserRequest::_internal_mutable_blocker_id() {
  
  return _impl_.blocker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockUserRequest::release_blocker_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.BlockUserRequest.blocker_id)
  return _impl_.blocker_id_.Release();
}
inline void BlockUserRequest::set_allocated_blocker_id(std::string* blocker_id) {
  if (blocker_id != nullptr) {
    
  } else {
    
  }
  _impl_.blocker_id_.SetAllocated(blocker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blocker_id_.IsDefault()) {
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.BlockUserRequest.blocker_id)
}

// string reason = 3;
inline void BlockUserRequest::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& BlockUserRequest::reason() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserRequest.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockUserRequest::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserRequest.reason)
}
inline std::string* BlockUserRequest::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BlockUserRequest.reason)
  return _s;
}
inline const std::string& BlockUserRequest::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void BlockUserRequest::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockUserRequest::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockUserRequest::release_reason() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.BlockUserRequest.reason)
  return _impl_.reason_.Release();
}
inline void BlockUserRequest::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.BlockUserRequest.reason)
}

// -------------------------------------------------------------------

// BlockUserResponse

// bool success = 1;
inline void BlockUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool BlockUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool BlockUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserResponse.success)
  return _internal_success();
}
inline void BlockUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void BlockUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserResponse.success)
}

// string message = 2;
inline void BlockUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& BlockUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserResponse.message)
}
inline std::string* BlockUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BlockUserResponse.message)
  return _s;
}
inline const std::string& BlockUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void BlockUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.BlockUserResponse.message)
  return _impl_.message_.Release();
}
inline void BlockUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.BlockUserResponse.message)
}

// bool was_already_blocked = 3;
inline void BlockUserResponse::clear_was_already_blocked() {
  _impl_.was_already_blocked_ = false;
}
inline bool BlockUserResponse::_internal_was_already_blocked() const {
  return _impl_.was_already_blocked_;
}
inline bool BlockUserResponse::was_already_blocked() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserResponse.was_already_blocked)
  return _internal_was_already_blocked();
}
inline void BlockUserResponse::_internal_set_was_already_blocked(bool value) {
  
  _impl_.was_already_blocked_ = value;
}
inline void BlockUserResponse::set_was_already_blocked(bool value) {
  _internal_set_was_already_blocked(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserResponse.was_already_blocked)
}

// bool unfollowed_automatically = 4;
inline void BlockUserResponse::clear_unfollowed_automatically() {
  _impl_.unfollowed_automatically_ = false;
}
inline bool BlockUserResponse::_internal_unfollowed_automatically() const {
  return _impl_.unfollowed_automatically_;
}
inline bool BlockUserResponse::unfollowed_automatically() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BlockUserResponse.unfollowed_automatically)
  return _internal_unfollowed_automatically();
}
inline void BlockUserResponse::_internal_set_unfollowed_automatically(bool value) {
  
  _impl_.unfollowed_automatically_ = value;
}
inline void BlockUserResponse::set_unfollowed_automatically(bool value) {
  _internal_set_unfollowed_automatically(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BlockUserResponse.unfollowed_automatically)
}

// -------------------------------------------------------------------

// UnblockUserRequest

// string user_id = 1;
inline void UnblockUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UnblockUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnblockUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnblockUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnblockUserRequest.user_id)
}
inline std::string* UnblockUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnblockUserRequest.user_id)
  return _s;
}
inline const std::string& UnblockUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UnblockUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnblockUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnblockUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnblockUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UnblockUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnblockUserRequest.user_id)
}

// string blocker_id = 2;
inline void UnblockUserRequest::clear_blocker_id() {
  _impl_.blocker_id_.ClearToEmpty();
}
inline const std::string& UnblockUserRequest::blocker_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnblockUserRequest.blocker_id)
  return _internal_blocker_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnblockUserRequest::set_blocker_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.blocker_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnblockUserRequest.blocker_id)
}
inline std::string* UnblockUserRequest::mutable_blocker_id() {
  std::string* _s = _internal_mutable_blocker_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnblockUserRequest.blocker_id)
  return _s;
}
inline const std::string& UnblockUserRequest::_internal_blocker_id() const {
  return _impl_.blocker_id_.Get();
}
inline void UnblockUserRequest::_internal_set_blocker_id(const std::string& value) {
  
  _impl_.blocker_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnblockUserRequest::_internal_mutable_blocker_id() {
  
  return _impl_.blocker_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnblockUserRequest::release_blocker_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnblockUserRequest.blocker_id)
  return _impl_.blocker_id_.Release();
}
inline void UnblockUserRequest::set_allocated_blocker_id(std::string* blocker_id) {
  if (blocker_id != nullptr) {
    
  } else {
    
  }
  _impl_.blocker_id_.SetAllocated(blocker_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.blocker_id_.IsDefault()) {
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnblockUserRequest.blocker_id)
}

// -------------------------------------------------------------------

// UnblockUserResponse

// bool success = 1;
inline void UnblockUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UnblockUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UnblockUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnblockUserResponse.success)
  return _internal_success();
}
inline void UnblockUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UnblockUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnblockUserResponse.success)
}

// string message = 2;
inline void UnblockUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UnblockUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnblockUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnblockUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnblockUserResponse.message)
}
inline std::string* UnblockUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnblockUserResponse.message)
  return _s;
}
inline const std::string& UnblockUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UnblockUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UnblockUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UnblockUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnblockUserResponse.message)
  return _impl_.message_.Release();
}
inline void UnblockUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnblockUserResponse.message)
}

// bool was_blocked = 3;
inline void UnblockUserResponse::clear_was_blocked() {
  _impl_.was_blocked_ = false;
}
inline bool UnblockUserResponse::_internal_was_blocked() const {
  return _impl_.was_blocked_;
}
inline bool UnblockUserResponse::was_blocked() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnblockUserResponse.was_blocked)
  return _internal_was_blocked();
}
inline void UnblockUserResponse::_internal_set_was_blocked(bool value) {
  
  _impl_.was_blocked_ = value;
}
inline void UnblockUserResponse::set_was_blocked(bool value) {
  _internal_set_was_blocked(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnblockUserResponse.was_blocked)
}

// -------------------------------------------------------------------

// MuteUserRequest

// string user_id = 1;
inline void MuteUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& MuteUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MuteUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserRequest.user_id)
}
inline std::string* MuteUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.MuteUserRequest.user_id)
  return _s;
}
inline const std::string& MuteUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void MuteUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MuteUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MuteUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.MuteUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void MuteUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.MuteUserRequest.user_id)
}

// string muter_id = 2;
inline void MuteUserRequest::clear_muter_id() {
  _impl_.muter_id_.ClearToEmpty();
}
inline const std::string& MuteUserRequest::muter_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserRequest.muter_id)
  return _internal_muter_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MuteUserRequest::set_muter_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.muter_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserRequest.muter_id)
}
inline std::string* MuteUserRequest::mutable_muter_id() {
  std::string* _s = _internal_mutable_muter_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.MuteUserRequest.muter_id)
  return _s;
}
inline const std::string& MuteUserRequest::_internal_muter_id() const {
  return _impl_.muter_id_.Get();
}
inline void MuteUserRequest::_internal_set_muter_id(const std::string& value) {
  
  _impl_.muter_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MuteUserRequest::_internal_mutable_muter_id() {
  
  return _impl_.muter_id_.Mutable(GetArenaForAllocation());
}
inline std::string* MuteUserRequest::release_muter_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.MuteUserRequest.muter_id)
  return _impl_.muter_id_.Release();
}
inline void MuteUserRequest::set_allocated_muter_id(std::string* muter_id) {
  if (muter_id != nullptr) {
    
  } else {
    
  }
  _impl_.muter_id_.SetAllocated(muter_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.muter_id_.IsDefault()) {
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.MuteUserRequest.muter_id)
}

// bool mute_notifications = 3;
inline void MuteUserRequest::clear_mute_notifications() {
  _impl_.mute_notifications_ = false;
}
inline bool MuteUserRequest::_internal_mute_notifications() const {
  return _impl_.mute_notifications_;
}
inline bool MuteUserRequest::mute_notifications() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserRequest.mute_notifications)
  return _internal_mute_notifications();
}
inline void MuteUserRequest::_internal_set_mute_notifications(bool value) {
  
  _impl_.mute_notifications_ = value;
}
inline void MuteUserRequest::set_mute_notifications(bool value) {
  _internal_set_mute_notifications(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserRequest.mute_notifications)
}

// bool mute_content = 4;
inline void MuteUserRequest::clear_mute_content() {
  _impl_.mute_content_ = false;
}
inline bool MuteUserRequest::_internal_mute_content() const {
  return _impl_.mute_content_;
}
inline bool MuteUserRequest::mute_content() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserRequest.mute_content)
  return _internal_mute_content();
}
inline void MuteUserRequest::_internal_set_mute_content(bool value) {
  
  _impl_.mute_content_ = value;
}
inline void MuteUserRequest::set_mute_content(bool value) {
  _internal_set_mute_content(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserRequest.mute_content)
}

// -------------------------------------------------------------------

// MuteUserResponse

// bool success = 1;
inline void MuteUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool MuteUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool MuteUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserResponse.success)
  return _internal_success();
}
inline void MuteUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void MuteUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserResponse.success)
}

// string message = 2;
inline void MuteUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& MuteUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MuteUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserResponse.message)
}
inline std::string* MuteUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.MuteUserResponse.message)
  return _s;
}
inline const std::string& MuteUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void MuteUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* MuteUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* MuteUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.MuteUserResponse.message)
  return _impl_.message_.Release();
}
inline void MuteUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.MuteUserResponse.message)
}

// bool was_already_muted = 3;
inline void MuteUserResponse::clear_was_already_muted() {
  _impl_.was_already_muted_ = false;
}
inline bool MuteUserResponse::_internal_was_already_muted() const {
  return _impl_.was_already_muted_;
}
inline bool MuteUserResponse::was_already_muted() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.MuteUserResponse.was_already_muted)
  return _internal_was_already_muted();
}
inline void MuteUserResponse::_internal_set_was_already_muted(bool value) {
  
  _impl_.was_already_muted_ = value;
}
inline void MuteUserResponse::set_was_already_muted(bool value) {
  _internal_set_was_already_muted(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.MuteUserResponse.was_already_muted)
}

// -------------------------------------------------------------------

// UnmuteUserRequest

// string user_id = 1;
inline void UnmuteUserRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UnmuteUserRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnmuteUserRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnmuteUserRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnmuteUserRequest.user_id)
}
inline std::string* UnmuteUserRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnmuteUserRequest.user_id)
  return _s;
}
inline const std::string& UnmuteUserRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UnmuteUserRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnmuteUserRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnmuteUserRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnmuteUserRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void UnmuteUserRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnmuteUserRequest.user_id)
}

// string muter_id = 2;
inline void UnmuteUserRequest::clear_muter_id() {
  _impl_.muter_id_.ClearToEmpty();
}
inline const std::string& UnmuteUserRequest::muter_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnmuteUserRequest.muter_id)
  return _internal_muter_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnmuteUserRequest::set_muter_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.muter_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnmuteUserRequest.muter_id)
}
inline std::string* UnmuteUserRequest::mutable_muter_id() {
  std::string* _s = _internal_mutable_muter_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnmuteUserRequest.muter_id)
  return _s;
}
inline const std::string& UnmuteUserRequest::_internal_muter_id() const {
  return _impl_.muter_id_.Get();
}
inline void UnmuteUserRequest::_internal_set_muter_id(const std::string& value) {
  
  _impl_.muter_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UnmuteUserRequest::_internal_mutable_muter_id() {
  
  return _impl_.muter_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UnmuteUserRequest::release_muter_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnmuteUserRequest.muter_id)
  return _impl_.muter_id_.Release();
}
inline void UnmuteUserRequest::set_allocated_muter_id(std::string* muter_id) {
  if (muter_id != nullptr) {
    
  } else {
    
  }
  _impl_.muter_id_.SetAllocated(muter_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.muter_id_.IsDefault()) {
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnmuteUserRequest.muter_id)
}

// -------------------------------------------------------------------

// UnmuteUserResponse

// bool success = 1;
inline void UnmuteUserResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool UnmuteUserResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool UnmuteUserResponse::success() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnmuteUserResponse.success)
  return _internal_success();
}
inline void UnmuteUserResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void UnmuteUserResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnmuteUserResponse.success)
}

// string message = 2;
inline void UnmuteUserResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& UnmuteUserResponse::message() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnmuteUserResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnmuteUserResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnmuteUserResponse.message)
}
inline std::string* UnmuteUserResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.UnmuteUserResponse.message)
  return _s;
}
inline const std::string& UnmuteUserResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UnmuteUserResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UnmuteUserResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UnmuteUserResponse::release_message() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.UnmuteUserResponse.message)
  return _impl_.message_.Release();
}
inline void UnmuteUserResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.UnmuteUserResponse.message)
}

// bool was_muted = 3;
inline void UnmuteUserResponse::clear_was_muted() {
  _impl_.was_muted_ = false;
}
inline bool UnmuteUserResponse::_internal_was_muted() const {
  return _impl_.was_muted_;
}
inline bool UnmuteUserResponse::was_muted() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.UnmuteUserResponse.was_muted)
  return _internal_was_muted();
}
inline void UnmuteUserResponse::_internal_set_was_muted(bool value) {
  
  _impl_.was_muted_ = value;
}
inline void UnmuteUserResponse::set_was_muted(bool value) {
  _internal_set_was_muted(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.UnmuteUserResponse.was_muted)
}

// -------------------------------------------------------------------

// GetRelationshipRequest

// string user1_id = 1;
inline void GetRelationshipRequest::clear_user1_id() {
  _impl_.user1_id_.ClearToEmpty();
}
inline const std::string& GetRelationshipRequest::user1_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRelationshipRequest.user1_id)
  return _internal_user1_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRelationshipRequest::set_user1_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user1_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRelationshipRequest.user1_id)
}
inline std::string* GetRelationshipRequest::mutable_user1_id() {
  std::string* _s = _internal_mutable_user1_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRelationshipRequest.user1_id)
  return _s;
}
inline const std::string& GetRelationshipRequest::_internal_user1_id() const {
  return _impl_.user1_id_.Get();
}
inline void GetRelationshipRequest::_internal_set_user1_id(const std::string& value) {
  
  _impl_.user1_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRelationshipRequest::_internal_mutable_user1_id() {
  
  return _impl_.user1_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRelationshipRequest::release_user1_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRelationshipRequest.user1_id)
  return _impl_.user1_id_.Release();
}
inline void GetRelationshipRequest::set_allocated_user1_id(std::string* user1_id) {
  if (user1_id != nullptr) {
    
  } else {
    
  }
  _impl_.user1_id_.SetAllocated(user1_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user1_id_.IsDefault()) {
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRelationshipRequest.user1_id)
}

// string user2_id = 2;
inline void GetRelationshipRequest::clear_user2_id() {
  _impl_.user2_id_.ClearToEmpty();
}
inline const std::string& GetRelationshipRequest::user2_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRelationshipRequest.user2_id)
  return _internal_user2_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRelationshipRequest::set_user2_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user2_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRelationshipRequest.user2_id)
}
inline std::string* GetRelationshipRequest::mutable_user2_id() {
  std::string* _s = _internal_mutable_user2_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRelationshipRequest.user2_id)
  return _s;
}
inline const std::string& GetRelationshipRequest::_internal_user2_id() const {
  return _impl_.user2_id_.Get();
}
inline void GetRelationshipRequest::_internal_set_user2_id(const std::string& value) {
  
  _impl_.user2_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRelationshipRequest::_internal_mutable_user2_id() {
  
  return _impl_.user2_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRelationshipRequest::release_user2_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRelationshipRequest.user2_id)
  return _impl_.user2_id_.Release();
}
inline void GetRelationshipRequest::set_allocated_user2_id(std::string* user2_id) {
  if (user2_id != nullptr) {
    
  } else {
    
  }
  _impl_.user2_id_.SetAllocated(user2_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user2_id_.IsDefault()) {
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRelationshipRequest.user2_id)
}

// -------------------------------------------------------------------

// GetRelationshipResponse

// .sonet.follow.v1.Relationship relationship = 1;
inline bool GetRelationshipResponse::_internal_has_relationship() const {
  return this != internal_default_instance() && _impl_.relationship_ != nullptr;
}
inline bool GetRelationshipResponse::has_relationship() const {
  return _internal_has_relationship();
}
inline void GetRelationshipResponse::clear_relationship() {
  if (GetArenaForAllocation() == nullptr && _impl_.relationship_ != nullptr) {
    delete _impl_.relationship_;
  }
  _impl_.relationship_ = nullptr;
}
inline const ::sonet::follow::v1::Relationship& GetRelationshipResponse::_internal_relationship() const {
  const ::sonet::follow::v1::Relationship* p = _impl_.relationship_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::Relationship&>(
      ::sonet::follow::v1::_Relationship_default_instance_);
}
inline const ::sonet::follow::v1::Relationship& GetRelationshipResponse::relationship() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRelationshipResponse.relationship)
  return _internal_relationship();
}
inline void GetRelationshipResponse::unsafe_arena_set_allocated_relationship(
    ::sonet::follow::v1::Relationship* relationship) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relationship_);
  }
  _impl_.relationship_ = relationship;
  if (relationship) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetRelationshipResponse.relationship)
}
inline ::sonet::follow::v1::Relationship* GetRelationshipResponse::release_relationship() {
  
  ::sonet::follow::v1::Relationship* temp = _impl_.relationship_;
  _impl_.relationship_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::Relationship* GetRelationshipResponse::unsafe_arena_release_relationship() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRelationshipResponse.relationship)
  
  ::sonet::follow::v1::Relationship* temp = _impl_.relationship_;
  _impl_.relationship_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::Relationship* GetRelationshipResponse::_internal_mutable_relationship() {
  
  if (_impl_.relationship_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::Relationship>(GetArenaForAllocation());
    _impl_.relationship_ = p;
  }
  return _impl_.relationship_;
}
inline ::sonet::follow::v1::Relationship* GetRelationshipResponse::mutable_relationship() {
  ::sonet::follow::v1::Relationship* _msg = _internal_mutable_relationship();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRelationshipResponse.relationship)
  return _msg;
}
inline void GetRelationshipResponse::set_allocated_relationship(::sonet::follow::v1::Relationship* relationship) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.relationship_;
  }
  if (relationship) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(relationship);
    if (message_arena != submessage_arena) {
      relationship = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationship, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relationship_ = relationship;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRelationshipResponse.relationship)
}

// bool found = 2;
inline void GetRelationshipResponse::clear_found() {
  _impl_.found_ = false;
}
inline bool GetRelationshipResponse::_internal_found() const {
  return _impl_.found_;
}
inline bool GetRelationshipResponse::found() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRelationshipResponse.found)
  return _internal_found();
}
inline void GetRelationshipResponse::_internal_set_found(bool value) {
  
  _impl_.found_ = value;
}
inline void GetRelationshipResponse::set_found(bool value) {
  _internal_set_found(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRelationshipResponse.found)
}

// -------------------------------------------------------------------

// CheckRelationshipRequest

// string follower_id = 1;
inline void CheckRelationshipRequest::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& CheckRelationshipRequest::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRelationshipRequest.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRelationshipRequest::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRelationshipRequest.follower_id)
}
inline std::string* CheckRelationshipRequest::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRelationshipRequest.follower_id)
  return _s;
}
inline const std::string& CheckRelationshipRequest::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void CheckRelationshipRequest::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRelationshipRequest.follower_id)
  return _impl_.follower_id_.Release();
}
inline void CheckRelationshipRequest::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRelationshipRequest.follower_id)
}

// string following_id = 2;
inline void CheckRelationshipRequest::clear_following_id() {
  _impl_.following_id_.ClearToEmpty();
}
inline const std::string& CheckRelationshipRequest::following_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRelationshipRequest.following_id)
  return _internal_following_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRelationshipRequest::set_following_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.following_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRelationshipRequest.following_id)
}
inline std::string* CheckRelationshipRequest::mutable_following_id() {
  std::string* _s = _internal_mutable_following_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRelationshipRequest.following_id)
  return _s;
}
inline const std::string& CheckRelationshipRequest::_internal_following_id() const {
  return _impl_.following_id_.Get();
}
inline void CheckRelationshipRequest::_internal_set_following_id(const std::string& value) {
  
  _impl_.following_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::_internal_mutable_following_id() {
  
  return _impl_.following_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::release_following_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRelationshipRequest.following_id)
  return _impl_.following_id_.Release();
}
inline void CheckRelationshipRequest::set_allocated_following_id(std::string* following_id) {
  if (following_id != nullptr) {
    
  } else {
    
  }
  _impl_.following_id_.SetAllocated(following_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.following_id_.IsDefault()) {
    _impl_.following_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRelationshipRequest.following_id)
}

// string relationship_type = 3;
inline void CheckRelationshipRequest::clear_relationship_type() {
  _impl_.relationship_type_.ClearToEmpty();
}
inline const std::string& CheckRelationshipRequest::relationship_type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRelationshipRequest.relationship_type)
  return _internal_relationship_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRelationshipRequest::set_relationship_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.relationship_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRelationshipRequest.relationship_type)
}
inline std::string* CheckRelationshipRequest::mutable_relationship_type() {
  std::string* _s = _internal_mutable_relationship_type();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRelationshipRequest.relationship_type)
  return _s;
}
inline const std::string& CheckRelationshipRequest::_internal_relationship_type() const {
  return _impl_.relationship_type_.Get();
}
inline void CheckRelationshipRequest::_internal_set_relationship_type(const std::string& value) {
  
  _impl_.relationship_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::_internal_mutable_relationship_type() {
  
  return _impl_.relationship_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRelationshipRequest::release_relationship_type() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRelationshipRequest.relationship_type)
  return _impl_.relationship_type_.Release();
}
inline void CheckRelationshipRequest::set_allocated_relationship_type(std::string* relationship_type) {
  if (relationship_type != nullptr) {
    
  } else {
    
  }
  _impl_.relationship_type_.SetAllocated(relationship_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relationship_type_.IsDefault()) {
    _impl_.relationship_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRelationshipRequest.relationship_type)
}

// -------------------------------------------------------------------

// CheckRelationshipResponse

// bool exists = 1;
inline void CheckRelationshipResponse::clear_exists() {
  _impl_.exists_ = false;
}
inline bool CheckRelationshipResponse::_internal_exists() const {
  return _impl_.exists_;
}
inline bool CheckRelationshipResponse::exists() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRelationshipResponse.exists)
  return _internal_exists();
}
inline void CheckRelationshipResponse::_internal_set_exists(bool value) {
  
  _impl_.exists_ = value;
}
inline void CheckRelationshipResponse::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRelationshipResponse.exists)
}

// .google.protobuf.Timestamp since = 2;
inline bool CheckRelationshipResponse::_internal_has_since() const {
  return this != internal_default_instance() && _impl_.since_ != nullptr;
}
inline bool CheckRelationshipResponse::has_since() const {
  return _internal_has_since();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CheckRelationshipResponse::_internal_since() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.since_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CheckRelationshipResponse::since() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRelationshipResponse.since)
  return _internal_since();
}
inline void CheckRelationshipResponse::unsafe_arena_set_allocated_since(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* since) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.since_);
  }
  _impl_.since_ = since;
  if (since) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.CheckRelationshipResponse.since)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRelationshipResponse::release_since() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.since_;
  _impl_.since_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRelationshipResponse::unsafe_arena_release_since() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRelationshipResponse.since)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.since_;
  _impl_.since_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRelationshipResponse::_internal_mutable_since() {
  
  if (_impl_.since_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.since_ = p;
  }
  return _impl_.since_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRelationshipResponse::mutable_since() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_since();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRelationshipResponse.since)
  return _msg;
}
inline void CheckRelationshipResponse::set_allocated_since(::PROTOBUF_NAMESPACE_ID::Timestamp* since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.since_);
  }
  if (since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(since));
    if (message_arena != submessage_arena) {
      since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, since, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.since_ = since;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRelationshipResponse.since)
}

// -------------------------------------------------------------------

// GetBulkRelationshipsRequest

// string user_id = 1;
inline void GetBulkRelationshipsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetBulkRelationshipsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetBulkRelationshipsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetBulkRelationshipsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetBulkRelationshipsRequest.user_id)
}
inline std::string* GetBulkRelationshipsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetBulkRelationshipsRequest.user_id)
  return _s;
}
inline const std::string& GetBulkRelationshipsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetBulkRelationshipsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBulkRelationshipsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetBulkRelationshipsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetBulkRelationshipsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetBulkRelationshipsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetBulkRelationshipsRequest.user_id)
}

// repeated string target_user_ids = 2;
inline int GetBulkRelationshipsRequest::_internal_target_user_ids_size() const {
  return _impl_.target_user_ids_.size();
}
inline int GetBulkRelationshipsRequest::target_user_ids_size() const {
  return _internal_target_user_ids_size();
}
inline void GetBulkRelationshipsRequest::clear_target_user_ids() {
  _impl_.target_user_ids_.Clear();
}
inline std::string* GetBulkRelationshipsRequest::add_target_user_ids() {
  std::string* _s = _internal_add_target_user_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
  return _s;
}
inline const std::string& GetBulkRelationshipsRequest::_internal_target_user_ids(int index) const {
  return _impl_.target_user_ids_.Get(index);
}
inline const std::string& GetBulkRelationshipsRequest::target_user_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
  return _internal_target_user_ids(index);
}
inline std::string* GetBulkRelationshipsRequest::mutable_target_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
  return _impl_.target_user_ids_.Mutable(index);
}
inline void GetBulkRelationshipsRequest::set_target_user_ids(int index, const std::string& value) {
  _impl_.target_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::set_target_user_ids(int index, std::string&& value) {
  _impl_.target_user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::set_target_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.target_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::set_target_user_ids(int index, const char* value, size_t size) {
  _impl_.target_user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline std::string* GetBulkRelationshipsRequest::_internal_add_target_user_ids() {
  return _impl_.target_user_ids_.Add();
}
inline void GetBulkRelationshipsRequest::add_target_user_ids(const std::string& value) {
  _impl_.target_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::add_target_user_ids(std::string&& value) {
  _impl_.target_user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::add_target_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.target_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline void GetBulkRelationshipsRequest::add_target_user_ids(const char* value, size_t size) {
  _impl_.target_user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBulkRelationshipsRequest::target_user_ids() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
  return _impl_.target_user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBulkRelationshipsRequest::mutable_target_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids)
  return &_impl_.target_user_ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetBulkRelationshipsResponse

// map<string, .sonet.follow.v1.Relationship> relationships = 1;
inline int GetBulkRelationshipsResponse::_internal_relationships_size() const {
  return _impl_.relationships_.size();
}
inline int GetBulkRelationshipsResponse::relationships_size() const {
  return _internal_relationships_size();
}
inline void GetBulkRelationshipsResponse::clear_relationships() {
  _impl_.relationships_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >&
GetBulkRelationshipsResponse::_internal_relationships() const {
  return _impl_.relationships_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >&
GetBulkRelationshipsResponse::relationships() const {
  // @@protoc_insertion_point(field_map:sonet.follow.v1.GetBulkRelationshipsResponse.relationships)
  return _internal_relationships();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >*
GetBulkRelationshipsResponse::_internal_mutable_relationships() {
  return _impl_.relationships_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >*
GetBulkRelationshipsResponse::mutable_relationships() {
  // @@protoc_insertion_point(field_mutable_map:sonet.follow.v1.GetBulkRelationshipsResponse.relationships)
  return _internal_mutable_relationships();
}

// repeated string not_found = 2;
inline int GetBulkRelationshipsResponse::_internal_not_found_size() const {
  return _impl_.not_found_.size();
}
inline int GetBulkRelationshipsResponse::not_found_size() const {
  return _internal_not_found_size();
}
inline void GetBulkRelationshipsResponse::clear_not_found() {
  _impl_.not_found_.Clear();
}
inline std::string* GetBulkRelationshipsResponse::add_not_found() {
  std::string* _s = _internal_add_not_found();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
  return _s;
}
inline const std::string& GetBulkRelationshipsResponse::_internal_not_found(int index) const {
  return _impl_.not_found_.Get(index);
}
inline const std::string& GetBulkRelationshipsResponse::not_found(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
  return _internal_not_found(index);
}
inline std::string* GetBulkRelationshipsResponse::mutable_not_found(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
  return _impl_.not_found_.Mutable(index);
}
inline void GetBulkRelationshipsResponse::set_not_found(int index, const std::string& value) {
  _impl_.not_found_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::set_not_found(int index, std::string&& value) {
  _impl_.not_found_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::set_not_found(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.not_found_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::set_not_found(int index, const char* value, size_t size) {
  _impl_.not_found_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline std::string* GetBulkRelationshipsResponse::_internal_add_not_found() {
  return _impl_.not_found_.Add();
}
inline void GetBulkRelationshipsResponse::add_not_found(const std::string& value) {
  _impl_.not_found_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::add_not_found(std::string&& value) {
  _impl_.not_found_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::add_not_found(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.not_found_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline void GetBulkRelationshipsResponse::add_not_found(const char* value, size_t size) {
  _impl_.not_found_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetBulkRelationshipsResponse::not_found() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
  return _impl_.not_found_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetBulkRelationshipsResponse::mutable_not_found() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetBulkRelationshipsResponse.not_found)
  return &_impl_.not_found_;
}

// -------------------------------------------------------------------

// BulkFollowRequest

// string follower_id = 1;
inline void BulkFollowRequest::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& BulkFollowRequest::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowRequest.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BulkFollowRequest::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowRequest.follower_id)
}
inline std::string* BulkFollowRequest::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowRequest.follower_id)
  return _s;
}
inline const std::string& BulkFollowRequest::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void BulkFollowRequest::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BulkFollowRequest::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BulkFollowRequest::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.BulkFollowRequest.follower_id)
  return _impl_.follower_id_.Release();
}
inline void BulkFollowRequest::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.BulkFollowRequest.follower_id)
}

// repeated string user_ids = 2;
inline int BulkFollowRequest::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int BulkFollowRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void BulkFollowRequest::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline std::string* BulkFollowRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowRequest.user_ids)
  return _s;
}
inline const std::string& BulkFollowRequest::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline const std::string& BulkFollowRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* BulkFollowRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowRequest.user_ids)
  return _impl_.user_ids_.Mutable(index);
}
inline void BulkFollowRequest::set_user_ids(int index, const std::string& value) {
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::set_user_ids(int index, std::string&& value) {
  _impl_.user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::set_user_ids(int index, const char* value, size_t size) {
  _impl_.user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline std::string* BulkFollowRequest::_internal_add_user_ids() {
  return _impl_.user_ids_.Add();
}
inline void BulkFollowRequest::add_user_ids(const std::string& value) {
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::add_user_ids(std::string&& value) {
  _impl_.user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline void BulkFollowRequest::add_user_ids(const char* value, size_t size) {
  _impl_.user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowRequest.user_ids)
  return _impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowRequest.user_ids)
  return &_impl_.user_ids_;
}

// .sonet.follow.v1.FollowType type = 3;
inline void BulkFollowRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::sonet::follow::v1::FollowType BulkFollowRequest::_internal_type() const {
  return static_cast< ::sonet::follow::v1::FollowType >(_impl_.type_);
}
inline ::sonet::follow::v1::FollowType BulkFollowRequest::type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowRequest.type)
  return _internal_type();
}
inline void BulkFollowRequest::_internal_set_type(::sonet::follow::v1::FollowType value) {
  
  _impl_.type_ = value;
}
inline void BulkFollowRequest::set_type(::sonet::follow::v1::FollowType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowRequest.type)
}

// -------------------------------------------------------------------

// BulkFollowResponse

// repeated string successful = 1;
inline int BulkFollowResponse::_internal_successful_size() const {
  return _impl_.successful_.size();
}
inline int BulkFollowResponse::successful_size() const {
  return _internal_successful_size();
}
inline void BulkFollowResponse::clear_successful() {
  _impl_.successful_.Clear();
}
inline std::string* BulkFollowResponse::add_successful() {
  std::string* _s = _internal_add_successful();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowResponse.successful)
  return _s;
}
inline const std::string& BulkFollowResponse::_internal_successful(int index) const {
  return _impl_.successful_.Get(index);
}
inline const std::string& BulkFollowResponse::successful(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.successful)
  return _internal_successful(index);
}
inline std::string* BulkFollowResponse::mutable_successful(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowResponse.successful)
  return _impl_.successful_.Mutable(index);
}
inline void BulkFollowResponse::set_successful(int index, const std::string& value) {
  _impl_.successful_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::set_successful(int index, std::string&& value) {
  _impl_.successful_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::set_successful(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.successful_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::set_successful(int index, const char* value, size_t size) {
  _impl_.successful_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowResponse.successful)
}
inline std::string* BulkFollowResponse::_internal_add_successful() {
  return _impl_.successful_.Add();
}
inline void BulkFollowResponse::add_successful(const std::string& value) {
  _impl_.successful_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::add_successful(std::string&& value) {
  _impl_.successful_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::add_successful(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.successful_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowResponse.successful)
}
inline void BulkFollowResponse::add_successful(const char* value, size_t size) {
  _impl_.successful_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowResponse.successful)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowResponse::successful() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowResponse.successful)
  return _impl_.successful_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowResponse::mutable_successful() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowResponse.successful)
  return &_impl_.successful_;
}

// repeated string failed = 2;
inline int BulkFollowResponse::_internal_failed_size() const {
  return _impl_.failed_.size();
}
inline int BulkFollowResponse::failed_size() const {
  return _internal_failed_size();
}
inline void BulkFollowResponse::clear_failed() {
  _impl_.failed_.Clear();
}
inline std::string* BulkFollowResponse::add_failed() {
  std::string* _s = _internal_add_failed();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowResponse.failed)
  return _s;
}
inline const std::string& BulkFollowResponse::_internal_failed(int index) const {
  return _impl_.failed_.Get(index);
}
inline const std::string& BulkFollowResponse::failed(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.failed)
  return _internal_failed(index);
}
inline std::string* BulkFollowResponse::mutable_failed(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowResponse.failed)
  return _impl_.failed_.Mutable(index);
}
inline void BulkFollowResponse::set_failed(int index, const std::string& value) {
  _impl_.failed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::set_failed(int index, std::string&& value) {
  _impl_.failed_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::set_failed(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::set_failed(int index, const char* value, size_t size) {
  _impl_.failed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowResponse.failed)
}
inline std::string* BulkFollowResponse::_internal_add_failed() {
  return _impl_.failed_.Add();
}
inline void BulkFollowResponse::add_failed(const std::string& value) {
  _impl_.failed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::add_failed(std::string&& value) {
  _impl_.failed_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::add_failed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.failed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowResponse.failed)
}
inline void BulkFollowResponse::add_failed(const char* value, size_t size) {
  _impl_.failed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowResponse.failed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowResponse::failed() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowResponse.failed)
  return _impl_.failed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowResponse::mutable_failed() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowResponse.failed)
  return &_impl_.failed_;
}

// repeated string already_following = 3;
inline int BulkFollowResponse::_internal_already_following_size() const {
  return _impl_.already_following_.size();
}
inline int BulkFollowResponse::already_following_size() const {
  return _internal_already_following_size();
}
inline void BulkFollowResponse::clear_already_following() {
  _impl_.already_following_.Clear();
}
inline std::string* BulkFollowResponse::add_already_following() {
  std::string* _s = _internal_add_already_following();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowResponse.already_following)
  return _s;
}
inline const std::string& BulkFollowResponse::_internal_already_following(int index) const {
  return _impl_.already_following_.Get(index);
}
inline const std::string& BulkFollowResponse::already_following(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.already_following)
  return _internal_already_following(index);
}
inline std::string* BulkFollowResponse::mutable_already_following(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowResponse.already_following)
  return _impl_.already_following_.Mutable(index);
}
inline void BulkFollowResponse::set_already_following(int index, const std::string& value) {
  _impl_.already_following_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::set_already_following(int index, std::string&& value) {
  _impl_.already_following_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::set_already_following(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.already_following_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::set_already_following(int index, const char* value, size_t size) {
  _impl_.already_following_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline std::string* BulkFollowResponse::_internal_add_already_following() {
  return _impl_.already_following_.Add();
}
inline void BulkFollowResponse::add_already_following(const std::string& value) {
  _impl_.already_following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::add_already_following(std::string&& value) {
  _impl_.already_following_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::add_already_following(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.already_following_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline void BulkFollowResponse::add_already_following(const char* value, size_t size) {
  _impl_.already_following_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowResponse.already_following)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowResponse::already_following() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowResponse.already_following)
  return _impl_.already_following_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowResponse::mutable_already_following() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowResponse.already_following)
  return &_impl_.already_following_;
}

// repeated string blocked = 4;
inline int BulkFollowResponse::_internal_blocked_size() const {
  return _impl_.blocked_.size();
}
inline int BulkFollowResponse::blocked_size() const {
  return _internal_blocked_size();
}
inline void BulkFollowResponse::clear_blocked() {
  _impl_.blocked_.Clear();
}
inline std::string* BulkFollowResponse::add_blocked() {
  std::string* _s = _internal_add_blocked();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowResponse.blocked)
  return _s;
}
inline const std::string& BulkFollowResponse::_internal_blocked(int index) const {
  return _impl_.blocked_.Get(index);
}
inline const std::string& BulkFollowResponse::blocked(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.blocked)
  return _internal_blocked(index);
}
inline std::string* BulkFollowResponse::mutable_blocked(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowResponse.blocked)
  return _impl_.blocked_.Mutable(index);
}
inline void BulkFollowResponse::set_blocked(int index, const std::string& value) {
  _impl_.blocked_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::set_blocked(int index, std::string&& value) {
  _impl_.blocked_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::set_blocked(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocked_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::set_blocked(int index, const char* value, size_t size) {
  _impl_.blocked_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline std::string* BulkFollowResponse::_internal_add_blocked() {
  return _impl_.blocked_.Add();
}
inline void BulkFollowResponse::add_blocked(const std::string& value) {
  _impl_.blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::add_blocked(std::string&& value) {
  _impl_.blocked_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::add_blocked(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.blocked_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline void BulkFollowResponse::add_blocked(const char* value, size_t size) {
  _impl_.blocked_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowResponse.blocked)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowResponse::blocked() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowResponse.blocked)
  return _impl_.blocked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowResponse::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowResponse.blocked)
  return &_impl_.blocked_;
}

// repeated string pending = 5;
inline int BulkFollowResponse::_internal_pending_size() const {
  return _impl_.pending_.size();
}
inline int BulkFollowResponse::pending_size() const {
  return _internal_pending_size();
}
inline void BulkFollowResponse::clear_pending() {
  _impl_.pending_.Clear();
}
inline std::string* BulkFollowResponse::add_pending() {
  std::string* _s = _internal_add_pending();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.BulkFollowResponse.pending)
  return _s;
}
inline const std::string& BulkFollowResponse::_internal_pending(int index) const {
  return _impl_.pending_.Get(index);
}
inline const std::string& BulkFollowResponse::pending(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.pending)
  return _internal_pending(index);
}
inline std::string* BulkFollowResponse::mutable_pending(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.BulkFollowResponse.pending)
  return _impl_.pending_.Mutable(index);
}
inline void BulkFollowResponse::set_pending(int index, const std::string& value) {
  _impl_.pending_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::set_pending(int index, std::string&& value) {
  _impl_.pending_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::set_pending(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pending_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::set_pending(int index, const char* value, size_t size) {
  _impl_.pending_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.BulkFollowResponse.pending)
}
inline std::string* BulkFollowResponse::_internal_add_pending() {
  return _impl_.pending_.Add();
}
inline void BulkFollowResponse::add_pending(const std::string& value) {
  _impl_.pending_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::add_pending(std::string&& value) {
  _impl_.pending_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::add_pending(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.pending_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.BulkFollowResponse.pending)
}
inline void BulkFollowResponse::add_pending(const char* value, size_t size) {
  _impl_.pending_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.BulkFollowResponse.pending)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BulkFollowResponse::pending() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.BulkFollowResponse.pending)
  return _impl_.pending_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BulkFollowResponse::mutable_pending() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.BulkFollowResponse.pending)
  return &_impl_.pending_;
}

// int32 total_requested = 6;
inline void BulkFollowResponse::clear_total_requested() {
  _impl_.total_requested_ = 0;
}
inline int32_t BulkFollowResponse::_internal_total_requested() const {
  return _impl_.total_requested_;
}
inline int32_t BulkFollowResponse::total_requested() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.total_requested)
  return _internal_total_requested();
}
inline void BulkFollowResponse::_internal_set_total_requested(int32_t value) {
  
  _impl_.total_requested_ = value;
}
inline void BulkFollowResponse::set_total_requested(int32_t value) {
  _internal_set_total_requested(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.total_requested)
}

// int32 total_successful = 7;
inline void BulkFollowResponse::clear_total_successful() {
  _impl_.total_successful_ = 0;
}
inline int32_t BulkFollowResponse::_internal_total_successful() const {
  return _impl_.total_successful_;
}
inline int32_t BulkFollowResponse::total_successful() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.BulkFollowResponse.total_successful)
  return _internal_total_successful();
}
inline void BulkFollowResponse::_internal_set_total_successful(int32_t value) {
  
  _impl_.total_successful_ = value;
}
inline void BulkFollowResponse::set_total_successful(int32_t value) {
  _internal_set_total_successful(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.BulkFollowResponse.total_successful)
}

// -------------------------------------------------------------------

// GetFollowersRequest

// string user_id = 1;
inline void GetFollowersRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetFollowersRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowersRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersRequest.user_id)
}
inline std::string* GetFollowersRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowersRequest.user_id)
  return _s;
}
inline const std::string& GetFollowersRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetFollowersRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowersRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetFollowersRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowersRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetFollowersRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetFollowersRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowersRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersRequest.requesting_user_id)
}
inline std::string* GetFollowersRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowersRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetFollowersRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetFollowersRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowersRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetFollowersRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowersRequest.requesting_user_id)
}

// int32 limit = 3;
inline void GetFollowersRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetFollowersRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetFollowersRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersRequest.limit)
  return _internal_limit();
}
inline void GetFollowersRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetFollowersRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersRequest.limit)
}

// string cursor = 4;
inline void GetFollowersRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetFollowersRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowersRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersRequest.cursor)
}
inline std::string* GetFollowersRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowersRequest.cursor)
  return _s;
}
inline const std::string& GetFollowersRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetFollowersRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowersRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowersRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetFollowersRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowersRequest.cursor)
}

// bool include_analytics = 5;
inline void GetFollowersRequest::clear_include_analytics() {
  _impl_.include_analytics_ = false;
}
inline bool GetFollowersRequest::_internal_include_analytics() const {
  return _impl_.include_analytics_;
}
inline bool GetFollowersRequest::include_analytics() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersRequest.include_analytics)
  return _internal_include_analytics();
}
inline void GetFollowersRequest::_internal_set_include_analytics(bool value) {
  
  _impl_.include_analytics_ = value;
}
inline void GetFollowersRequest::set_include_analytics(bool value) {
  _internal_set_include_analytics(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersRequest.include_analytics)
}

// -------------------------------------------------------------------

// GetFollowersResponse

// repeated .sonet.follow.v1.UserInfo followers = 1;
inline int GetFollowersResponse::_internal_followers_size() const {
  return _impl_.followers_.size();
}
inline int GetFollowersResponse::followers_size() const {
  return _internal_followers_size();
}
inline void GetFollowersResponse::clear_followers() {
  _impl_.followers_.Clear();
}
inline ::sonet::follow::v1::UserInfo* GetFollowersResponse::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowersResponse.followers)
  return _impl_.followers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
GetFollowersResponse::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetFollowersResponse.followers)
  return &_impl_.followers_;
}
inline const ::sonet::follow::v1::UserInfo& GetFollowersResponse::_internal_followers(int index) const {
  return _impl_.followers_.Get(index);
}
inline const ::sonet::follow::v1::UserInfo& GetFollowersResponse::followers(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersResponse.followers)
  return _internal_followers(index);
}
inline ::sonet::follow::v1::UserInfo* GetFollowersResponse::_internal_add_followers() {
  return _impl_.followers_.Add();
}
inline ::sonet::follow::v1::UserInfo* GetFollowersResponse::add_followers() {
  ::sonet::follow::v1::UserInfo* _add = _internal_add_followers();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetFollowersResponse.followers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
GetFollowersResponse::followers() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetFollowersResponse.followers)
  return _impl_.followers_;
}

// .sonet.follow.v1.PaginationInfo pagination = 2;
inline bool GetFollowersResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetFollowersResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline void GetFollowersResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
inline const ::sonet::follow::v1::PaginationInfo& GetFollowersResponse::_internal_pagination() const {
  const ::sonet::follow::v1::PaginationInfo* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::PaginationInfo&>(
      ::sonet::follow::v1::_PaginationInfo_default_instance_);
}
inline const ::sonet::follow::v1::PaginationInfo& GetFollowersResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersResponse.pagination)
  return _internal_pagination();
}
inline void GetFollowersResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::follow::v1::PaginationInfo* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetFollowersResponse.pagination)
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowersResponse::release_pagination() {
  
  ::sonet::follow::v1::PaginationInfo* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowersResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowersResponse.pagination)
  
  ::sonet::follow::v1::PaginationInfo* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowersResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::PaginationInfo>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowersResponse::mutable_pagination() {
  ::sonet::follow::v1::PaginationInfo* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowersResponse.pagination)
  return _msg;
}
inline void GetFollowersResponse::set_allocated_pagination(::sonet::follow::v1::PaginationInfo* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowersResponse.pagination)
}

// int32 total_count = 3;
inline void GetFollowersResponse::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t GetFollowersResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t GetFollowersResponse::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowersResponse.total_count)
  return _internal_total_count();
}
inline void GetFollowersResponse::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void GetFollowersResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowersResponse.total_count)
}

// -------------------------------------------------------------------

// GetFollowingRequest

// string user_id = 1;
inline void GetFollowingRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetFollowingRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowingRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingRequest.user_id)
}
inline std::string* GetFollowingRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowingRequest.user_id)
  return _s;
}
inline const std::string& GetFollowingRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetFollowingRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowingRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetFollowingRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowingRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetFollowingRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetFollowingRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowingRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingRequest.requesting_user_id)
}
inline std::string* GetFollowingRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowingRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetFollowingRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetFollowingRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowingRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetFollowingRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowingRequest.requesting_user_id)
}

// int32 limit = 3;
inline void GetFollowingRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetFollowingRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetFollowingRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingRequest.limit)
  return _internal_limit();
}
inline void GetFollowingRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetFollowingRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingRequest.limit)
}

// string cursor = 4;
inline void GetFollowingRequest::clear_cursor() {
  _impl_.cursor_.ClearToEmpty();
}
inline const std::string& GetFollowingRequest::cursor() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingRequest.cursor)
  return _internal_cursor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowingRequest::set_cursor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cursor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingRequest.cursor)
}
inline std::string* GetFollowingRequest::mutable_cursor() {
  std::string* _s = _internal_mutable_cursor();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowingRequest.cursor)
  return _s;
}
inline const std::string& GetFollowingRequest::_internal_cursor() const {
  return _impl_.cursor_.Get();
}
inline void GetFollowingRequest::_internal_set_cursor(const std::string& value) {
  
  _impl_.cursor_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::_internal_mutable_cursor() {
  
  return _impl_.cursor_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowingRequest::release_cursor() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowingRequest.cursor)
  return _impl_.cursor_.Release();
}
inline void GetFollowingRequest::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  _impl_.cursor_.SetAllocated(cursor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cursor_.IsDefault()) {
    _impl_.cursor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowingRequest.cursor)
}

// bool include_analytics = 5;
inline void GetFollowingRequest::clear_include_analytics() {
  _impl_.include_analytics_ = false;
}
inline bool GetFollowingRequest::_internal_include_analytics() const {
  return _impl_.include_analytics_;
}
inline bool GetFollowingRequest::include_analytics() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingRequest.include_analytics)
  return _internal_include_analytics();
}
inline void GetFollowingRequest::_internal_set_include_analytics(bool value) {
  
  _impl_.include_analytics_ = value;
}
inline void GetFollowingRequest::set_include_analytics(bool value) {
  _internal_set_include_analytics(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingRequest.include_analytics)
}

// -------------------------------------------------------------------

// GetFollowingResponse

// repeated .sonet.follow.v1.UserInfo following = 1;
inline int GetFollowingResponse::_internal_following_size() const {
  return _impl_.following_.size();
}
inline int GetFollowingResponse::following_size() const {
  return _internal_following_size();
}
inline void GetFollowingResponse::clear_following() {
  _impl_.following_.Clear();
}
inline ::sonet::follow::v1::UserInfo* GetFollowingResponse::mutable_following(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowingResponse.following)
  return _impl_.following_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
GetFollowingResponse::mutable_following() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetFollowingResponse.following)
  return &_impl_.following_;
}
inline const ::sonet::follow::v1::UserInfo& GetFollowingResponse::_internal_following(int index) const {
  return _impl_.following_.Get(index);
}
inline const ::sonet::follow::v1::UserInfo& GetFollowingResponse::following(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingResponse.following)
  return _internal_following(index);
}
inline ::sonet::follow::v1::UserInfo* GetFollowingResponse::_internal_add_following() {
  return _impl_.following_.Add();
}
inline ::sonet::follow::v1::UserInfo* GetFollowingResponse::add_following() {
  ::sonet::follow::v1::UserInfo* _add = _internal_add_following();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetFollowingResponse.following)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
GetFollowingResponse::following() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetFollowingResponse.following)
  return _impl_.following_;
}

// .sonet.follow.v1.PaginationInfo pagination = 2;
inline bool GetFollowingResponse::_internal_has_pagination() const {
  return this != internal_default_instance() && _impl_.pagination_ != nullptr;
}
inline bool GetFollowingResponse::has_pagination() const {
  return _internal_has_pagination();
}
inline void GetFollowingResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
inline const ::sonet::follow::v1::PaginationInfo& GetFollowingResponse::_internal_pagination() const {
  const ::sonet::follow::v1::PaginationInfo* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::PaginationInfo&>(
      ::sonet::follow::v1::_PaginationInfo_default_instance_);
}
inline const ::sonet::follow::v1::PaginationInfo& GetFollowingResponse::pagination() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingResponse.pagination)
  return _internal_pagination();
}
inline void GetFollowingResponse::unsafe_arena_set_allocated_pagination(
    ::sonet::follow::v1::PaginationInfo* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetFollowingResponse.pagination)
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowingResponse::release_pagination() {
  
  ::sonet::follow::v1::PaginationInfo* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowingResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowingResponse.pagination)
  
  ::sonet::follow::v1::PaginationInfo* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowingResponse::_internal_mutable_pagination() {
  
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::PaginationInfo>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::sonet::follow::v1::PaginationInfo* GetFollowingResponse::mutable_pagination() {
  ::sonet::follow::v1::PaginationInfo* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowingResponse.pagination)
  return _msg;
}
inline void GetFollowingResponse::set_allocated_pagination(::sonet::follow::v1::PaginationInfo* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pagination_;
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pagination);
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowingResponse.pagination)
}

// int32 total_count = 3;
inline void GetFollowingResponse::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t GetFollowingResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t GetFollowingResponse::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowingResponse.total_count)
  return _internal_total_count();
}
inline void GetFollowingResponse::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void GetFollowingResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowingResponse.total_count)
}

// -------------------------------------------------------------------

// GetMutualFriendsRequest

// string user1_id = 1;
inline void GetMutualFriendsRequest::clear_user1_id() {
  _impl_.user1_id_.ClearToEmpty();
}
inline const std::string& GetMutualFriendsRequest::user1_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsRequest.user1_id)
  return _internal_user1_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMutualFriendsRequest::set_user1_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user1_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetMutualFriendsRequest.user1_id)
}
inline std::string* GetMutualFriendsRequest::mutable_user1_id() {
  std::string* _s = _internal_mutable_user1_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetMutualFriendsRequest.user1_id)
  return _s;
}
inline const std::string& GetMutualFriendsRequest::_internal_user1_id() const {
  return _impl_.user1_id_.Get();
}
inline void GetMutualFriendsRequest::_internal_set_user1_id(const std::string& value) {
  
  _impl_.user1_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::_internal_mutable_user1_id() {
  
  return _impl_.user1_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::release_user1_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetMutualFriendsRequest.user1_id)
  return _impl_.user1_id_.Release();
}
inline void GetMutualFriendsRequest::set_allocated_user1_id(std::string* user1_id) {
  if (user1_id != nullptr) {
    
  } else {
    
  }
  _impl_.user1_id_.SetAllocated(user1_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user1_id_.IsDefault()) {
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetMutualFriendsRequest.user1_id)
}

// string user2_id = 2;
inline void GetMutualFriendsRequest::clear_user2_id() {
  _impl_.user2_id_.ClearToEmpty();
}
inline const std::string& GetMutualFriendsRequest::user2_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsRequest.user2_id)
  return _internal_user2_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMutualFriendsRequest::set_user2_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user2_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetMutualFriendsRequest.user2_id)
}
inline std::string* GetMutualFriendsRequest::mutable_user2_id() {
  std::string* _s = _internal_mutable_user2_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetMutualFriendsRequest.user2_id)
  return _s;
}
inline const std::string& GetMutualFriendsRequest::_internal_user2_id() const {
  return _impl_.user2_id_.Get();
}
inline void GetMutualFriendsRequest::_internal_set_user2_id(const std::string& value) {
  
  _impl_.user2_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::_internal_mutable_user2_id() {
  
  return _impl_.user2_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::release_user2_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetMutualFriendsRequest.user2_id)
  return _impl_.user2_id_.Release();
}
inline void GetMutualFriendsRequest::set_allocated_user2_id(std::string* user2_id) {
  if (user2_id != nullptr) {
    
  } else {
    
  }
  _impl_.user2_id_.SetAllocated(user2_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user2_id_.IsDefault()) {
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetMutualFriendsRequest.user2_id)
}

// string requesting_user_id = 3;
inline void GetMutualFriendsRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetMutualFriendsRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetMutualFriendsRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id)
}
inline std::string* GetMutualFriendsRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetMutualFriendsRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetMutualFriendsRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetMutualFriendsRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetMutualFriendsRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id)
}

// int32 limit = 4;
inline void GetMutualFriendsRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetMutualFriendsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetMutualFriendsRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsRequest.limit)
  return _internal_limit();
}
inline void GetMutualFriendsRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetMutualFriendsRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetMutualFriendsRequest.limit)
}

// -------------------------------------------------------------------

// GetMutualFriendsResponse

// repeated .sonet.follow.v1.UserInfo mutual_friends = 1;
inline int GetMutualFriendsResponse::_internal_mutual_friends_size() const {
  return _impl_.mutual_friends_.size();
}
inline int GetMutualFriendsResponse::mutual_friends_size() const {
  return _internal_mutual_friends_size();
}
inline void GetMutualFriendsResponse::clear_mutual_friends() {
  _impl_.mutual_friends_.Clear();
}
inline ::sonet::follow::v1::UserInfo* GetMutualFriendsResponse::mutable_mutual_friends(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetMutualFriendsResponse.mutual_friends)
  return _impl_.mutual_friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >*
GetMutualFriendsResponse::mutable_mutual_friends() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetMutualFriendsResponse.mutual_friends)
  return &_impl_.mutual_friends_;
}
inline const ::sonet::follow::v1::UserInfo& GetMutualFriendsResponse::_internal_mutual_friends(int index) const {
  return _impl_.mutual_friends_.Get(index);
}
inline const ::sonet::follow::v1::UserInfo& GetMutualFriendsResponse::mutual_friends(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsResponse.mutual_friends)
  return _internal_mutual_friends(index);
}
inline ::sonet::follow::v1::UserInfo* GetMutualFriendsResponse::_internal_add_mutual_friends() {
  return _impl_.mutual_friends_.Add();
}
inline ::sonet::follow::v1::UserInfo* GetMutualFriendsResponse::add_mutual_friends() {
  ::sonet::follow::v1::UserInfo* _add = _internal_add_mutual_friends();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetMutualFriendsResponse.mutual_friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::UserInfo >&
GetMutualFriendsResponse::mutual_friends() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetMutualFriendsResponse.mutual_friends)
  return _impl_.mutual_friends_;
}

// int32 total_count = 2;
inline void GetMutualFriendsResponse::clear_total_count() {
  _impl_.total_count_ = 0;
}
inline int32_t GetMutualFriendsResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t GetMutualFriendsResponse::total_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetMutualFriendsResponse.total_count)
  return _internal_total_count();
}
inline void GetMutualFriendsResponse::_internal_set_total_count(int32_t value) {
  
  _impl_.total_count_ = value;
}
inline void GetMutualFriendsResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetMutualFriendsResponse.total_count)
}

// -------------------------------------------------------------------

// GetRecommendationsRequest

// string user_id = 1;
inline void GetRecommendationsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetRecommendationsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecommendationsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.user_id)
}
inline std::string* GetRecommendationsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsRequest.user_id)
  return _s;
}
inline const std::string& GetRecommendationsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetRecommendationsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecommendationsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecommendationsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecommendationsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetRecommendationsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecommendationsRequest.user_id)
}

// .sonet.follow.v1.RecommendationAlgorithm algorithm = 2;
inline void GetRecommendationsRequest::clear_algorithm() {
  _impl_.algorithm_ = 0;
}
inline ::sonet::follow::v1::RecommendationAlgorithm GetRecommendationsRequest::_internal_algorithm() const {
  return static_cast< ::sonet::follow::v1::RecommendationAlgorithm >(_impl_.algorithm_);
}
inline ::sonet::follow::v1::RecommendationAlgorithm GetRecommendationsRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsRequest.algorithm)
  return _internal_algorithm();
}
inline void GetRecommendationsRequest::_internal_set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value) {
  
  _impl_.algorithm_ = value;
}
inline void GetRecommendationsRequest::set_algorithm(::sonet::follow::v1::RecommendationAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.algorithm)
}

// int32 limit = 3;
inline void GetRecommendationsRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetRecommendationsRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetRecommendationsRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsRequest.limit)
  return _internal_limit();
}
inline void GetRecommendationsRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetRecommendationsRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.limit)
}

// repeated string exclude_user_ids = 4;
inline int GetRecommendationsRequest::_internal_exclude_user_ids_size() const {
  return _impl_.exclude_user_ids_.size();
}
inline int GetRecommendationsRequest::exclude_user_ids_size() const {
  return _internal_exclude_user_ids_size();
}
inline void GetRecommendationsRequest::clear_exclude_user_ids() {
  _impl_.exclude_user_ids_.Clear();
}
inline std::string* GetRecommendationsRequest::add_exclude_user_ids() {
  std::string* _s = _internal_add_exclude_user_ids();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
  return _s;
}
inline const std::string& GetRecommendationsRequest::_internal_exclude_user_ids(int index) const {
  return _impl_.exclude_user_ids_.Get(index);
}
inline const std::string& GetRecommendationsRequest::exclude_user_ids(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
  return _internal_exclude_user_ids(index);
}
inline std::string* GetRecommendationsRequest::mutable_exclude_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
  return _impl_.exclude_user_ids_.Mutable(index);
}
inline void GetRecommendationsRequest::set_exclude_user_ids(int index, const std::string& value) {
  _impl_.exclude_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::set_exclude_user_ids(int index, std::string&& value) {
  _impl_.exclude_user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::set_exclude_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::set_exclude_user_ids(int index, const char* value, size_t size) {
  _impl_.exclude_user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline std::string* GetRecommendationsRequest::_internal_add_exclude_user_ids() {
  return _impl_.exclude_user_ids_.Add();
}
inline void GetRecommendationsRequest::add_exclude_user_ids(const std::string& value) {
  _impl_.exclude_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::add_exclude_user_ids(std::string&& value) {
  _impl_.exclude_user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::add_exclude_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exclude_user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline void GetRecommendationsRequest::add_exclude_user_ids(const char* value, size_t size) {
  _impl_.exclude_user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRecommendationsRequest::exclude_user_ids() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
  return _impl_.exclude_user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRecommendationsRequest::mutable_exclude_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids)
  return &_impl_.exclude_user_ids_;
}

// repeated string interests = 5;
inline int GetRecommendationsRequest::_internal_interests_size() const {
  return _impl_.interests_.size();
}
inline int GetRecommendationsRequest::interests_size() const {
  return _internal_interests_size();
}
inline void GetRecommendationsRequest::clear_interests() {
  _impl_.interests_.Clear();
}
inline std::string* GetRecommendationsRequest::add_interests() {
  std::string* _s = _internal_add_interests();
  // @@protoc_insertion_point(field_add_mutable:sonet.follow.v1.GetRecommendationsRequest.interests)
  return _s;
}
inline const std::string& GetRecommendationsRequest::_internal_interests(int index) const {
  return _impl_.interests_.Get(index);
}
inline const std::string& GetRecommendationsRequest::interests(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsRequest.interests)
  return _internal_interests(index);
}
inline std::string* GetRecommendationsRequest::mutable_interests(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsRequest.interests)
  return _impl_.interests_.Mutable(index);
}
inline void GetRecommendationsRequest::set_interests(int index, const std::string& value) {
  _impl_.interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::set_interests(int index, std::string&& value) {
  _impl_.interests_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::set_interests(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.interests_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::set_interests(int index, const char* value, size_t size) {
  _impl_.interests_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline std::string* GetRecommendationsRequest::_internal_add_interests() {
  return _impl_.interests_.Add();
}
inline void GetRecommendationsRequest::add_interests(const std::string& value) {
  _impl_.interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::add_interests(std::string&& value) {
  _impl_.interests_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::add_interests(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.interests_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline void GetRecommendationsRequest::add_interests(const char* value, size_t size) {
  _impl_.interests_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sonet.follow.v1.GetRecommendationsRequest.interests)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRecommendationsRequest::interests() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetRecommendationsRequest.interests)
  return _impl_.interests_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRecommendationsRequest::mutable_interests() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetRecommendationsRequest.interests)
  return &_impl_.interests_;
}

// -------------------------------------------------------------------

// GetRecommendationsResponse

// repeated .sonet.follow.v1.Recommendation recommendations = 1;
inline int GetRecommendationsResponse::_internal_recommendations_size() const {
  return _impl_.recommendations_.size();
}
inline int GetRecommendationsResponse::recommendations_size() const {
  return _internal_recommendations_size();
}
inline void GetRecommendationsResponse::clear_recommendations() {
  _impl_.recommendations_.Clear();
}
inline ::sonet::follow::v1::Recommendation* GetRecommendationsResponse::mutable_recommendations(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsResponse.recommendations)
  return _impl_.recommendations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >*
GetRecommendationsResponse::mutable_recommendations() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetRecommendationsResponse.recommendations)
  return &_impl_.recommendations_;
}
inline const ::sonet::follow::v1::Recommendation& GetRecommendationsResponse::_internal_recommendations(int index) const {
  return _impl_.recommendations_.Get(index);
}
inline const ::sonet::follow::v1::Recommendation& GetRecommendationsResponse::recommendations(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsResponse.recommendations)
  return _internal_recommendations(index);
}
inline ::sonet::follow::v1::Recommendation* GetRecommendationsResponse::_internal_add_recommendations() {
  return _impl_.recommendations_.Add();
}
inline ::sonet::follow::v1::Recommendation* GetRecommendationsResponse::add_recommendations() {
  ::sonet::follow::v1::Recommendation* _add = _internal_add_recommendations();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecommendationsResponse.recommendations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >&
GetRecommendationsResponse::recommendations() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetRecommendationsResponse.recommendations)
  return _impl_.recommendations_;
}

// string algorithm_used = 2;
inline void GetRecommendationsResponse::clear_algorithm_used() {
  _impl_.algorithm_used_.ClearToEmpty();
}
inline const std::string& GetRecommendationsResponse::algorithm_used() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsResponse.algorithm_used)
  return _internal_algorithm_used();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecommendationsResponse::set_algorithm_used(ArgT0&& arg0, ArgT... args) {
 
 _impl_.algorithm_used_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecommendationsResponse.algorithm_used)
}
inline std::string* GetRecommendationsResponse::mutable_algorithm_used() {
  std::string* _s = _internal_mutable_algorithm_used();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsResponse.algorithm_used)
  return _s;
}
inline const std::string& GetRecommendationsResponse::_internal_algorithm_used() const {
  return _impl_.algorithm_used_.Get();
}
inline void GetRecommendationsResponse::_internal_set_algorithm_used(const std::string& value) {
  
  _impl_.algorithm_used_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecommendationsResponse::_internal_mutable_algorithm_used() {
  
  return _impl_.algorithm_used_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecommendationsResponse::release_algorithm_used() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecommendationsResponse.algorithm_used)
  return _impl_.algorithm_used_.Release();
}
inline void GetRecommendationsResponse::set_allocated_algorithm_used(std::string* algorithm_used) {
  if (algorithm_used != nullptr) {
    
  } else {
    
  }
  _impl_.algorithm_used_.SetAllocated(algorithm_used, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.algorithm_used_.IsDefault()) {
    _impl_.algorithm_used_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecommendationsResponse.algorithm_used)
}

// .google.protobuf.Timestamp generated_at = 3;
inline bool GetRecommendationsResponse::_internal_has_generated_at() const {
  return this != internal_default_instance() && _impl_.generated_at_ != nullptr;
}
inline bool GetRecommendationsResponse::has_generated_at() const {
  return _internal_has_generated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetRecommendationsResponse::_internal_generated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.generated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetRecommendationsResponse::generated_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecommendationsResponse.generated_at)
  return _internal_generated_at();
}
inline void GetRecommendationsResponse::unsafe_arena_set_allocated_generated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generated_at_);
  }
  _impl_.generated_at_ = generated_at;
  if (generated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetRecommendationsResponse.generated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecommendationsResponse::release_generated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.generated_at_;
  _impl_.generated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecommendationsResponse::unsafe_arena_release_generated_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecommendationsResponse.generated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.generated_at_;
  _impl_.generated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecommendationsResponse::_internal_mutable_generated_at() {
  
  if (_impl_.generated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.generated_at_ = p;
  }
  return _impl_.generated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecommendationsResponse::mutable_generated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_generated_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecommendationsResponse.generated_at)
  return _msg;
}
inline void GetRecommendationsResponse::set_allocated_generated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generated_at_);
  }
  if (generated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generated_at));
    if (message_arena != submessage_arena) {
      generated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.generated_at_ = generated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecommendationsResponse.generated_at)
}

// -------------------------------------------------------------------

// GetTrendingUsersRequest

// string requesting_user_id = 1;
inline void GetTrendingUsersRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetTrendingUsersRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTrendingUsersRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id)
}
inline std::string* GetTrendingUsersRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetTrendingUsersRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetTrendingUsersRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTrendingUsersRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTrendingUsersRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetTrendingUsersRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id)
}

// int32 limit = 2;
inline void GetTrendingUsersRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetTrendingUsersRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetTrendingUsersRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersRequest.limit)
  return _internal_limit();
}
inline void GetTrendingUsersRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetTrendingUsersRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetTrendingUsersRequest.limit)
}

// string category = 3;
inline void GetTrendingUsersRequest::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& GetTrendingUsersRequest::category() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersRequest.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTrendingUsersRequest::set_category(ArgT0&& arg0, ArgT... args) {
 
 _impl_.category_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetTrendingUsersRequest.category)
}
inline std::string* GetTrendingUsersRequest::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetTrendingUsersRequest.category)
  return _s;
}
inline const std::string& GetTrendingUsersRequest::_internal_category() const {
  return _impl_.category_.Get();
}
inline void GetTrendingUsersRequest::_internal_set_category(const std::string& value) {
  
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTrendingUsersRequest::_internal_mutable_category() {
  
  return _impl_.category_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTrendingUsersRequest::release_category() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetTrendingUsersRequest.category)
  return _impl_.category_.Release();
}
inline void GetTrendingUsersRequest::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  _impl_.category_.SetAllocated(category, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.category_.IsDefault()) {
    _impl_.category_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetTrendingUsersRequest.category)
}

// int32 time_window_hours = 4;
inline void GetTrendingUsersRequest::clear_time_window_hours() {
  _impl_.time_window_hours_ = 0;
}
inline int32_t GetTrendingUsersRequest::_internal_time_window_hours() const {
  return _impl_.time_window_hours_;
}
inline int32_t GetTrendingUsersRequest::time_window_hours() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersRequest.time_window_hours)
  return _internal_time_window_hours();
}
inline void GetTrendingUsersRequest::_internal_set_time_window_hours(int32_t value) {
  
  _impl_.time_window_hours_ = value;
}
inline void GetTrendingUsersRequest::set_time_window_hours(int32_t value) {
  _internal_set_time_window_hours(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetTrendingUsersRequest.time_window_hours)
}

// -------------------------------------------------------------------

// GetTrendingUsersResponse

// repeated .sonet.follow.v1.Recommendation trending_users = 1;
inline int GetTrendingUsersResponse::_internal_trending_users_size() const {
  return _impl_.trending_users_.size();
}
inline int GetTrendingUsersResponse::trending_users_size() const {
  return _internal_trending_users_size();
}
inline void GetTrendingUsersResponse::clear_trending_users() {
  _impl_.trending_users_.Clear();
}
inline ::sonet::follow::v1::Recommendation* GetTrendingUsersResponse::mutable_trending_users(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetTrendingUsersResponse.trending_users)
  return _impl_.trending_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >*
GetTrendingUsersResponse::mutable_trending_users() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetTrendingUsersResponse.trending_users)
  return &_impl_.trending_users_;
}
inline const ::sonet::follow::v1::Recommendation& GetTrendingUsersResponse::_internal_trending_users(int index) const {
  return _impl_.trending_users_.Get(index);
}
inline const ::sonet::follow::v1::Recommendation& GetTrendingUsersResponse::trending_users(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersResponse.trending_users)
  return _internal_trending_users(index);
}
inline ::sonet::follow::v1::Recommendation* GetTrendingUsersResponse::_internal_add_trending_users() {
  return _impl_.trending_users_.Add();
}
inline ::sonet::follow::v1::Recommendation* GetTrendingUsersResponse::add_trending_users() {
  ::sonet::follow::v1::Recommendation* _add = _internal_add_trending_users();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetTrendingUsersResponse.trending_users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::Recommendation >&
GetTrendingUsersResponse::trending_users() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetTrendingUsersResponse.trending_users)
  return _impl_.trending_users_;
}

// string time_period = 2;
inline void GetTrendingUsersResponse::clear_time_period() {
  _impl_.time_period_.ClearToEmpty();
}
inline const std::string& GetTrendingUsersResponse::time_period() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersResponse.time_period)
  return _internal_time_period();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTrendingUsersResponse::set_time_period(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_period_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetTrendingUsersResponse.time_period)
}
inline std::string* GetTrendingUsersResponse::mutable_time_period() {
  std::string* _s = _internal_mutable_time_period();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetTrendingUsersResponse.time_period)
  return _s;
}
inline const std::string& GetTrendingUsersResponse::_internal_time_period() const {
  return _impl_.time_period_.Get();
}
inline void GetTrendingUsersResponse::_internal_set_time_period(const std::string& value) {
  
  _impl_.time_period_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTrendingUsersResponse::_internal_mutable_time_period() {
  
  return _impl_.time_period_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTrendingUsersResponse::release_time_period() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetTrendingUsersResponse.time_period)
  return _impl_.time_period_.Release();
}
inline void GetTrendingUsersResponse::set_allocated_time_period(std::string* time_period) {
  if (time_period != nullptr) {
    
  } else {
    
  }
  _impl_.time_period_.SetAllocated(time_period, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_period_.IsDefault()) {
    _impl_.time_period_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetTrendingUsersResponse.time_period)
}

// .google.protobuf.Timestamp generated_at = 3;
inline bool GetTrendingUsersResponse::_internal_has_generated_at() const {
  return this != internal_default_instance() && _impl_.generated_at_ != nullptr;
}
inline bool GetTrendingUsersResponse::has_generated_at() const {
  return _internal_has_generated_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetTrendingUsersResponse::_internal_generated_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.generated_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetTrendingUsersResponse::generated_at() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetTrendingUsersResponse.generated_at)
  return _internal_generated_at();
}
inline void GetTrendingUsersResponse::unsafe_arena_set_allocated_generated_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generated_at_);
  }
  _impl_.generated_at_ = generated_at;
  if (generated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetTrendingUsersResponse.generated_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetTrendingUsersResponse::release_generated_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.generated_at_;
  _impl_.generated_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetTrendingUsersResponse::unsafe_arena_release_generated_at() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetTrendingUsersResponse.generated_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.generated_at_;
  _impl_.generated_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetTrendingUsersResponse::_internal_mutable_generated_at() {
  
  if (_impl_.generated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.generated_at_ = p;
  }
  return _impl_.generated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetTrendingUsersResponse::mutable_generated_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_generated_at();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetTrendingUsersResponse.generated_at)
  return _msg;
}
inline void GetTrendingUsersResponse::set_allocated_generated_at(::PROTOBUF_NAMESPACE_ID::Timestamp* generated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.generated_at_);
  }
  if (generated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generated_at));
    if (message_arena != submessage_arena) {
      generated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generated_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.generated_at_ = generated_at;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetTrendingUsersResponse.generated_at)
}

// -------------------------------------------------------------------

// GetFollowerAnalyticsRequest

// string user_id = 1;
inline void GetFollowerAnalyticsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetFollowerAnalyticsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowerAnalyticsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsRequest.user_id)
}
inline std::string* GetFollowerAnalyticsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowerAnalyticsRequest.user_id)
  return _s;
}
inline const std::string& GetFollowerAnalyticsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetFollowerAnalyticsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowerAnalyticsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetFollowerAnalyticsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowerAnalyticsRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetFollowerAnalyticsRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetFollowerAnalyticsRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowerAnalyticsRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id)
}
inline std::string* GetFollowerAnalyticsRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetFollowerAnalyticsRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetFollowerAnalyticsRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetFollowerAnalyticsRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id)
}

// string time_range = 3;
inline void GetFollowerAnalyticsRequest::clear_time_range() {
  _impl_.time_range_.ClearToEmpty();
}
inline const std::string& GetFollowerAnalyticsRequest::time_range() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsRequest.time_range)
  return _internal_time_range();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFollowerAnalyticsRequest::set_time_range(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_range_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsRequest.time_range)
}
inline std::string* GetFollowerAnalyticsRequest::mutable_time_range() {
  std::string* _s = _internal_mutable_time_range();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetFollowerAnalyticsRequest.time_range)
  return _s;
}
inline const std::string& GetFollowerAnalyticsRequest::_internal_time_range() const {
  return _impl_.time_range_.Get();
}
inline void GetFollowerAnalyticsRequest::_internal_set_time_range(const std::string& value) {
  
  _impl_.time_range_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::_internal_mutable_time_range() {
  
  return _impl_.time_range_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFollowerAnalyticsRequest::release_time_range() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetFollowerAnalyticsRequest.time_range)
  return _impl_.time_range_.Release();
}
inline void GetFollowerAnalyticsRequest::set_allocated_time_range(std::string* time_range) {
  if (time_range != nullptr) {
    
  } else {
    
  }
  _impl_.time_range_.SetAllocated(time_range, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_range_.IsDefault()) {
    _impl_.time_range_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetFollowerAnalyticsRequest.time_range)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetFollowerAnalyticsResponse

// int32 total_followers = 1;
inline void GetFollowerAnalyticsResponse::clear_total_followers() {
  _impl_.total_followers_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_total_followers() const {
  return _impl_.total_followers_;
}
inline int32_t GetFollowerAnalyticsResponse::total_followers() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.total_followers)
  return _internal_total_followers();
}
inline void GetFollowerAnalyticsResponse::_internal_set_total_followers(int32_t value) {
  
  _impl_.total_followers_ = value;
}
inline void GetFollowerAnalyticsResponse::set_total_followers(int32_t value) {
  _internal_set_total_followers(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.total_followers)
}

// int32 total_following = 2;
inline void GetFollowerAnalyticsResponse::clear_total_following() {
  _impl_.total_following_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_total_following() const {
  return _impl_.total_following_;
}
inline int32_t GetFollowerAnalyticsResponse::total_following() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.total_following)
  return _internal_total_following();
}
inline void GetFollowerAnalyticsResponse::_internal_set_total_following(int32_t value) {
  
  _impl_.total_following_ = value;
}
inline void GetFollowerAnalyticsResponse::set_total_following(int32_t value) {
  _internal_set_total_following(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.total_following)
}

// int32 mutual_follows = 3;
inline void GetFollowerAnalyticsResponse::clear_mutual_follows() {
  _impl_.mutual_follows_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_mutual_follows() const {
  return _impl_.mutual_follows_;
}
inline int32_t GetFollowerAnalyticsResponse::mutual_follows() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.mutual_follows)
  return _internal_mutual_follows();
}
inline void GetFollowerAnalyticsResponse::_internal_set_mutual_follows(int32_t value) {
  
  _impl_.mutual_follows_ = value;
}
inline void GetFollowerAnalyticsResponse::set_mutual_follows(int32_t value) {
  _internal_set_mutual_follows(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.mutual_follows)
}

// int32 followers_gained_today = 4;
inline void GetFollowerAnalyticsResponse::clear_followers_gained_today() {
  _impl_.followers_gained_today_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_gained_today() const {
  return _impl_.followers_gained_today_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_gained_today() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_today)
  return _internal_followers_gained_today();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_gained_today(int32_t value) {
  
  _impl_.followers_gained_today_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_gained_today(int32_t value) {
  _internal_set_followers_gained_today(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_today)
}

// int32 followers_lost_today = 5;
inline void GetFollowerAnalyticsResponse::clear_followers_lost_today() {
  _impl_.followers_lost_today_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_lost_today() const {
  return _impl_.followers_lost_today_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_lost_today() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_today)
  return _internal_followers_lost_today();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_lost_today(int32_t value) {
  
  _impl_.followers_lost_today_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_lost_today(int32_t value) {
  _internal_set_followers_lost_today(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_today)
}

// int32 followers_gained_week = 6;
inline void GetFollowerAnalyticsResponse::clear_followers_gained_week() {
  _impl_.followers_gained_week_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_gained_week() const {
  return _impl_.followers_gained_week_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_gained_week() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_week)
  return _internal_followers_gained_week();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_gained_week(int32_t value) {
  
  _impl_.followers_gained_week_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_gained_week(int32_t value) {
  _internal_set_followers_gained_week(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_week)
}

// int32 followers_lost_week = 7;
inline void GetFollowerAnalyticsResponse::clear_followers_lost_week() {
  _impl_.followers_lost_week_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_lost_week() const {
  return _impl_.followers_lost_week_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_lost_week() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_week)
  return _internal_followers_lost_week();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_lost_week(int32_t value) {
  
  _impl_.followers_lost_week_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_lost_week(int32_t value) {
  _internal_set_followers_lost_week(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_week)
}

// int32 followers_gained_month = 8;
inline void GetFollowerAnalyticsResponse::clear_followers_gained_month() {
  _impl_.followers_gained_month_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_gained_month() const {
  return _impl_.followers_gained_month_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_gained_month() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_month)
  return _internal_followers_gained_month();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_gained_month(int32_t value) {
  
  _impl_.followers_gained_month_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_gained_month(int32_t value) {
  _internal_set_followers_gained_month(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_gained_month)
}

// int32 followers_lost_month = 9;
inline void GetFollowerAnalyticsResponse::clear_followers_lost_month() {
  _impl_.followers_lost_month_ = 0;
}
inline int32_t GetFollowerAnalyticsResponse::_internal_followers_lost_month() const {
  return _impl_.followers_lost_month_;
}
inline int32_t GetFollowerAnalyticsResponse::followers_lost_month() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_month)
  return _internal_followers_lost_month();
}
inline void GetFollowerAnalyticsResponse::_internal_set_followers_lost_month(int32_t value) {
  
  _impl_.followers_lost_month_ = value;
}
inline void GetFollowerAnalyticsResponse::set_followers_lost_month(int32_t value) {
  _internal_set_followers_lost_month(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_lost_month)
}

// double average_engagement_rate = 10;
inline void GetFollowerAnalyticsResponse::clear_average_engagement_rate() {
  _impl_.average_engagement_rate_ = 0;
}
inline double GetFollowerAnalyticsResponse::_internal_average_engagement_rate() const {
  return _impl_.average_engagement_rate_;
}
inline double GetFollowerAnalyticsResponse::average_engagement_rate() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetFollowerAnalyticsResponse.average_engagement_rate)
  return _internal_average_engagement_rate();
}
inline void GetFollowerAnalyticsResponse::_internal_set_average_engagement_rate(double value) {
  
  _impl_.average_engagement_rate_ = value;
}
inline void GetFollowerAnalyticsResponse::set_average_engagement_rate(double value) {
  _internal_set_average_engagement_rate(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetFollowerAnalyticsResponse.average_engagement_rate)
}

// map<string, int32> followers_by_country = 11;
inline int GetFollowerAnalyticsResponse::_internal_followers_by_country_size() const {
  return _impl_.followers_by_country_.size();
}
inline int GetFollowerAnalyticsResponse::followers_by_country_size() const {
  return _internal_followers_by_country_size();
}
inline void GetFollowerAnalyticsResponse::clear_followers_by_country() {
  _impl_.followers_by_country_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
GetFollowerAnalyticsResponse::_internal_followers_by_country() const {
  return _impl_.followers_by_country_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
GetFollowerAnalyticsResponse::followers_by_country() const {
  // @@protoc_insertion_point(field_map:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_by_country)
  return _internal_followers_by_country();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
GetFollowerAnalyticsResponse::_internal_mutable_followers_by_country() {
  return _impl_.followers_by_country_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
GetFollowerAnalyticsResponse::mutable_followers_by_country() {
  // @@protoc_insertion_point(field_mutable_map:sonet.follow.v1.GetFollowerAnalyticsResponse.followers_by_country)
  return _internal_mutable_followers_by_country();
}

// map<string, int32> daily_growth = 12;
inline int GetFollowerAnalyticsResponse::_internal_daily_growth_size() const {
  return _impl_.daily_growth_.size();
}
inline int GetFollowerAnalyticsResponse::daily_growth_size() const {
  return _internal_daily_growth_size();
}
inline void GetFollowerAnalyticsResponse::clear_daily_growth() {
  _impl_.daily_growth_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
GetFollowerAnalyticsResponse::_internal_daily_growth() const {
  return _impl_.daily_growth_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
GetFollowerAnalyticsResponse::daily_growth() const {
  // @@protoc_insertion_point(field_map:sonet.follow.v1.GetFollowerAnalyticsResponse.daily_growth)
  return _internal_daily_growth();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
GetFollowerAnalyticsResponse::_internal_mutable_daily_growth() {
  return _impl_.daily_growth_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
GetFollowerAnalyticsResponse::mutable_daily_growth() {
  // @@protoc_insertion_point(field_mutable_map:sonet.follow.v1.GetFollowerAnalyticsResponse.daily_growth)
  return _internal_mutable_daily_growth();
}

// -------------------------------------------------------------------

// GetSocialMetricsRequest

// string user_id = 1;
inline void GetSocialMetricsRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetSocialMetricsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSocialMetricsRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsRequest.user_id)
}
inline std::string* GetSocialMetricsRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetSocialMetricsRequest.user_id)
  return _s;
}
inline const std::string& GetSocialMetricsRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetSocialMetricsRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSocialMetricsRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSocialMetricsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetSocialMetricsRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetSocialMetricsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetSocialMetricsRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetSocialMetricsRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetSocialMetricsRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSocialMetricsRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id)
}
inline std::string* GetSocialMetricsRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetSocialMetricsRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetSocialMetricsRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSocialMetricsRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSocialMetricsRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetSocialMetricsRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id)
}

// -------------------------------------------------------------------

// GetSocialMetricsResponse

// int32 followers_count = 1;
inline void GetSocialMetricsResponse::clear_followers_count() {
  _impl_.followers_count_ = 0;
}
inline int32_t GetSocialMetricsResponse::_internal_followers_count() const {
  return _impl_.followers_count_;
}
inline int32_t GetSocialMetricsResponse::followers_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.followers_count)
  return _internal_followers_count();
}
inline void GetSocialMetricsResponse::_internal_set_followers_count(int32_t value) {
  
  _impl_.followers_count_ = value;
}
inline void GetSocialMetricsResponse::set_followers_count(int32_t value) {
  _internal_set_followers_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.followers_count)
}

// int32 following_count = 2;
inline void GetSocialMetricsResponse::clear_following_count() {
  _impl_.following_count_ = 0;
}
inline int32_t GetSocialMetricsResponse::_internal_following_count() const {
  return _impl_.following_count_;
}
inline int32_t GetSocialMetricsResponse::following_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.following_count)
  return _internal_following_count();
}
inline void GetSocialMetricsResponse::_internal_set_following_count(int32_t value) {
  
  _impl_.following_count_ = value;
}
inline void GetSocialMetricsResponse::set_following_count(int32_t value) {
  _internal_set_following_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.following_count)
}

// double followers_following_ratio = 3;
inline void GetSocialMetricsResponse::clear_followers_following_ratio() {
  _impl_.followers_following_ratio_ = 0;
}
inline double GetSocialMetricsResponse::_internal_followers_following_ratio() const {
  return _impl_.followers_following_ratio_;
}
inline double GetSocialMetricsResponse::followers_following_ratio() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.followers_following_ratio)
  return _internal_followers_following_ratio();
}
inline void GetSocialMetricsResponse::_internal_set_followers_following_ratio(double value) {
  
  _impl_.followers_following_ratio_ = value;
}
inline void GetSocialMetricsResponse::set_followers_following_ratio(double value) {
  _internal_set_followers_following_ratio(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.followers_following_ratio)
}

// double average_engagement_score = 4;
inline void GetSocialMetricsResponse::clear_average_engagement_score() {
  _impl_.average_engagement_score_ = 0;
}
inline double GetSocialMetricsResponse::_internal_average_engagement_score() const {
  return _impl_.average_engagement_score_;
}
inline double GetSocialMetricsResponse::average_engagement_score() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.average_engagement_score)
  return _internal_average_engagement_score();
}
inline void GetSocialMetricsResponse::_internal_set_average_engagement_score(double value) {
  
  _impl_.average_engagement_score_ = value;
}
inline void GetSocialMetricsResponse::set_average_engagement_score(double value) {
  _internal_set_average_engagement_score(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.average_engagement_score)
}

// double influence_score = 5;
inline void GetSocialMetricsResponse::clear_influence_score() {
  _impl_.influence_score_ = 0;
}
inline double GetSocialMetricsResponse::_internal_influence_score() const {
  return _impl_.influence_score_;
}
inline double GetSocialMetricsResponse::influence_score() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.influence_score)
  return _internal_influence_score();
}
inline void GetSocialMetricsResponse::_internal_set_influence_score(double value) {
  
  _impl_.influence_score_ = value;
}
inline void GetSocialMetricsResponse::set_influence_score(double value) {
  _internal_set_influence_score(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.influence_score)
}

// int32 mutual_connections = 6;
inline void GetSocialMetricsResponse::clear_mutual_connections() {
  _impl_.mutual_connections_ = 0;
}
inline int32_t GetSocialMetricsResponse::_internal_mutual_connections() const {
  return _impl_.mutual_connections_;
}
inline int32_t GetSocialMetricsResponse::mutual_connections() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.mutual_connections)
  return _internal_mutual_connections();
}
inline void GetSocialMetricsResponse::_internal_set_mutual_connections(int32_t value) {
  
  _impl_.mutual_connections_ = value;
}
inline void GetSocialMetricsResponse::set_mutual_connections(int32_t value) {
  _internal_set_mutual_connections(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.mutual_connections)
}

// double network_reach = 7;
inline void GetSocialMetricsResponse::clear_network_reach() {
  _impl_.network_reach_ = 0;
}
inline double GetSocialMetricsResponse::_internal_network_reach() const {
  return _impl_.network_reach_;
}
inline double GetSocialMetricsResponse::network_reach() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.network_reach)
  return _internal_network_reach();
}
inline void GetSocialMetricsResponse::_internal_set_network_reach(double value) {
  
  _impl_.network_reach_ = value;
}
inline void GetSocialMetricsResponse::set_network_reach(double value) {
  _internal_set_network_reach(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetSocialMetricsResponse.network_reach)
}

// .google.protobuf.Timestamp last_updated = 8;
inline bool GetSocialMetricsResponse::_internal_has_last_updated() const {
  return this != internal_default_instance() && _impl_.last_updated_ != nullptr;
}
inline bool GetSocialMetricsResponse::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSocialMetricsResponse::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSocialMetricsResponse::last_updated() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetSocialMetricsResponse.last_updated)
  return _internal_last_updated();
}
inline void GetSocialMetricsResponse::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  _impl_.last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetSocialMetricsResponse.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSocialMetricsResponse::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSocialMetricsResponse::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetSocialMetricsResponse.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSocialMetricsResponse::_internal_mutable_last_updated() {
  
  if (_impl_.last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_updated_ = p;
  }
  return _impl_.last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSocialMetricsResponse::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetSocialMetricsResponse.last_updated)
  return _msg;
}
inline void GetSocialMetricsResponse::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetSocialMetricsResponse.last_updated)
}

// -------------------------------------------------------------------

// GetLiveFollowerCountRequest

// string user_id = 1;
inline void GetLiveFollowerCountRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetLiveFollowerCountRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLiveFollowerCountRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetLiveFollowerCountRequest.user_id)
}
inline std::string* GetLiveFollowerCountRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetLiveFollowerCountRequest.user_id)
  return _s;
}
inline const std::string& GetLiveFollowerCountRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetLiveFollowerCountRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLiveFollowerCountRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLiveFollowerCountRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetLiveFollowerCountRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetLiveFollowerCountRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetLiveFollowerCountRequest.user_id)
}

// string requesting_user_id = 2;
inline void GetLiveFollowerCountRequest::clear_requesting_user_id() {
  _impl_.requesting_user_id_.ClearToEmpty();
}
inline const std::string& GetLiveFollowerCountRequest::requesting_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id)
  return _internal_requesting_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLiveFollowerCountRequest::set_requesting_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requesting_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id)
}
inline std::string* GetLiveFollowerCountRequest::mutable_requesting_user_id() {
  std::string* _s = _internal_mutable_requesting_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id)
  return _s;
}
inline const std::string& GetLiveFollowerCountRequest::_internal_requesting_user_id() const {
  return _impl_.requesting_user_id_.Get();
}
inline void GetLiveFollowerCountRequest::_internal_set_requesting_user_id(const std::string& value) {
  
  _impl_.requesting_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLiveFollowerCountRequest::_internal_mutable_requesting_user_id() {
  
  return _impl_.requesting_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLiveFollowerCountRequest::release_requesting_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id)
  return _impl_.requesting_user_id_.Release();
}
inline void GetLiveFollowerCountRequest::set_allocated_requesting_user_id(std::string* requesting_user_id) {
  if (requesting_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.requesting_user_id_.SetAllocated(requesting_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requesting_user_id_.IsDefault()) {
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id)
}

// -------------------------------------------------------------------

// GetLiveFollowerCountResponse

// int32 follower_count = 1;
inline void GetLiveFollowerCountResponse::clear_follower_count() {
  _impl_.follower_count_ = 0;
}
inline int32_t GetLiveFollowerCountResponse::_internal_follower_count() const {
  return _impl_.follower_count_;
}
inline int32_t GetLiveFollowerCountResponse::follower_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountResponse.follower_count)
  return _internal_follower_count();
}
inline void GetLiveFollowerCountResponse::_internal_set_follower_count(int32_t value) {
  
  _impl_.follower_count_ = value;
}
inline void GetLiveFollowerCountResponse::set_follower_count(int32_t value) {
  _internal_set_follower_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetLiveFollowerCountResponse.follower_count)
}

// int32 following_count = 2;
inline void GetLiveFollowerCountResponse::clear_following_count() {
  _impl_.following_count_ = 0;
}
inline int32_t GetLiveFollowerCountResponse::_internal_following_count() const {
  return _impl_.following_count_;
}
inline int32_t GetLiveFollowerCountResponse::following_count() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountResponse.following_count)
  return _internal_following_count();
}
inline void GetLiveFollowerCountResponse::_internal_set_following_count(int32_t value) {
  
  _impl_.following_count_ = value;
}
inline void GetLiveFollowerCountResponse::set_following_count(int32_t value) {
  _internal_set_following_count(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetLiveFollowerCountResponse.following_count)
}

// .google.protobuf.Timestamp last_updated = 3;
inline bool GetLiveFollowerCountResponse::_internal_has_last_updated() const {
  return this != internal_default_instance() && _impl_.last_updated_ != nullptr;
}
inline bool GetLiveFollowerCountResponse::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetLiveFollowerCountResponse::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetLiveFollowerCountResponse::last_updated() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountResponse.last_updated)
  return _internal_last_updated();
}
inline void GetLiveFollowerCountResponse::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  _impl_.last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetLiveFollowerCountResponse.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLiveFollowerCountResponse::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLiveFollowerCountResponse::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetLiveFollowerCountResponse.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLiveFollowerCountResponse::_internal_mutable_last_updated() {
  
  if (_impl_.last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_updated_ = p;
  }
  return _impl_.last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLiveFollowerCountResponse::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetLiveFollowerCountResponse.last_updated)
  return _msg;
}
inline void GetLiveFollowerCountResponse::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetLiveFollowerCountResponse.last_updated)
}

// int32 change_since_yesterday = 4;
inline void GetLiveFollowerCountResponse::clear_change_since_yesterday() {
  _impl_.change_since_yesterday_ = 0;
}
inline int32_t GetLiveFollowerCountResponse::_internal_change_since_yesterday() const {
  return _impl_.change_since_yesterday_;
}
inline int32_t GetLiveFollowerCountResponse::change_since_yesterday() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetLiveFollowerCountResponse.change_since_yesterday)
  return _internal_change_since_yesterday();
}
inline void GetLiveFollowerCountResponse::_internal_set_change_since_yesterday(int32_t value) {
  
  _impl_.change_since_yesterday_ = value;
}
inline void GetLiveFollowerCountResponse::set_change_since_yesterday(int32_t value) {
  _internal_set_change_since_yesterday(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetLiveFollowerCountResponse.change_since_yesterday)
}

// -------------------------------------------------------------------

// GetRecentActivityRequest

// string user_id = 1;
inline void GetRecentActivityRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& GetRecentActivityRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentActivityRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecentActivityRequest.user_id)
}
inline std::string* GetRecentActivityRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecentActivityRequest.user_id)
  return _s;
}
inline const std::string& GetRecentActivityRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void GetRecentActivityRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentActivityRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentActivityRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecentActivityRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void GetRecentActivityRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecentActivityRequest.user_id)
}

// int32 limit = 2;
inline void GetRecentActivityRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t GetRecentActivityRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t GetRecentActivityRequest::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityRequest.limit)
  return _internal_limit();
}
inline void GetRecentActivityRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void GetRecentActivityRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecentActivityRequest.limit)
}

// string activity_type = 3;
inline void GetRecentActivityRequest::clear_activity_type() {
  _impl_.activity_type_.ClearToEmpty();
}
inline const std::string& GetRecentActivityRequest::activity_type() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityRequest.activity_type)
  return _internal_activity_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRecentActivityRequest::set_activity_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.activity_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecentActivityRequest.activity_type)
}
inline std::string* GetRecentActivityRequest::mutable_activity_type() {
  std::string* _s = _internal_mutable_activity_type();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecentActivityRequest.activity_type)
  return _s;
}
inline const std::string& GetRecentActivityRequest::_internal_activity_type() const {
  return _impl_.activity_type_.Get();
}
inline void GetRecentActivityRequest::_internal_set_activity_type(const std::string& value) {
  
  _impl_.activity_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRecentActivityRequest::_internal_mutable_activity_type() {
  
  return _impl_.activity_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRecentActivityRequest::release_activity_type() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecentActivityRequest.activity_type)
  return _impl_.activity_type_.Release();
}
inline void GetRecentActivityRequest::set_allocated_activity_type(std::string* activity_type) {
  if (activity_type != nullptr) {
    
  } else {
    
  }
  _impl_.activity_type_.SetAllocated(activity_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.activity_type_.IsDefault()) {
    _impl_.activity_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecentActivityRequest.activity_type)
}

// -------------------------------------------------------------------

// GetRecentActivityResponse

// repeated .sonet.follow.v1.FollowActivity activities = 1;
inline int GetRecentActivityResponse::_internal_activities_size() const {
  return _impl_.activities_.size();
}
inline int GetRecentActivityResponse::activities_size() const {
  return _internal_activities_size();
}
inline void GetRecentActivityResponse::clear_activities() {
  _impl_.activities_.Clear();
}
inline ::sonet::follow::v1::FollowActivity* GetRecentActivityResponse::mutable_activities(int index) {
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecentActivityResponse.activities)
  return _impl_.activities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::FollowActivity >*
GetRecentActivityResponse::mutable_activities() {
  // @@protoc_insertion_point(field_mutable_list:sonet.follow.v1.GetRecentActivityResponse.activities)
  return &_impl_.activities_;
}
inline const ::sonet::follow::v1::FollowActivity& GetRecentActivityResponse::_internal_activities(int index) const {
  return _impl_.activities_.Get(index);
}
inline const ::sonet::follow::v1::FollowActivity& GetRecentActivityResponse::activities(int index) const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityResponse.activities)
  return _internal_activities(index);
}
inline ::sonet::follow::v1::FollowActivity* GetRecentActivityResponse::_internal_add_activities() {
  return _impl_.activities_.Add();
}
inline ::sonet::follow::v1::FollowActivity* GetRecentActivityResponse::add_activities() {
  ::sonet::follow::v1::FollowActivity* _add = _internal_add_activities();
  // @@protoc_insertion_point(field_add:sonet.follow.v1.GetRecentActivityResponse.activities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sonet::follow::v1::FollowActivity >&
GetRecentActivityResponse::activities() const {
  // @@protoc_insertion_point(field_list:sonet.follow.v1.GetRecentActivityResponse.activities)
  return _impl_.activities_;
}

// bool has_more = 2;
inline void GetRecentActivityResponse::clear_has_more() {
  _impl_.has_more_ = false;
}
inline bool GetRecentActivityResponse::_internal_has_more() const {
  return _impl_.has_more_;
}
inline bool GetRecentActivityResponse::has_more() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityResponse.has_more)
  return _internal_has_more();
}
inline void GetRecentActivityResponse::_internal_set_has_more(bool value) {
  
  _impl_.has_more_ = value;
}
inline void GetRecentActivityResponse::set_has_more(bool value) {
  _internal_set_has_more(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.GetRecentActivityResponse.has_more)
}

// .google.protobuf.Timestamp last_updated = 3;
inline bool GetRecentActivityResponse::_internal_has_last_updated() const {
  return this != internal_default_instance() && _impl_.last_updated_ != nullptr;
}
inline bool GetRecentActivityResponse::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetRecentActivityResponse::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetRecentActivityResponse::last_updated() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.GetRecentActivityResponse.last_updated)
  return _internal_last_updated();
}
inline void GetRecentActivityResponse::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  _impl_.last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.GetRecentActivityResponse.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecentActivityResponse::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecentActivityResponse::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.GetRecentActivityResponse.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_updated_;
  _impl_.last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecentActivityResponse::_internal_mutable_last_updated() {
  
  if (_impl_.last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_updated_ = p;
  }
  return _impl_.last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetRecentActivityResponse::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.GetRecentActivityResponse.last_updated)
  return _msg;
}
inline void GetRecentActivityResponse::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.GetRecentActivityResponse.last_updated)
}

// -------------------------------------------------------------------

// FollowActivity

// string activity_id = 1;
inline void FollowActivity::clear_activity_id() {
  _impl_.activity_id_.ClearToEmpty();
}
inline const std::string& FollowActivity::activity_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.activity_id)
  return _internal_activity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowActivity::set_activity_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.activity_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowActivity.activity_id)
}
inline std::string* FollowActivity::mutable_activity_id() {
  std::string* _s = _internal_mutable_activity_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.activity_id)
  return _s;
}
inline const std::string& FollowActivity::_internal_activity_id() const {
  return _impl_.activity_id_.Get();
}
inline void FollowActivity::_internal_set_activity_id(const std::string& value) {
  
  _impl_.activity_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowActivity::_internal_mutable_activity_id() {
  
  return _impl_.activity_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowActivity::release_activity_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.activity_id)
  return _impl_.activity_id_.Release();
}
inline void FollowActivity::set_allocated_activity_id(std::string* activity_id) {
  if (activity_id != nullptr) {
    
  } else {
    
  }
  _impl_.activity_id_.SetAllocated(activity_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.activity_id_.IsDefault()) {
    _impl_.activity_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.activity_id)
}

// string actor_user_id = 2;
inline void FollowActivity::clear_actor_user_id() {
  _impl_.actor_user_id_.ClearToEmpty();
}
inline const std::string& FollowActivity::actor_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.actor_user_id)
  return _internal_actor_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowActivity::set_actor_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.actor_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowActivity.actor_user_id)
}
inline std::string* FollowActivity::mutable_actor_user_id() {
  std::string* _s = _internal_mutable_actor_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.actor_user_id)
  return _s;
}
inline const std::string& FollowActivity::_internal_actor_user_id() const {
  return _impl_.actor_user_id_.Get();
}
inline void FollowActivity::_internal_set_actor_user_id(const std::string& value) {
  
  _impl_.actor_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowActivity::_internal_mutable_actor_user_id() {
  
  return _impl_.actor_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowActivity::release_actor_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.actor_user_id)
  return _impl_.actor_user_id_.Release();
}
inline void FollowActivity::set_allocated_actor_user_id(std::string* actor_user_id) {
  if (actor_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.actor_user_id_.SetAllocated(actor_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.actor_user_id_.IsDefault()) {
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.actor_user_id)
}

// string target_user_id = 3;
inline void FollowActivity::clear_target_user_id() {
  _impl_.target_user_id_.ClearToEmpty();
}
inline const std::string& FollowActivity::target_user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.target_user_id)
  return _internal_target_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowActivity::set_target_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowActivity.target_user_id)
}
inline std::string* FollowActivity::mutable_target_user_id() {
  std::string* _s = _internal_mutable_target_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.target_user_id)
  return _s;
}
inline const std::string& FollowActivity::_internal_target_user_id() const {
  return _impl_.target_user_id_.Get();
}
inline void FollowActivity::_internal_set_target_user_id(const std::string& value) {
  
  _impl_.target_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowActivity::_internal_mutable_target_user_id() {
  
  return _impl_.target_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowActivity::release_target_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.target_user_id)
  return _impl_.target_user_id_.Release();
}
inline void FollowActivity::set_allocated_target_user_id(std::string* target_user_id) {
  if (target_user_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_user_id_.SetAllocated(target_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_user_id_.IsDefault()) {
    _impl_.target_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.target_user_id)
}

// string action = 4;
inline void FollowActivity::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& FollowActivity::action() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowActivity::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.FollowActivity.action)
}
inline std::string* FollowActivity::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.action)
  return _s;
}
inline const std::string& FollowActivity::_internal_action() const {
  return _impl_.action_.Get();
}
inline void FollowActivity::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowActivity::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowActivity::release_action() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.action)
  return _impl_.action_.Release();
}
inline void FollowActivity::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.action)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool FollowActivity::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool FollowActivity::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FollowActivity::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FollowActivity::timestamp() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.timestamp)
  return _internal_timestamp();
}
inline void FollowActivity::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.FollowActivity.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FollowActivity::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FollowActivity::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FollowActivity::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FollowActivity::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.timestamp)
  return _msg;
}
inline void FollowActivity::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.timestamp)
}

// .sonet.follow.v1.UserInfo actor = 6;
inline bool FollowActivity::_internal_has_actor() const {
  return this != internal_default_instance() && _impl_.actor_ != nullptr;
}
inline bool FollowActivity::has_actor() const {
  return _internal_has_actor();
}
inline void FollowActivity::clear_actor() {
  if (GetArenaForAllocation() == nullptr && _impl_.actor_ != nullptr) {
    delete _impl_.actor_;
  }
  _impl_.actor_ = nullptr;
}
inline const ::sonet::follow::v1::UserInfo& FollowActivity::_internal_actor() const {
  const ::sonet::follow::v1::UserInfo* p = _impl_.actor_;
  return p != nullptr ? *p : reinterpret_cast<const ::sonet::follow::v1::UserInfo&>(
      ::sonet::follow::v1::_UserInfo_default_instance_);
}
inline const ::sonet::follow::v1::UserInfo& FollowActivity::actor() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.FollowActivity.actor)
  return _internal_actor();
}
inline void FollowActivity::unsafe_arena_set_allocated_actor(
    ::sonet::follow::v1::UserInfo* actor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actor_);
  }
  _impl_.actor_ = actor;
  if (actor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.FollowActivity.actor)
}
inline ::sonet::follow::v1::UserInfo* FollowActivity::release_actor() {
  
  ::sonet::follow::v1::UserInfo* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sonet::follow::v1::UserInfo* FollowActivity::unsafe_arena_release_actor() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.FollowActivity.actor)
  
  ::sonet::follow::v1::UserInfo* temp = _impl_.actor_;
  _impl_.actor_ = nullptr;
  return temp;
}
inline ::sonet::follow::v1::UserInfo* FollowActivity::_internal_mutable_actor() {
  
  if (_impl_.actor_ == nullptr) {
    auto* p = CreateMaybeMessage<::sonet::follow::v1::UserInfo>(GetArenaForAllocation());
    _impl_.actor_ = p;
  }
  return _impl_.actor_;
}
inline ::sonet::follow::v1::UserInfo* FollowActivity::mutable_actor() {
  ::sonet::follow::v1::UserInfo* _msg = _internal_mutable_actor();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.FollowActivity.actor)
  return _msg;
}
inline void FollowActivity::set_allocated_actor(::sonet::follow::v1::UserInfo* actor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.actor_;
  }
  if (actor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(actor);
    if (message_arena != submessage_arena) {
      actor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.FollowActivity.actor)
}

// -------------------------------------------------------------------

// ValidateFollowRequest

// string follower_id = 1;
inline void ValidateFollowRequest::clear_follower_id() {
  _impl_.follower_id_.ClearToEmpty();
}
inline const std::string& ValidateFollowRequest::follower_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowRequest.follower_id)
  return _internal_follower_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateFollowRequest::set_follower_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.follower_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowRequest.follower_id)
}
inline std::string* ValidateFollowRequest::mutable_follower_id() {
  std::string* _s = _internal_mutable_follower_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.ValidateFollowRequest.follower_id)
  return _s;
}
inline const std::string& ValidateFollowRequest::_internal_follower_id() const {
  return _impl_.follower_id_.Get();
}
inline void ValidateFollowRequest::_internal_set_follower_id(const std::string& value) {
  
  _impl_.follower_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateFollowRequest::_internal_mutable_follower_id() {
  
  return _impl_.follower_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateFollowRequest::release_follower_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.ValidateFollowRequest.follower_id)
  return _impl_.follower_id_.Release();
}
inline void ValidateFollowRequest::set_allocated_follower_id(std::string* follower_id) {
  if (follower_id != nullptr) {
    
  } else {
    
  }
  _impl_.follower_id_.SetAllocated(follower_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.follower_id_.IsDefault()) {
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.ValidateFollowRequest.follower_id)
}

// string following_id = 2;
inline void ValidateFollowRequest::clear_following_id() {
  _impl_.following_id_.ClearToEmpty();
}
inline const std::string& ValidateFollowRequest::following_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowRequest.following_id)
  return _internal_following_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateFollowRequest::set_following_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.following_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowRequest.following_id)
}
inline std::string* ValidateFollowRequest::mutable_following_id() {
  std::string* _s = _internal_mutable_following_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.ValidateFollowRequest.following_id)
  return _s;
}
inline const std::string& ValidateFollowRequest::_internal_following_id() const {
  return _impl_.following_id_.Get();
}
inline void ValidateFollowRequest::_internal_set_following_id(const std::string& value) {
  
  _impl_.following_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateFollowRequest::_internal_mutable_following_id() {
  
  return _impl_.following_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateFollowRequest::release_following_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.ValidateFollowRequest.following_id)
  return _impl_.following_id_.Release();
}
inline void ValidateFollowRequest::set_allocated_following_id(std::string* following_id) {
  if (following_id != nullptr) {
    
  } else {
    
  }
  _impl_.following_id_.SetAllocated(following_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.following_id_.IsDefault()) {
    _impl_.following_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.ValidateFollowRequest.following_id)
}

// -------------------------------------------------------------------

// ValidateFollowResponse

// bool can_follow = 1;
inline void ValidateFollowResponse::clear_can_follow() {
  _impl_.can_follow_ = false;
}
inline bool ValidateFollowResponse::_internal_can_follow() const {
  return _impl_.can_follow_;
}
inline bool ValidateFollowResponse::can_follow() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowResponse.can_follow)
  return _internal_can_follow();
}
inline void ValidateFollowResponse::_internal_set_can_follow(bool value) {
  
  _impl_.can_follow_ = value;
}
inline void ValidateFollowResponse::set_can_follow(bool value) {
  _internal_set_can_follow(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowResponse.can_follow)
}

// string reason = 2;
inline void ValidateFollowResponse::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& ValidateFollowResponse::reason() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateFollowResponse::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowResponse.reason)
}
inline std::string* ValidateFollowResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.ValidateFollowResponse.reason)
  return _s;
}
inline const std::string& ValidateFollowResponse::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void ValidateFollowResponse::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidateFollowResponse::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* ValidateFollowResponse::release_reason() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.ValidateFollowResponse.reason)
  return _impl_.reason_.Release();
}
inline void ValidateFollowResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.ValidateFollowResponse.reason)
}

// bool requires_approval = 3;
inline void ValidateFollowResponse::clear_requires_approval() {
  _impl_.requires_approval_ = false;
}
inline bool ValidateFollowResponse::_internal_requires_approval() const {
  return _impl_.requires_approval_;
}
inline bool ValidateFollowResponse::requires_approval() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowResponse.requires_approval)
  return _internal_requires_approval();
}
inline void ValidateFollowResponse::_internal_set_requires_approval(bool value) {
  
  _impl_.requires_approval_ = value;
}
inline void ValidateFollowResponse::set_requires_approval(bool value) {
  _internal_set_requires_approval(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowResponse.requires_approval)
}

// bool is_blocked = 4;
inline void ValidateFollowResponse::clear_is_blocked() {
  _impl_.is_blocked_ = false;
}
inline bool ValidateFollowResponse::_internal_is_blocked() const {
  return _impl_.is_blocked_;
}
inline bool ValidateFollowResponse::is_blocked() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowResponse.is_blocked)
  return _internal_is_blocked();
}
inline void ValidateFollowResponse::_internal_set_is_blocked(bool value) {
  
  _impl_.is_blocked_ = value;
}
inline void ValidateFollowResponse::set_is_blocked(bool value) {
  _internal_set_is_blocked(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowResponse.is_blocked)
}

// bool at_follow_limit = 5;
inline void ValidateFollowResponse::clear_at_follow_limit() {
  _impl_.at_follow_limit_ = false;
}
inline bool ValidateFollowResponse::_internal_at_follow_limit() const {
  return _impl_.at_follow_limit_;
}
inline bool ValidateFollowResponse::at_follow_limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.ValidateFollowResponse.at_follow_limit)
  return _internal_at_follow_limit();
}
inline void ValidateFollowResponse::_internal_set_at_follow_limit(bool value) {
  
  _impl_.at_follow_limit_ = value;
}
inline void ValidateFollowResponse::set_at_follow_limit(bool value) {
  _internal_set_at_follow_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.ValidateFollowResponse.at_follow_limit)
}

// -------------------------------------------------------------------

// CheckRateLimitRequest

// string user_id = 1;
inline void CheckRateLimitRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CheckRateLimitRequest::user_id() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRateLimitRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitRequest.user_id)
}
inline std::string* CheckRateLimitRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRateLimitRequest.user_id)
  return _s;
}
inline const std::string& CheckRateLimitRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CheckRateLimitRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRateLimitRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRateLimitRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRateLimitRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CheckRateLimitRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRateLimitRequest.user_id)
}

// string action = 2;
inline void CheckRateLimitRequest::clear_action() {
  _impl_.action_.ClearToEmpty();
}
inline const std::string& CheckRateLimitRequest::action() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitRequest.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckRateLimitRequest::set_action(ArgT0&& arg0, ArgT... args) {
 
 _impl_.action_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitRequest.action)
}
inline std::string* CheckRateLimitRequest::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRateLimitRequest.action)
  return _s;
}
inline const std::string& CheckRateLimitRequest::_internal_action() const {
  return _impl_.action_.Get();
}
inline void CheckRateLimitRequest::_internal_set_action(const std::string& value) {
  
  _impl_.action_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckRateLimitRequest::_internal_mutable_action() {
  
  return _impl_.action_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckRateLimitRequest::release_action() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRateLimitRequest.action)
  return _impl_.action_.Release();
}
inline void CheckRateLimitRequest::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  _impl_.action_.SetAllocated(action, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.action_.IsDefault()) {
    _impl_.action_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRateLimitRequest.action)
}

// -------------------------------------------------------------------

// CheckRateLimitResponse

// bool allowed = 1;
inline void CheckRateLimitResponse::clear_allowed() {
  _impl_.allowed_ = false;
}
inline bool CheckRateLimitResponse::_internal_allowed() const {
  return _impl_.allowed_;
}
inline bool CheckRateLimitResponse::allowed() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitResponse.allowed)
  return _internal_allowed();
}
inline void CheckRateLimitResponse::_internal_set_allowed(bool value) {
  
  _impl_.allowed_ = value;
}
inline void CheckRateLimitResponse::set_allowed(bool value) {
  _internal_set_allowed(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitResponse.allowed)
}

// int32 limit = 2;
inline void CheckRateLimitResponse::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t CheckRateLimitResponse::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t CheckRateLimitResponse::limit() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitResponse.limit)
  return _internal_limit();
}
inline void CheckRateLimitResponse::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void CheckRateLimitResponse::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitResponse.limit)
}

// int32 remaining = 3;
inline void CheckRateLimitResponse::clear_remaining() {
  _impl_.remaining_ = 0;
}
inline int32_t CheckRateLimitResponse::_internal_remaining() const {
  return _impl_.remaining_;
}
inline int32_t CheckRateLimitResponse::remaining() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitResponse.remaining)
  return _internal_remaining();
}
inline void CheckRateLimitResponse::_internal_set_remaining(int32_t value) {
  
  _impl_.remaining_ = value;
}
inline void CheckRateLimitResponse::set_remaining(int32_t value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitResponse.remaining)
}

// .google.protobuf.Timestamp reset_time = 4;
inline bool CheckRateLimitResponse::_internal_has_reset_time() const {
  return this != internal_default_instance() && _impl_.reset_time_ != nullptr;
}
inline bool CheckRateLimitResponse::has_reset_time() const {
  return _internal_has_reset_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CheckRateLimitResponse::_internal_reset_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.reset_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CheckRateLimitResponse::reset_time() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitResponse.reset_time)
  return _internal_reset_time();
}
inline void CheckRateLimitResponse::unsafe_arena_set_allocated_reset_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* reset_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reset_time_);
  }
  _impl_.reset_time_ = reset_time;
  if (reset_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sonet.follow.v1.CheckRateLimitResponse.reset_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRateLimitResponse::release_reset_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reset_time_;
  _impl_.reset_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRateLimitResponse::unsafe_arena_release_reset_time() {
  // @@protoc_insertion_point(field_release:sonet.follow.v1.CheckRateLimitResponse.reset_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.reset_time_;
  _impl_.reset_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRateLimitResponse::_internal_mutable_reset_time() {
  
  if (_impl_.reset_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.reset_time_ = p;
  }
  return _impl_.reset_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CheckRateLimitResponse::mutable_reset_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_reset_time();
  // @@protoc_insertion_point(field_mutable:sonet.follow.v1.CheckRateLimitResponse.reset_time)
  return _msg;
}
inline void CheckRateLimitResponse::set_allocated_reset_time(::PROTOBUF_NAMESPACE_ID::Timestamp* reset_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reset_time_);
  }
  if (reset_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reset_time));
    if (message_arena != submessage_arena) {
      reset_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reset_time_ = reset_time;
  // @@protoc_insertion_point(field_set_allocated:sonet.follow.v1.CheckRateLimitResponse.reset_time)
}

// int32 retry_after_seconds = 5;
inline void CheckRateLimitResponse::clear_retry_after_seconds() {
  _impl_.retry_after_seconds_ = 0;
}
inline int32_t CheckRateLimitResponse::_internal_retry_after_seconds() const {
  return _impl_.retry_after_seconds_;
}
inline int32_t CheckRateLimitResponse::retry_after_seconds() const {
  // @@protoc_insertion_point(field_get:sonet.follow.v1.CheckRateLimitResponse.retry_after_seconds)
  return _internal_retry_after_seconds();
}
inline void CheckRateLimitResponse::_internal_set_retry_after_seconds(int32_t value) {
  
  _impl_.retry_after_seconds_ = value;
}
inline void CheckRateLimitResponse::set_retry_after_seconds(int32_t value) {
  _internal_set_retry_after_seconds(value);
  // @@protoc_insertion_point(field_set:sonet.follow.v1.CheckRateLimitResponse.retry_after_seconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace follow
}  // namespace sonet

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sonet::follow::v1::FollowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::follow::v1::FollowType>() {
  return ::sonet::follow::v1::FollowType_descriptor();
}
template <> struct is_proto_enum< ::sonet::follow::v1::FollowStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::follow::v1::FollowStatus>() {
  return ::sonet::follow::v1::FollowStatus_descriptor();
}
template <> struct is_proto_enum< ::sonet::follow::v1::FollowNotificationLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::follow::v1::FollowNotificationLevel>() {
  return ::sonet::follow::v1::FollowNotificationLevel_descriptor();
}
template <> struct is_proto_enum< ::sonet::follow::v1::RelationshipType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::follow::v1::RelationshipType>() {
  return ::sonet::follow::v1::RelationshipType_descriptor();
}
template <> struct is_proto_enum< ::sonet::follow::v1::RecommendationAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sonet::follow::v1::RecommendationAlgorithm>() {
  return ::sonet::follow::v1::RecommendationAlgorithm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ffollow_5fservice_2eproto
