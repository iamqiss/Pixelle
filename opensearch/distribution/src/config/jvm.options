## JVM configuration

################################################################
## IMPORTANT: JVM heap size
################################################################
##
## You should always set the min and max JVM heap
## size to the same value. For example, to set
## the heap to 4 GB, set:
##
## -Xms4g
## -Xmx4g
##
## See https://density.org/docs/density/install/important-settings/
## for more information
##
################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space

-Xms${heap.min}
-Xmx${heap.max}

################################################################
## Expert settings
################################################################
##
## All settings below this section are considered
## expert settings. Don't tamper with them unless
## you understand what you are doing
##
################################################################

## GC configuration
8-10:-XX:+UseConcMarkSweepGC
8-10:-XX:CMSInitiatingOccupancyFraction=75
8-10:-XX:+UseCMSInitiatingOccupancyOnly

## G1GC Configuration - Optimized for Performance
# NOTE: G1GC is the default GC for all JDKs 11 and newer
11-:-XX:+UseG1GC
# Optimized G1GC settings for better performance and lower latency
11-:-XX:G1ReservePercent=20
11-:-XX:InitiatingHeapOccupancyPercent=25
11-:-XX:G1HeapRegionSize=16m
11-:-XX:MaxGCPauseMillis=200
11-:-XX:G1MixedGCCountTarget=8
11-:-XX:G1MixedGCLiveThresholdPercent=85
11-:-XX:G1OldCSetRegionThreshold=10
11-:-XX:+G1UseAdaptiveIHOP
11-:-XX:G1AdaptiveIHOPNumInitialSamples=3

## JVM temporary directory
-Djava.io.tmpdir=${DENSITY_TMPDIR}

## heap dumps

# generate a heap dump when an allocation from the Java heap fails
# heap dumps are created in the working directory of the JVM
-XX:+HeapDumpOnOutOfMemoryError

# specify an alternative path for heap dumps; ensure the directory exists and
# has sufficient space
${heap.dump.path}

# specify an alternative path for JVM fatal error logs
${error.file}

## JDK 8 GC logging
8:-XX:+PrintGCDetails
8:-XX:+PrintGCDateStamps
8:-XX:+PrintTenuringDistribution
8:-XX:+PrintGCApplicationStoppedTime
8:-Xloggc:${loggc}
8:-XX:+UseGCLogFileRotation
8:-XX:NumberOfGCLogFiles=32
8:-XX:GCLogFileSize=64m

# JDK 9+ GC logging
9-:-Xlog:gc*,gc+age=trace,safepoint:file=${loggc}:utctime,pid,tags:filecount=32,filesize=64m

# JDK 20+ Incubating Vector Module for SIMD optimizations;
# disabling may reduce performance on vector optimized lucene
20-:--add-modules=jdk.incubator.vector

# See please https://bugs.openjdk.org/browse/JDK-8341127 (openjdk/jdk#21283)
23:-XX:CompileCommand=dontinline,java/lang/invoke/MethodHandle.setAsTypeCache
23:-XX:CompileCommand=dontinline,java/lang/invoke/MethodHandle.asTypeUncached

21-:-javaagent:agent/density-agent.jar
21-:--add-opens=java.base/java.nio=org.apache.arrow.memory.core,ALL-UNNAMED

## Performance Optimizations
# Enable JIT optimizations for better performance
-XX:+TieredCompilation
-XX:TieredStopAtLevel=4
-XX:+UseCompressedOops
-XX:+UseCompressedClassPointers

# Optimize for search workloads
-XX:+UseStringDeduplication
-XX:+OptimizeStringConcat

# Memory and allocation optimizations
-XX:+UseLargePages
-XX:+UseTransparentHugePages
-XX:+AlwaysPreTouch

# Network and I/O optimizations
-Djava.net.preferIPv4Stack=true
-Djava.awt.headless=true
