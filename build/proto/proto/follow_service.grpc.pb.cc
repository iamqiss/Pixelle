// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/follow_service.proto

#include "proto/follow_service.pb.h"
#include "proto/follow_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sonet {
namespace follow {
namespace v1 {

static const char* FollowService_method_names[] = {
  "/sonet.follow.v1.FollowService/FollowUser",
  "/sonet.follow.v1.FollowService/UnfollowUser",
  "/sonet.follow.v1.FollowService/BlockUser",
  "/sonet.follow.v1.FollowService/UnblockUser",
  "/sonet.follow.v1.FollowService/MuteUser",
  "/sonet.follow.v1.FollowService/UnmuteUser",
  "/sonet.follow.v1.FollowService/GetRelationship",
  "/sonet.follow.v1.FollowService/CheckRelationship",
  "/sonet.follow.v1.FollowService/GetBulkRelationships",
  "/sonet.follow.v1.FollowService/GetFollowers",
  "/sonet.follow.v1.FollowService/GetFollowing",
  "/sonet.follow.v1.FollowService/GetMutualFriends",
  "/sonet.follow.v1.FollowService/BulkFollow",
  "/sonet.follow.v1.FollowService/BulkUnfollow",
  "/sonet.follow.v1.FollowService/GetRecommendations",
  "/sonet.follow.v1.FollowService/GetTrendingUsers",
  "/sonet.follow.v1.FollowService/GetFollowerAnalytics",
  "/sonet.follow.v1.FollowService/GetSocialMetrics",
  "/sonet.follow.v1.FollowService/GetLiveFollowerCount",
  "/sonet.follow.v1.FollowService/GetRecentActivity",
  "/sonet.follow.v1.FollowService/StreamFollowerUpdates",
  "/sonet.follow.v1.FollowService/ValidateFollow",
  "/sonet.follow.v1.FollowService/CheckRateLimit",
};

std::unique_ptr< FollowService::Stub> FollowService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FollowService::Stub> stub(new FollowService::Stub(channel, options));
  return stub;
}

FollowService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_FollowUser_(FollowService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnfollowUser_(FollowService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlockUser_(FollowService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnblockUser_(FollowService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MuteUser_(FollowService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnmuteUser_(FollowService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRelationship_(FollowService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckRelationship_(FollowService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBulkRelationships_(FollowService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowers_(FollowService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowing_(FollowService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMutualFriends_(FollowService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BulkFollow_(FollowService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BulkUnfollow_(FollowService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecommendations_(FollowService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTrendingUsers_(FollowService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFollowerAnalytics_(FollowService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSocialMetrics_(FollowService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLiveFollowerCount_(FollowService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecentActivity_(FollowService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamFollowerUpdates_(FollowService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ValidateFollow_(FollowService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckRateLimit_(FollowService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FollowService::Stub::FollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::FollowUserRequest& request, ::sonet::follow::v1::FollowUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::FollowUserRequest, ::sonet::follow::v1::FollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FollowUser_, context, request, response);
}

void FollowService::Stub::async::FollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::FollowUserRequest* request, ::sonet::follow::v1::FollowUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::FollowUserRequest, ::sonet::follow::v1::FollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::FollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::FollowUserRequest* request, ::sonet::follow::v1::FollowUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FollowUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::FollowUserResponse>* FollowService::Stub::PrepareAsyncFollowUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::FollowUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::FollowUserResponse, ::sonet::follow::v1::FollowUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FollowUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::FollowUserResponse>* FollowService::Stub::AsyncFollowUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::FollowUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFollowUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::UnfollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnfollowUserRequest& request, ::sonet::follow::v1::UnfollowUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::UnfollowUserRequest, ::sonet::follow::v1::UnfollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnfollowUser_, context, request, response);
}

void FollowService::Stub::async::UnfollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnfollowUserRequest* request, ::sonet::follow::v1::UnfollowUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::UnfollowUserRequest, ::sonet::follow::v1::UnfollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfollowUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::UnfollowUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnfollowUserRequest* request, ::sonet::follow::v1::UnfollowUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnfollowUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnfollowUserResponse>* FollowService::Stub::PrepareAsyncUnfollowUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnfollowUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::UnfollowUserResponse, ::sonet::follow::v1::UnfollowUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnfollowUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnfollowUserResponse>* FollowService::Stub::AsyncUnfollowUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnfollowUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnfollowUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::BlockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::BlockUserRequest& request, ::sonet::follow::v1::BlockUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::BlockUserRequest, ::sonet::follow::v1::BlockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BlockUser_, context, request, response);
}

void FollowService::Stub::async::BlockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::BlockUserRequest* request, ::sonet::follow::v1::BlockUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::BlockUserRequest, ::sonet::follow::v1::BlockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::BlockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::BlockUserRequest* request, ::sonet::follow::v1::BlockUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BlockUserResponse>* FollowService::Stub::PrepareAsyncBlockUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BlockUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::BlockUserResponse, ::sonet::follow::v1::BlockUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BlockUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BlockUserResponse>* FollowService::Stub::AsyncBlockUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BlockUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBlockUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::UnblockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnblockUserRequest& request, ::sonet::follow::v1::UnblockUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::UnblockUserRequest, ::sonet::follow::v1::UnblockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnblockUser_, context, request, response);
}

void FollowService::Stub::async::UnblockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnblockUserRequest* request, ::sonet::follow::v1::UnblockUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::UnblockUserRequest, ::sonet::follow::v1::UnblockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnblockUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::UnblockUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnblockUserRequest* request, ::sonet::follow::v1::UnblockUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnblockUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnblockUserResponse>* FollowService::Stub::PrepareAsyncUnblockUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnblockUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::UnblockUserResponse, ::sonet::follow::v1::UnblockUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnblockUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnblockUserResponse>* FollowService::Stub::AsyncUnblockUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnblockUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnblockUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::MuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::MuteUserRequest& request, ::sonet::follow::v1::MuteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::MuteUserRequest, ::sonet::follow::v1::MuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MuteUser_, context, request, response);
}

void FollowService::Stub::async::MuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::MuteUserRequest* request, ::sonet::follow::v1::MuteUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::MuteUserRequest, ::sonet::follow::v1::MuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MuteUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::MuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::MuteUserRequest* request, ::sonet::follow::v1::MuteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MuteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::MuteUserResponse>* FollowService::Stub::PrepareAsyncMuteUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::MuteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::MuteUserResponse, ::sonet::follow::v1::MuteUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MuteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::MuteUserResponse>* FollowService::Stub::AsyncMuteUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::MuteUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMuteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::UnmuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnmuteUserRequest& request, ::sonet::follow::v1::UnmuteUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::UnmuteUserRequest, ::sonet::follow::v1::UnmuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnmuteUser_, context, request, response);
}

void FollowService::Stub::async::UnmuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnmuteUserRequest* request, ::sonet::follow::v1::UnmuteUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::UnmuteUserRequest, ::sonet::follow::v1::UnmuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnmuteUser_, context, request, response, std::move(f));
}

void FollowService::Stub::async::UnmuteUser(::grpc::ClientContext* context, const ::sonet::follow::v1::UnmuteUserRequest* request, ::sonet::follow::v1::UnmuteUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnmuteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnmuteUserResponse>* FollowService::Stub::PrepareAsyncUnmuteUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnmuteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::UnmuteUserResponse, ::sonet::follow::v1::UnmuteUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnmuteUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::UnmuteUserResponse>* FollowService::Stub::AsyncUnmuteUserRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::UnmuteUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnmuteUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRelationshipRequest& request, ::sonet::follow::v1::GetRelationshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetRelationshipRequest, ::sonet::follow::v1::GetRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRelationship_, context, request, response);
}

void FollowService::Stub::async::GetRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRelationshipRequest* request, ::sonet::follow::v1::GetRelationshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetRelationshipRequest, ::sonet::follow::v1::GetRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRelationship_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRelationshipRequest* request, ::sonet::follow::v1::GetRelationshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRelationship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRelationshipResponse>* FollowService::Stub::PrepareAsyncGetRelationshipRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetRelationshipResponse, ::sonet::follow::v1::GetRelationshipRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRelationship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRelationshipResponse>* FollowService::Stub::AsyncGetRelationshipRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRelationshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::CheckRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRelationshipRequest& request, ::sonet::follow::v1::CheckRelationshipResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::CheckRelationshipRequest, ::sonet::follow::v1::CheckRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckRelationship_, context, request, response);
}

void FollowService::Stub::async::CheckRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRelationshipRequest* request, ::sonet::follow::v1::CheckRelationshipResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::CheckRelationshipRequest, ::sonet::follow::v1::CheckRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckRelationship_, context, request, response, std::move(f));
}

void FollowService::Stub::async::CheckRelationship(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRelationshipRequest* request, ::sonet::follow::v1::CheckRelationshipResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckRelationship_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::CheckRelationshipResponse>* FollowService::Stub::PrepareAsyncCheckRelationshipRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::CheckRelationshipResponse, ::sonet::follow::v1::CheckRelationshipRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckRelationship_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::CheckRelationshipResponse>* FollowService::Stub::AsyncCheckRelationshipRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRelationshipRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRelationshipRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetBulkRelationships(::grpc::ClientContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest& request, ::sonet::follow::v1::GetBulkRelationshipsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetBulkRelationshipsRequest, ::sonet::follow::v1::GetBulkRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBulkRelationships_, context, request, response);
}

void FollowService::Stub::async::GetBulkRelationships(::grpc::ClientContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest* request, ::sonet::follow::v1::GetBulkRelationshipsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetBulkRelationshipsRequest, ::sonet::follow::v1::GetBulkRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBulkRelationships_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetBulkRelationships(::grpc::ClientContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest* request, ::sonet::follow::v1::GetBulkRelationshipsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBulkRelationships_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetBulkRelationshipsResponse>* FollowService::Stub::PrepareAsyncGetBulkRelationshipsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetBulkRelationshipsResponse, ::sonet::follow::v1::GetBulkRelationshipsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBulkRelationships_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetBulkRelationshipsResponse>* FollowService::Stub::AsyncGetBulkRelationshipsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBulkRelationshipsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetFollowers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowersRequest& request, ::sonet::follow::v1::GetFollowersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetFollowersRequest, ::sonet::follow::v1::GetFollowersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowers_, context, request, response);
}

void FollowService::Stub::async::GetFollowers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowersRequest* request, ::sonet::follow::v1::GetFollowersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetFollowersRequest, ::sonet::follow::v1::GetFollowersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowers_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetFollowers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowersRequest* request, ::sonet::follow::v1::GetFollowersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowersResponse>* FollowService::Stub::PrepareAsyncGetFollowersRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetFollowersResponse, ::sonet::follow::v1::GetFollowersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowersResponse>* FollowService::Stub::AsyncGetFollowersRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetFollowing(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowingRequest& request, ::sonet::follow::v1::GetFollowingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetFollowingRequest, ::sonet::follow::v1::GetFollowingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowing_, context, request, response);
}

void FollowService::Stub::async::GetFollowing(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowingRequest* request, ::sonet::follow::v1::GetFollowingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetFollowingRequest, ::sonet::follow::v1::GetFollowingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowing_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetFollowing(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowingRequest* request, ::sonet::follow::v1::GetFollowingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowing_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowingResponse>* FollowService::Stub::PrepareAsyncGetFollowingRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetFollowingResponse, ::sonet::follow::v1::GetFollowingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowing_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowingResponse>* FollowService::Stub::AsyncGetFollowingRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetMutualFriends(::grpc::ClientContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest& request, ::sonet::follow::v1::GetMutualFriendsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetMutualFriendsRequest, ::sonet::follow::v1::GetMutualFriendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMutualFriends_, context, request, response);
}

void FollowService::Stub::async::GetMutualFriends(::grpc::ClientContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest* request, ::sonet::follow::v1::GetMutualFriendsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetMutualFriendsRequest, ::sonet::follow::v1::GetMutualFriendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMutualFriends_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetMutualFriends(::grpc::ClientContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest* request, ::sonet::follow::v1::GetMutualFriendsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMutualFriends_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetMutualFriendsResponse>* FollowService::Stub::PrepareAsyncGetMutualFriendsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetMutualFriendsResponse, ::sonet::follow::v1::GetMutualFriendsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMutualFriends_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetMutualFriendsResponse>* FollowService::Stub::AsyncGetMutualFriendsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMutualFriendsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::BulkFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::sonet::follow::v1::BulkFollowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BulkFollow_, context, request, response);
}

void FollowService::Stub::async::BulkFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BulkFollow_, context, request, response, std::move(f));
}

void FollowService::Stub::async::BulkFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BulkFollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BulkFollowResponse>* FollowService::Stub::PrepareAsyncBulkFollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::BulkFollowResponse, ::sonet::follow::v1::BulkFollowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BulkFollow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BulkFollowResponse>* FollowService::Stub::AsyncBulkFollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBulkFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::BulkUnfollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::sonet::follow::v1::BulkFollowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BulkUnfollow_, context, request, response);
}

void FollowService::Stub::async::BulkUnfollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BulkUnfollow_, context, request, response, std::move(f));
}

void FollowService::Stub::async::BulkUnfollow(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BulkUnfollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BulkFollowResponse>* FollowService::Stub::PrepareAsyncBulkUnfollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::BulkFollowResponse, ::sonet::follow::v1::BulkFollowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BulkUnfollow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::BulkFollowResponse>* FollowService::Stub::AsyncBulkUnfollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::BulkFollowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBulkUnfollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetRecommendations(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecommendationsRequest& request, ::sonet::follow::v1::GetRecommendationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetRecommendationsRequest, ::sonet::follow::v1::GetRecommendationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecommendations_, context, request, response);
}

void FollowService::Stub::async::GetRecommendations(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecommendationsRequest* request, ::sonet::follow::v1::GetRecommendationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetRecommendationsRequest, ::sonet::follow::v1::GetRecommendationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecommendations_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetRecommendations(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecommendationsRequest* request, ::sonet::follow::v1::GetRecommendationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecommendations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRecommendationsResponse>* FollowService::Stub::PrepareAsyncGetRecommendationsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecommendationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetRecommendationsResponse, ::sonet::follow::v1::GetRecommendationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecommendations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRecommendationsResponse>* FollowService::Stub::AsyncGetRecommendationsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecommendationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecommendationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetTrendingUsers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest& request, ::sonet::follow::v1::GetTrendingUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetTrendingUsersRequest, ::sonet::follow::v1::GetTrendingUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTrendingUsers_, context, request, response);
}

void FollowService::Stub::async::GetTrendingUsers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest* request, ::sonet::follow::v1::GetTrendingUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetTrendingUsersRequest, ::sonet::follow::v1::GetTrendingUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrendingUsers_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetTrendingUsers(::grpc::ClientContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest* request, ::sonet::follow::v1::GetTrendingUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrendingUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetTrendingUsersResponse>* FollowService::Stub::PrepareAsyncGetTrendingUsersRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetTrendingUsersResponse, ::sonet::follow::v1::GetTrendingUsersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTrendingUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetTrendingUsersResponse>* FollowService::Stub::AsyncGetTrendingUsersRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTrendingUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetFollowerAnalytics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest& request, ::sonet::follow::v1::GetFollowerAnalyticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetFollowerAnalyticsRequest, ::sonet::follow::v1::GetFollowerAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFollowerAnalytics_, context, request, response);
}

void FollowService::Stub::async::GetFollowerAnalytics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest* request, ::sonet::follow::v1::GetFollowerAnalyticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetFollowerAnalyticsRequest, ::sonet::follow::v1::GetFollowerAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowerAnalytics_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetFollowerAnalytics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest* request, ::sonet::follow::v1::GetFollowerAnalyticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFollowerAnalytics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowerAnalyticsResponse>* FollowService::Stub::PrepareAsyncGetFollowerAnalyticsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetFollowerAnalyticsResponse, ::sonet::follow::v1::GetFollowerAnalyticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFollowerAnalytics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetFollowerAnalyticsResponse>* FollowService::Stub::AsyncGetFollowerAnalyticsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFollowerAnalyticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetSocialMetrics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest& request, ::sonet::follow::v1::GetSocialMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetSocialMetricsRequest, ::sonet::follow::v1::GetSocialMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSocialMetrics_, context, request, response);
}

void FollowService::Stub::async::GetSocialMetrics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest* request, ::sonet::follow::v1::GetSocialMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetSocialMetricsRequest, ::sonet::follow::v1::GetSocialMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSocialMetrics_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetSocialMetrics(::grpc::ClientContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest* request, ::sonet::follow::v1::GetSocialMetricsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSocialMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetSocialMetricsResponse>* FollowService::Stub::PrepareAsyncGetSocialMetricsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetSocialMetricsResponse, ::sonet::follow::v1::GetSocialMetricsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSocialMetrics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetSocialMetricsResponse>* FollowService::Stub::AsyncGetSocialMetricsRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSocialMetricsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetLiveFollowerCount(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request, ::sonet::follow::v1::GetLiveFollowerCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetLiveFollowerCountRequest, ::sonet::follow::v1::GetLiveFollowerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLiveFollowerCount_, context, request, response);
}

void FollowService::Stub::async::GetLiveFollowerCount(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest* request, ::sonet::follow::v1::GetLiveFollowerCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetLiveFollowerCountRequest, ::sonet::follow::v1::GetLiveFollowerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveFollowerCount_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetLiveFollowerCount(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest* request, ::sonet::follow::v1::GetLiveFollowerCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveFollowerCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetLiveFollowerCountResponse>* FollowService::Stub::PrepareAsyncGetLiveFollowerCountRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetLiveFollowerCountResponse, ::sonet::follow::v1::GetLiveFollowerCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLiveFollowerCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetLiveFollowerCountResponse>* FollowService::Stub::AsyncGetLiveFollowerCountRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLiveFollowerCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::GetRecentActivity(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecentActivityRequest& request, ::sonet::follow::v1::GetRecentActivityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::GetRecentActivityRequest, ::sonet::follow::v1::GetRecentActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecentActivity_, context, request, response);
}

void FollowService::Stub::async::GetRecentActivity(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecentActivityRequest* request, ::sonet::follow::v1::GetRecentActivityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::GetRecentActivityRequest, ::sonet::follow::v1::GetRecentActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecentActivity_, context, request, response, std::move(f));
}

void FollowService::Stub::async::GetRecentActivity(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecentActivityRequest* request, ::sonet::follow::v1::GetRecentActivityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecentActivity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRecentActivityResponse>* FollowService::Stub::PrepareAsyncGetRecentActivityRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecentActivityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::GetRecentActivityResponse, ::sonet::follow::v1::GetRecentActivityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecentActivity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::GetRecentActivityResponse>* FollowService::Stub::AsyncGetRecentActivityRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetRecentActivityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecentActivityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::sonet::follow::v1::FollowActivity>* FollowService::Stub::StreamFollowerUpdatesRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sonet::follow::v1::FollowActivity>::Create(channel_.get(), rpcmethod_StreamFollowerUpdates_, context, request);
}

void FollowService::Stub::async::StreamFollowerUpdates(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest* request, ::grpc::ClientReadReactor< ::sonet::follow::v1::FollowActivity>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sonet::follow::v1::FollowActivity>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamFollowerUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sonet::follow::v1::FollowActivity>* FollowService::Stub::AsyncStreamFollowerUpdatesRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sonet::follow::v1::FollowActivity>::Create(channel_.get(), cq, rpcmethod_StreamFollowerUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sonet::follow::v1::FollowActivity>* FollowService::Stub::PrepareAsyncStreamFollowerUpdatesRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sonet::follow::v1::FollowActivity>::Create(channel_.get(), cq, rpcmethod_StreamFollowerUpdates_, context, request, false, nullptr);
}

::grpc::Status FollowService::Stub::ValidateFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::ValidateFollowRequest& request, ::sonet::follow::v1::ValidateFollowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::ValidateFollowRequest, ::sonet::follow::v1::ValidateFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateFollow_, context, request, response);
}

void FollowService::Stub::async::ValidateFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::ValidateFollowRequest* request, ::sonet::follow::v1::ValidateFollowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::ValidateFollowRequest, ::sonet::follow::v1::ValidateFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateFollow_, context, request, response, std::move(f));
}

void FollowService::Stub::async::ValidateFollow(::grpc::ClientContext* context, const ::sonet::follow::v1::ValidateFollowRequest* request, ::sonet::follow::v1::ValidateFollowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateFollow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::ValidateFollowResponse>* FollowService::Stub::PrepareAsyncValidateFollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::ValidateFollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::ValidateFollowResponse, ::sonet::follow::v1::ValidateFollowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateFollow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::ValidateFollowResponse>* FollowService::Stub::AsyncValidateFollowRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::ValidateFollowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateFollowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FollowService::Stub::CheckRateLimit(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRateLimitRequest& request, ::sonet::follow::v1::CheckRateLimitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sonet::follow::v1::CheckRateLimitRequest, ::sonet::follow::v1::CheckRateLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckRateLimit_, context, request, response);
}

void FollowService::Stub::async::CheckRateLimit(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRateLimitRequest* request, ::sonet::follow::v1::CheckRateLimitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sonet::follow::v1::CheckRateLimitRequest, ::sonet::follow::v1::CheckRateLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckRateLimit_, context, request, response, std::move(f));
}

void FollowService::Stub::async::CheckRateLimit(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRateLimitRequest* request, ::sonet::follow::v1::CheckRateLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckRateLimit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::CheckRateLimitResponse>* FollowService::Stub::PrepareAsyncCheckRateLimitRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRateLimitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sonet::follow::v1::CheckRateLimitResponse, ::sonet::follow::v1::CheckRateLimitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckRateLimit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sonet::follow::v1::CheckRateLimitResponse>* FollowService::Stub::AsyncCheckRateLimitRaw(::grpc::ClientContext* context, const ::sonet::follow::v1::CheckRateLimitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckRateLimitRaw(context, request, cq);
  result->StartCall();
  return result;
}

FollowService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::FollowUserRequest, ::sonet::follow::v1::FollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::FollowUserRequest* req,
             ::sonet::follow::v1::FollowUserResponse* resp) {
               return service->FollowUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::UnfollowUserRequest, ::sonet::follow::v1::UnfollowUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::UnfollowUserRequest* req,
             ::sonet::follow::v1::UnfollowUserResponse* resp) {
               return service->UnfollowUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::BlockUserRequest, ::sonet::follow::v1::BlockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::BlockUserRequest* req,
             ::sonet::follow::v1::BlockUserResponse* resp) {
               return service->BlockUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::UnblockUserRequest, ::sonet::follow::v1::UnblockUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::UnblockUserRequest* req,
             ::sonet::follow::v1::UnblockUserResponse* resp) {
               return service->UnblockUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::MuteUserRequest, ::sonet::follow::v1::MuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::MuteUserRequest* req,
             ::sonet::follow::v1::MuteUserResponse* resp) {
               return service->MuteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::UnmuteUserRequest, ::sonet::follow::v1::UnmuteUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::UnmuteUserRequest* req,
             ::sonet::follow::v1::UnmuteUserResponse* resp) {
               return service->UnmuteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetRelationshipRequest, ::sonet::follow::v1::GetRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetRelationshipRequest* req,
             ::sonet::follow::v1::GetRelationshipResponse* resp) {
               return service->GetRelationship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::CheckRelationshipRequest, ::sonet::follow::v1::CheckRelationshipResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::CheckRelationshipRequest* req,
             ::sonet::follow::v1::CheckRelationshipResponse* resp) {
               return service->CheckRelationship(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetBulkRelationshipsRequest, ::sonet::follow::v1::GetBulkRelationshipsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetBulkRelationshipsRequest* req,
             ::sonet::follow::v1::GetBulkRelationshipsResponse* resp) {
               return service->GetBulkRelationships(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetFollowersRequest, ::sonet::follow::v1::GetFollowersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetFollowersRequest* req,
             ::sonet::follow::v1::GetFollowersResponse* resp) {
               return service->GetFollowers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetFollowingRequest, ::sonet::follow::v1::GetFollowingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetFollowingRequest* req,
             ::sonet::follow::v1::GetFollowingResponse* resp) {
               return service->GetFollowing(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetMutualFriendsRequest, ::sonet::follow::v1::GetMutualFriendsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetMutualFriendsRequest* req,
             ::sonet::follow::v1::GetMutualFriendsResponse* resp) {
               return service->GetMutualFriends(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::BulkFollowRequest* req,
             ::sonet::follow::v1::BulkFollowResponse* resp) {
               return service->BulkFollow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::BulkFollowRequest, ::sonet::follow::v1::BulkFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::BulkFollowRequest* req,
             ::sonet::follow::v1::BulkFollowResponse* resp) {
               return service->BulkUnfollow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetRecommendationsRequest, ::sonet::follow::v1::GetRecommendationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetRecommendationsRequest* req,
             ::sonet::follow::v1::GetRecommendationsResponse* resp) {
               return service->GetRecommendations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetTrendingUsersRequest, ::sonet::follow::v1::GetTrendingUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetTrendingUsersRequest* req,
             ::sonet::follow::v1::GetTrendingUsersResponse* resp) {
               return service->GetTrendingUsers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetFollowerAnalyticsRequest, ::sonet::follow::v1::GetFollowerAnalyticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetFollowerAnalyticsRequest* req,
             ::sonet::follow::v1::GetFollowerAnalyticsResponse* resp) {
               return service->GetFollowerAnalytics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetSocialMetricsRequest, ::sonet::follow::v1::GetSocialMetricsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetSocialMetricsRequest* req,
             ::sonet::follow::v1::GetSocialMetricsResponse* resp) {
               return service->GetSocialMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetLiveFollowerCountRequest, ::sonet::follow::v1::GetLiveFollowerCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetLiveFollowerCountRequest* req,
             ::sonet::follow::v1::GetLiveFollowerCountResponse* resp) {
               return service->GetLiveFollowerCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::GetRecentActivityRequest, ::sonet::follow::v1::GetRecentActivityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetRecentActivityRequest* req,
             ::sonet::follow::v1::GetRecentActivityResponse* resp) {
               return service->GetRecentActivity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FollowService::Service, ::sonet::follow::v1::GetLiveFollowerCountRequest, ::sonet::follow::v1::FollowActivity>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::GetLiveFollowerCountRequest* req,
             ::grpc::ServerWriter<::sonet::follow::v1::FollowActivity>* writer) {
               return service->StreamFollowerUpdates(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::ValidateFollowRequest, ::sonet::follow::v1::ValidateFollowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::ValidateFollowRequest* req,
             ::sonet::follow::v1::ValidateFollowResponse* resp) {
               return service->ValidateFollow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FollowService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FollowService::Service, ::sonet::follow::v1::CheckRateLimitRequest, ::sonet::follow::v1::CheckRateLimitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FollowService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sonet::follow::v1::CheckRateLimitRequest* req,
             ::sonet::follow::v1::CheckRateLimitResponse* resp) {
               return service->CheckRateLimit(ctx, req, resp);
             }, this)));
}

FollowService::Service::~Service() {
}

::grpc::Status FollowService::Service::FollowUser(::grpc::ServerContext* context, const ::sonet::follow::v1::FollowUserRequest* request, ::sonet::follow::v1::FollowUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::UnfollowUser(::grpc::ServerContext* context, const ::sonet::follow::v1::UnfollowUserRequest* request, ::sonet::follow::v1::UnfollowUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::BlockUser(::grpc::ServerContext* context, const ::sonet::follow::v1::BlockUserRequest* request, ::sonet::follow::v1::BlockUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::UnblockUser(::grpc::ServerContext* context, const ::sonet::follow::v1::UnblockUserRequest* request, ::sonet::follow::v1::UnblockUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::MuteUser(::grpc::ServerContext* context, const ::sonet::follow::v1::MuteUserRequest* request, ::sonet::follow::v1::MuteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::UnmuteUser(::grpc::ServerContext* context, const ::sonet::follow::v1::UnmuteUserRequest* request, ::sonet::follow::v1::UnmuteUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetRelationship(::grpc::ServerContext* context, const ::sonet::follow::v1::GetRelationshipRequest* request, ::sonet::follow::v1::GetRelationshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::CheckRelationship(::grpc::ServerContext* context, const ::sonet::follow::v1::CheckRelationshipRequest* request, ::sonet::follow::v1::CheckRelationshipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetBulkRelationships(::grpc::ServerContext* context, const ::sonet::follow::v1::GetBulkRelationshipsRequest* request, ::sonet::follow::v1::GetBulkRelationshipsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetFollowers(::grpc::ServerContext* context, const ::sonet::follow::v1::GetFollowersRequest* request, ::sonet::follow::v1::GetFollowersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetFollowing(::grpc::ServerContext* context, const ::sonet::follow::v1::GetFollowingRequest* request, ::sonet::follow::v1::GetFollowingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetMutualFriends(::grpc::ServerContext* context, const ::sonet::follow::v1::GetMutualFriendsRequest* request, ::sonet::follow::v1::GetMutualFriendsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::BulkFollow(::grpc::ServerContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::BulkUnfollow(::grpc::ServerContext* context, const ::sonet::follow::v1::BulkFollowRequest* request, ::sonet::follow::v1::BulkFollowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetRecommendations(::grpc::ServerContext* context, const ::sonet::follow::v1::GetRecommendationsRequest* request, ::sonet::follow::v1::GetRecommendationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetTrendingUsers(::grpc::ServerContext* context, const ::sonet::follow::v1::GetTrendingUsersRequest* request, ::sonet::follow::v1::GetTrendingUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetFollowerAnalytics(::grpc::ServerContext* context, const ::sonet::follow::v1::GetFollowerAnalyticsRequest* request, ::sonet::follow::v1::GetFollowerAnalyticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetSocialMetrics(::grpc::ServerContext* context, const ::sonet::follow::v1::GetSocialMetricsRequest* request, ::sonet::follow::v1::GetSocialMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetLiveFollowerCount(::grpc::ServerContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest* request, ::sonet::follow::v1::GetLiveFollowerCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::GetRecentActivity(::grpc::ServerContext* context, const ::sonet::follow::v1::GetRecentActivityRequest* request, ::sonet::follow::v1::GetRecentActivityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::StreamFollowerUpdates(::grpc::ServerContext* context, const ::sonet::follow::v1::GetLiveFollowerCountRequest* request, ::grpc::ServerWriter< ::sonet::follow::v1::FollowActivity>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::ValidateFollow(::grpc::ServerContext* context, const ::sonet::follow::v1::ValidateFollowRequest* request, ::sonet::follow::v1::ValidateFollowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FollowService::Service::CheckRateLimit(::grpc::ServerContext* context, const ::sonet::follow::v1::CheckRateLimitRequest* request, ::sonet::follow::v1::CheckRateLimitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sonet
}  // namespace follow
}  // namespace v1

