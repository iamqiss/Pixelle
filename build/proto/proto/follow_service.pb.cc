// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/follow_service.proto

#include "proto/follow_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sonet {
namespace follow {
namespace v1 {
PROTOBUF_CONSTEXPR Follow::Follow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.follow_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.following_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.follow_source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.approved_at_)*/nullptr
  , /*decltype(_impl_.last_interaction_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.engagement_score_)*/0
  , /*decltype(_impl_.interaction_count_)*/0
  , /*decltype(_impl_.is_muted_)*/false
  , /*decltype(_impl_.show_retweets_)*/false
  , /*decltype(_impl_.show_replies_)*/false
  , /*decltype(_impl_.is_close_friend_)*/false
  , /*decltype(_impl_.notification_level_)*/0
  , /*decltype(_impl_.mutual_friends_count_)*/0
  , /*decltype(_impl_.relationship_strength_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowDefaultTypeInternal() {}
  union {
    Follow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowDefaultTypeInternal _Follow_default_instance_;
PROTOBUF_CONSTEXPR Relationship::Relationship(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relationship_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user1_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user2_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.user1_followed_user2_at_)*/nullptr
  , /*decltype(_impl_.user2_followed_user1_at_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.user1_follows_user2_)*/false
  , /*decltype(_impl_.user2_follows_user1_)*/false
  , /*decltype(_impl_.user1_blocks_user2_)*/false
  , /*decltype(_impl_.user2_blocks_user1_)*/false
  , /*decltype(_impl_.user1_mutes_user2_)*/false
  , /*decltype(_impl_.user2_mutes_user1_)*/false
  , /*decltype(_impl_.is_close_friends_)*/false
  , /*decltype(_impl_.is_verified_relationship_)*/false
  , /*decltype(_impl_.total_interactions_)*/0
  , /*decltype(_impl_.relationship_strength_)*/0
  , /*decltype(_impl_.engagement_rate_)*/0
  , /*decltype(_impl_.mutual_followers_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelationshipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelationshipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelationshipDefaultTypeInternal() {}
  union {
    Relationship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelationshipDefaultTypeInternal _Relationship_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_active_at_)*/nullptr
  , /*decltype(_impl_.is_verified_)*/false
  , /*decltype(_impl_.is_private_)*/false
  , /*decltype(_impl_.followers_count_)*/0
  , /*decltype(_impl_.following_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR Recommendation::Recommendation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.common_interests_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.algorithm_)*/0
  , /*decltype(_impl_.mutual_friends_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecommendationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecommendationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecommendationDefaultTypeInternal() {}
  union {
    Recommendation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecommendationDefaultTypeInternal _Recommendation_default_instance_;
PROTOBUF_CONSTEXPR PaginationInfo::PaginationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previous_cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.has_next_)*/false
  , /*decltype(_impl_.has_previous_)*/false
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PaginationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationInfoDefaultTypeInternal() {}
  union {
    PaginationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationInfoDefaultTypeInternal _PaginationInfo_default_instance_;
PROTOBUF_CONSTEXPR FollowUserRequest::FollowUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowUserRequestDefaultTypeInternal() {}
  union {
    FollowUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowUserRequestDefaultTypeInternal _FollowUserRequest_default_instance_;
PROTOBUF_CONSTEXPR FollowUserResponse::FollowUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.follow_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_already_following_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowUserResponseDefaultTypeInternal() {}
  union {
    FollowUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowUserResponseDefaultTypeInternal _FollowUserResponse_default_instance_;
PROTOBUF_CONSTEXPR UnfollowUserRequest::UnfollowUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnfollowUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnfollowUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnfollowUserRequestDefaultTypeInternal() {}
  union {
    UnfollowUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnfollowUserRequestDefaultTypeInternal _UnfollowUserRequest_default_instance_;
PROTOBUF_CONSTEXPR UnfollowUserResponse::UnfollowUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_following_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnfollowUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnfollowUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnfollowUserResponseDefaultTypeInternal() {}
  union {
    UnfollowUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnfollowUserResponseDefaultTypeInternal _UnfollowUserResponse_default_instance_;
PROTOBUF_CONSTEXPR BlockUserRequest::BlockUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blocker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockUserRequestDefaultTypeInternal() {}
  union {
    BlockUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockUserRequestDefaultTypeInternal _BlockUserRequest_default_instance_;
PROTOBUF_CONSTEXPR BlockUserResponse::BlockUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_already_blocked_)*/false
  , /*decltype(_impl_.unfollowed_automatically_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockUserResponseDefaultTypeInternal() {}
  union {
    BlockUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockUserResponseDefaultTypeInternal _BlockUserResponse_default_instance_;
PROTOBUF_CONSTEXPR UnblockUserRequest::UnblockUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blocker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnblockUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnblockUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnblockUserRequestDefaultTypeInternal() {}
  union {
    UnblockUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnblockUserRequestDefaultTypeInternal _UnblockUserRequest_default_instance_;
PROTOBUF_CONSTEXPR UnblockUserResponse::UnblockUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_blocked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnblockUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnblockUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnblockUserResponseDefaultTypeInternal() {}
  union {
    UnblockUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnblockUserResponseDefaultTypeInternal _UnblockUserResponse_default_instance_;
PROTOBUF_CONSTEXPR MuteUserRequest::MuteUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.muter_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mute_notifications_)*/false
  , /*decltype(_impl_.mute_content_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MuteUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteUserRequestDefaultTypeInternal() {}
  union {
    MuteUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteUserRequestDefaultTypeInternal _MuteUserRequest_default_instance_;
PROTOBUF_CONSTEXPR MuteUserResponse::MuteUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_already_muted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MuteUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteUserResponseDefaultTypeInternal() {}
  union {
    MuteUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteUserResponseDefaultTypeInternal _MuteUserResponse_default_instance_;
PROTOBUF_CONSTEXPR UnmuteUserRequest::UnmuteUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.muter_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnmuteUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteUserRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteUserRequestDefaultTypeInternal() {}
  union {
    UnmuteUserRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteUserRequestDefaultTypeInternal _UnmuteUserRequest_default_instance_;
PROTOBUF_CONSTEXPR UnmuteUserResponse::UnmuteUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.was_muted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnmuteUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnmuteUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnmuteUserResponseDefaultTypeInternal() {}
  union {
    UnmuteUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnmuteUserResponseDefaultTypeInternal _UnmuteUserResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRelationshipRequest::GetRelationshipRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user1_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user2_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRelationshipRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRelationshipRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRelationshipRequestDefaultTypeInternal() {}
  union {
    GetRelationshipRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRelationshipRequestDefaultTypeInternal _GetRelationshipRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRelationshipResponse::GetRelationshipResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relationship_)*/nullptr
  , /*decltype(_impl_.found_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRelationshipResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRelationshipResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRelationshipResponseDefaultTypeInternal() {}
  union {
    GetRelationshipResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRelationshipResponseDefaultTypeInternal _GetRelationshipResponse_default_instance_;
PROTOBUF_CONSTEXPR CheckRelationshipRequest::CheckRelationshipRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.following_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relationship_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckRelationshipRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRelationshipRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRelationshipRequestDefaultTypeInternal() {}
  union {
    CheckRelationshipRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRelationshipRequestDefaultTypeInternal _CheckRelationshipRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckRelationshipResponse::CheckRelationshipResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.since_)*/nullptr
  , /*decltype(_impl_.exists_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckRelationshipResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRelationshipResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRelationshipResponseDefaultTypeInternal() {}
  union {
    CheckRelationshipResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRelationshipResponseDefaultTypeInternal _CheckRelationshipResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBulkRelationshipsRequest::GetBulkRelationshipsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_user_ids_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBulkRelationshipsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBulkRelationshipsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBulkRelationshipsRequestDefaultTypeInternal() {}
  union {
    GetBulkRelationshipsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBulkRelationshipsRequestDefaultTypeInternal _GetBulkRelationshipsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUseDefaultTypeInternal _GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetBulkRelationshipsResponse::GetBulkRelationshipsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relationships_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.not_found_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBulkRelationshipsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBulkRelationshipsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBulkRelationshipsResponseDefaultTypeInternal() {}
  union {
    GetBulkRelationshipsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBulkRelationshipsResponseDefaultTypeInternal _GetBulkRelationshipsResponse_default_instance_;
PROTOBUF_CONSTEXPR BulkFollowRequest::BulkFollowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_ids_)*/{}
  , /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkFollowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkFollowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkFollowRequestDefaultTypeInternal() {}
  union {
    BulkFollowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkFollowRequestDefaultTypeInternal _BulkFollowRequest_default_instance_;
PROTOBUF_CONSTEXPR BulkFollowResponse::BulkFollowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.successful_)*/{}
  , /*decltype(_impl_.failed_)*/{}
  , /*decltype(_impl_.already_following_)*/{}
  , /*decltype(_impl_.blocked_)*/{}
  , /*decltype(_impl_.pending_)*/{}
  , /*decltype(_impl_.total_requested_)*/0
  , /*decltype(_impl_.total_successful_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulkFollowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulkFollowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulkFollowResponseDefaultTypeInternal() {}
  union {
    BulkFollowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulkFollowResponseDefaultTypeInternal _BulkFollowResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFollowersRequest::GetFollowersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.include_analytics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowersRequestDefaultTypeInternal() {}
  union {
    GetFollowersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowersRequestDefaultTypeInternal _GetFollowersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFollowersResponse::GetFollowersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.followers_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowersResponseDefaultTypeInternal() {}
  union {
    GetFollowersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowersResponseDefaultTypeInternal _GetFollowersResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFollowingRequest::GetFollowingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cursor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.include_analytics_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowingRequestDefaultTypeInternal() {}
  union {
    GetFollowingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowingRequestDefaultTypeInternal _GetFollowingRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFollowingResponse::GetFollowingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.following_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowingResponseDefaultTypeInternal() {}
  union {
    GetFollowingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowingResponseDefaultTypeInternal _GetFollowingResponse_default_instance_;
PROTOBUF_CONSTEXPR GetMutualFriendsRequest::GetMutualFriendsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user1_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user2_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMutualFriendsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMutualFriendsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMutualFriendsRequestDefaultTypeInternal() {}
  union {
    GetMutualFriendsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMutualFriendsRequestDefaultTypeInternal _GetMutualFriendsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetMutualFriendsResponse::GetMutualFriendsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mutual_friends_)*/{}
  , /*decltype(_impl_.total_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMutualFriendsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMutualFriendsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMutualFriendsResponseDefaultTypeInternal() {}
  union {
    GetMutualFriendsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMutualFriendsResponseDefaultTypeInternal _GetMutualFriendsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRecommendationsRequest::GetRecommendationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exclude_user_ids_)*/{}
  , /*decltype(_impl_.interests_)*/{}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.algorithm_)*/0
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecommendationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecommendationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecommendationsRequestDefaultTypeInternal() {}
  union {
    GetRecommendationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecommendationsRequestDefaultTypeInternal _GetRecommendationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRecommendationsResponse::GetRecommendationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recommendations_)*/{}
  , /*decltype(_impl_.algorithm_used_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generated_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecommendationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecommendationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecommendationsResponseDefaultTypeInternal() {}
  union {
    GetRecommendationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecommendationsResponseDefaultTypeInternal _GetRecommendationsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTrendingUsersRequest::GetTrendingUsersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.time_window_hours_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTrendingUsersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrendingUsersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrendingUsersRequestDefaultTypeInternal() {}
  union {
    GetTrendingUsersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrendingUsersRequestDefaultTypeInternal _GetTrendingUsersRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTrendingUsersResponse::GetTrendingUsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trending_users_)*/{}
  , /*decltype(_impl_.time_period_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generated_at_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTrendingUsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrendingUsersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrendingUsersResponseDefaultTypeInternal() {}
  union {
    GetTrendingUsersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrendingUsersResponseDefaultTypeInternal _GetTrendingUsersResponse_default_instance_;
PROTOBUF_CONSTEXPR GetFollowerAnalyticsRequest::GetFollowerAnalyticsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_range_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowerAnalyticsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowerAnalyticsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowerAnalyticsRequestDefaultTypeInternal() {}
  union {
    GetFollowerAnalyticsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowerAnalyticsRequestDefaultTypeInternal _GetFollowerAnalyticsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUseDefaultTypeInternal _GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUseDefaultTypeInternal _GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponse::GetFollowerAnalyticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.followers_by_country_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.daily_growth_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.total_followers_)*/0
  , /*decltype(_impl_.total_following_)*/0
  , /*decltype(_impl_.mutual_follows_)*/0
  , /*decltype(_impl_.followers_gained_today_)*/0
  , /*decltype(_impl_.followers_lost_today_)*/0
  , /*decltype(_impl_.followers_gained_week_)*/0
  , /*decltype(_impl_.followers_lost_week_)*/0
  , /*decltype(_impl_.followers_gained_month_)*/0
  , /*decltype(_impl_.average_engagement_rate_)*/0
  , /*decltype(_impl_.followers_lost_month_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetFollowerAnalyticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFollowerAnalyticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFollowerAnalyticsResponseDefaultTypeInternal() {}
  union {
    GetFollowerAnalyticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFollowerAnalyticsResponseDefaultTypeInternal _GetFollowerAnalyticsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetSocialMetricsRequest::GetSocialMetricsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSocialMetricsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSocialMetricsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSocialMetricsRequestDefaultTypeInternal() {}
  union {
    GetSocialMetricsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSocialMetricsRequestDefaultTypeInternal _GetSocialMetricsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSocialMetricsResponse::GetSocialMetricsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_updated_)*/nullptr
  , /*decltype(_impl_.followers_count_)*/0
  , /*decltype(_impl_.following_count_)*/0
  , /*decltype(_impl_.followers_following_ratio_)*/0
  , /*decltype(_impl_.average_engagement_score_)*/0
  , /*decltype(_impl_.influence_score_)*/0
  , /*decltype(_impl_.network_reach_)*/0
  , /*decltype(_impl_.mutual_connections_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSocialMetricsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSocialMetricsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSocialMetricsResponseDefaultTypeInternal() {}
  union {
    GetSocialMetricsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSocialMetricsResponseDefaultTypeInternal _GetSocialMetricsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLiveFollowerCountRequest::GetLiveFollowerCountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requesting_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLiveFollowerCountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLiveFollowerCountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLiveFollowerCountRequestDefaultTypeInternal() {}
  union {
    GetLiveFollowerCountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLiveFollowerCountRequestDefaultTypeInternal _GetLiveFollowerCountRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLiveFollowerCountResponse::GetLiveFollowerCountResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_updated_)*/nullptr
  , /*decltype(_impl_.follower_count_)*/0
  , /*decltype(_impl_.following_count_)*/0
  , /*decltype(_impl_.change_since_yesterday_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLiveFollowerCountResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLiveFollowerCountResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLiveFollowerCountResponseDefaultTypeInternal() {}
  union {
    GetLiveFollowerCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLiveFollowerCountResponseDefaultTypeInternal _GetLiveFollowerCountResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRecentActivityRequest::GetRecentActivityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.activity_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecentActivityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecentActivityRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecentActivityRequestDefaultTypeInternal() {}
  union {
    GetRecentActivityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecentActivityRequestDefaultTypeInternal _GetRecentActivityRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRecentActivityResponse::GetRecentActivityResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activities_)*/{}
  , /*decltype(_impl_.last_updated_)*/nullptr
  , /*decltype(_impl_.has_more_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecentActivityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecentActivityResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecentActivityResponseDefaultTypeInternal() {}
  union {
    GetRecentActivityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecentActivityResponseDefaultTypeInternal _GetRecentActivityResponse_default_instance_;
PROTOBUF_CONSTEXPR FollowActivity::FollowActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activity_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.actor_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.actor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowActivityDefaultTypeInternal() {}
  union {
    FollowActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowActivityDefaultTypeInternal _FollowActivity_default_instance_;
PROTOBUF_CONSTEXPR ValidateFollowRequest::ValidateFollowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.follower_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.following_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidateFollowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidateFollowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidateFollowRequestDefaultTypeInternal() {}
  union {
    ValidateFollowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidateFollowRequestDefaultTypeInternal _ValidateFollowRequest_default_instance_;
PROTOBUF_CONSTEXPR ValidateFollowResponse::ValidateFollowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.can_follow_)*/false
  , /*decltype(_impl_.requires_approval_)*/false
  , /*decltype(_impl_.is_blocked_)*/false
  , /*decltype(_impl_.at_follow_limit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidateFollowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidateFollowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidateFollowResponseDefaultTypeInternal() {}
  union {
    ValidateFollowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidateFollowResponseDefaultTypeInternal _ValidateFollowResponse_default_instance_;
PROTOBUF_CONSTEXPR CheckRateLimitRequest::CheckRateLimitRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.action_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckRateLimitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRateLimitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRateLimitRequestDefaultTypeInternal() {}
  union {
    CheckRateLimitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRateLimitRequestDefaultTypeInternal _CheckRateLimitRequest_default_instance_;
PROTOBUF_CONSTEXPR CheckRateLimitResponse::CheckRateLimitResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reset_time_)*/nullptr
  , /*decltype(_impl_.allowed_)*/false
  , /*decltype(_impl_.limit_)*/0
  , /*decltype(_impl_.remaining_)*/0
  , /*decltype(_impl_.retry_after_seconds_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckRateLimitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRateLimitResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRateLimitResponseDefaultTypeInternal() {}
  union {
    CheckRateLimitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRateLimitResponseDefaultTypeInternal _CheckRateLimitResponse_default_instance_;
}  // namespace v1
}  // namespace follow
}  // namespace sonet
static ::_pb::Metadata file_level_metadata_proto_2ffollow_5fservice_2eproto[51];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2ffollow_5fservice_2eproto = nullptr;

const uint32_t TableStruct_proto_2ffollow_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.follow_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.follower_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.following_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.approved_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.interaction_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.last_interaction_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.engagement_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.is_muted_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.show_retweets_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.show_replies_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.is_close_friend_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.notification_level_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.follow_source_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.relationship_strength_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Follow, _impl_.mutual_friends_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.relationship_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user1_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user2_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user1_follows_user2_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user2_follows_user1_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user1_blocks_user2_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user2_blocks_user1_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user1_mutes_user2_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user2_mutes_user1_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.is_close_friends_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.is_verified_relationship_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.created_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user1_followed_user2_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.user2_followed_user1_at_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.total_interactions_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.relationship_strength_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.engagement_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Relationship, _impl_.mutual_followers_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.avatar_url_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.is_verified_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.is_private_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.followers_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.following_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UserInfo, _impl_.last_active_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.mutual_friends_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::Recommendation, _impl_.common_interests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _impl_.next_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _impl_.previous_cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _impl_.has_next_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _impl_.has_previous_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::PaginationInfo, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserRequest, _impl_.follower_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserRequest, _impl_.source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserResponse, _impl_.follow_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowUserResponse, _impl_.was_already_following_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserRequest, _impl_.follower_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnfollowUserResponse, _impl_.was_following_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserRequest, _impl_.blocker_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserRequest, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserResponse, _impl_.was_already_blocked_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BlockUserResponse, _impl_.unfollowed_automatically_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserRequest, _impl_.blocker_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnblockUserResponse, _impl_.was_blocked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserRequest, _impl_.muter_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserRequest, _impl_.mute_notifications_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserRequest, _impl_.mute_content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::MuteUserResponse, _impl_.was_already_muted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserRequest, _impl_.muter_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::UnmuteUserResponse, _impl_.was_muted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipRequest, _impl_.user1_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipRequest, _impl_.user2_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipResponse, _impl_.relationship_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRelationshipResponse, _impl_.found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipRequest, _impl_.follower_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipRequest, _impl_.following_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipRequest, _impl_.relationship_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipResponse, _impl_.exists_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRelationshipResponse, _impl_.since_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsRequest, _impl_.target_user_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse, _impl_.relationships_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetBulkRelationshipsResponse, _impl_.not_found_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowRequest, _impl_.follower_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowRequest, _impl_.user_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.successful_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.failed_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.already_following_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.blocked_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.pending_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.total_requested_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::BulkFollowResponse, _impl_.total_successful_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersRequest, _impl_.include_analytics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersResponse, _impl_.followers_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowersResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _impl_.cursor_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingRequest, _impl_.include_analytics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingResponse, _impl_.following_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowingResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsRequest, _impl_.user1_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsRequest, _impl_.user2_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsRequest, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsResponse, _impl_.mutual_friends_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetMutualFriendsResponse, _impl_.total_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _impl_.algorithm_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _impl_.exclude_user_ids_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsRequest, _impl_.interests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsResponse, _impl_.recommendations_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsResponse, _impl_.algorithm_used_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecommendationsResponse, _impl_.generated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersRequest, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersRequest, _impl_.time_window_hours_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersResponse, _impl_.trending_users_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersResponse, _impl_.time_period_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetTrendingUsersResponse, _impl_.generated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsRequest, _impl_.requesting_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsRequest, _impl_.time_range_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.total_followers_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.total_following_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.mutual_follows_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_gained_today_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_lost_today_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_gained_week_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_lost_week_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_gained_month_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_lost_month_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.average_engagement_rate_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.followers_by_country_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetFollowerAnalyticsResponse, _impl_.daily_growth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsRequest, _impl_.requesting_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.followers_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.following_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.followers_following_ratio_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.average_engagement_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.influence_score_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.mutual_connections_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.network_reach_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetSocialMetricsResponse, _impl_.last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountRequest, _impl_.requesting_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountResponse, _impl_.follower_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountResponse, _impl_.following_count_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountResponse, _impl_.last_updated_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetLiveFollowerCountResponse, _impl_.change_since_yesterday_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityRequest, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityRequest, _impl_.activity_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityResponse, _impl_.activities_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityResponse, _impl_.has_more_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::GetRecentActivityResponse, _impl_.last_updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.activity_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.actor_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.target_user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::FollowActivity, _impl_.actor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowRequest, _impl_.follower_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowRequest, _impl_.following_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _impl_.can_follow_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _impl_.requires_approval_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _impl_.is_blocked_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::ValidateFollowResponse, _impl_.at_follow_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitRequest, _impl_.action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _impl_.allowed_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _impl_.limit_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _impl_.remaining_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _impl_.reset_time_),
  PROTOBUF_FIELD_OFFSET(::sonet::follow::v1::CheckRateLimitResponse, _impl_.retry_after_seconds_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sonet::follow::v1::Follow)},
  { 25, -1, -1, sizeof(::sonet::follow::v1::Relationship)},
  { 51, -1, -1, sizeof(::sonet::follow::v1::UserInfo)},
  { 66, -1, -1, sizeof(::sonet::follow::v1::Recommendation)},
  { 78, -1, -1, sizeof(::sonet::follow::v1::PaginationInfo)},
  { 89, -1, -1, sizeof(::sonet::follow::v1::FollowUserRequest)},
  { 99, -1, -1, sizeof(::sonet::follow::v1::FollowUserResponse)},
  { 109, -1, -1, sizeof(::sonet::follow::v1::UnfollowUserRequest)},
  { 117, -1, -1, sizeof(::sonet::follow::v1::UnfollowUserResponse)},
  { 126, -1, -1, sizeof(::sonet::follow::v1::BlockUserRequest)},
  { 135, -1, -1, sizeof(::sonet::follow::v1::BlockUserResponse)},
  { 145, -1, -1, sizeof(::sonet::follow::v1::UnblockUserRequest)},
  { 153, -1, -1, sizeof(::sonet::follow::v1::UnblockUserResponse)},
  { 162, -1, -1, sizeof(::sonet::follow::v1::MuteUserRequest)},
  { 172, -1, -1, sizeof(::sonet::follow::v1::MuteUserResponse)},
  { 181, -1, -1, sizeof(::sonet::follow::v1::UnmuteUserRequest)},
  { 189, -1, -1, sizeof(::sonet::follow::v1::UnmuteUserResponse)},
  { 198, -1, -1, sizeof(::sonet::follow::v1::GetRelationshipRequest)},
  { 206, -1, -1, sizeof(::sonet::follow::v1::GetRelationshipResponse)},
  { 214, -1, -1, sizeof(::sonet::follow::v1::CheckRelationshipRequest)},
  { 223, -1, -1, sizeof(::sonet::follow::v1::CheckRelationshipResponse)},
  { 231, -1, -1, sizeof(::sonet::follow::v1::GetBulkRelationshipsRequest)},
  { 239, 247, -1, sizeof(::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse)},
  { 249, -1, -1, sizeof(::sonet::follow::v1::GetBulkRelationshipsResponse)},
  { 257, -1, -1, sizeof(::sonet::follow::v1::BulkFollowRequest)},
  { 266, -1, -1, sizeof(::sonet::follow::v1::BulkFollowResponse)},
  { 279, -1, -1, sizeof(::sonet::follow::v1::GetFollowersRequest)},
  { 290, -1, -1, sizeof(::sonet::follow::v1::GetFollowersResponse)},
  { 299, -1, -1, sizeof(::sonet::follow::v1::GetFollowingRequest)},
  { 310, -1, -1, sizeof(::sonet::follow::v1::GetFollowingResponse)},
  { 319, -1, -1, sizeof(::sonet::follow::v1::GetMutualFriendsRequest)},
  { 329, -1, -1, sizeof(::sonet::follow::v1::GetMutualFriendsResponse)},
  { 337, -1, -1, sizeof(::sonet::follow::v1::GetRecommendationsRequest)},
  { 348, -1, -1, sizeof(::sonet::follow::v1::GetRecommendationsResponse)},
  { 357, -1, -1, sizeof(::sonet::follow::v1::GetTrendingUsersRequest)},
  { 367, -1, -1, sizeof(::sonet::follow::v1::GetTrendingUsersResponse)},
  { 376, -1, -1, sizeof(::sonet::follow::v1::GetFollowerAnalyticsRequest)},
  { 385, 393, -1, sizeof(::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse)},
  { 395, 403, -1, sizeof(::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse)},
  { 405, -1, -1, sizeof(::sonet::follow::v1::GetFollowerAnalyticsResponse)},
  { 423, -1, -1, sizeof(::sonet::follow::v1::GetSocialMetricsRequest)},
  { 431, -1, -1, sizeof(::sonet::follow::v1::GetSocialMetricsResponse)},
  { 445, -1, -1, sizeof(::sonet::follow::v1::GetLiveFollowerCountRequest)},
  { 453, -1, -1, sizeof(::sonet::follow::v1::GetLiveFollowerCountResponse)},
  { 463, -1, -1, sizeof(::sonet::follow::v1::GetRecentActivityRequest)},
  { 472, -1, -1, sizeof(::sonet::follow::v1::GetRecentActivityResponse)},
  { 481, -1, -1, sizeof(::sonet::follow::v1::FollowActivity)},
  { 493, -1, -1, sizeof(::sonet::follow::v1::ValidateFollowRequest)},
  { 501, -1, -1, sizeof(::sonet::follow::v1::ValidateFollowResponse)},
  { 512, -1, -1, sizeof(::sonet::follow::v1::CheckRateLimitRequest)},
  { 520, -1, -1, sizeof(::sonet::follow::v1::CheckRateLimitResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sonet::follow::v1::_Follow_default_instance_._instance,
  &::sonet::follow::v1::_Relationship_default_instance_._instance,
  &::sonet::follow::v1::_UserInfo_default_instance_._instance,
  &::sonet::follow::v1::_Recommendation_default_instance_._instance,
  &::sonet::follow::v1::_PaginationInfo_default_instance_._instance,
  &::sonet::follow::v1::_FollowUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_FollowUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_UnfollowUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_UnfollowUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_BlockUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_BlockUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_UnblockUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_UnblockUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_MuteUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_MuteUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_UnmuteUserRequest_default_instance_._instance,
  &::sonet::follow::v1::_UnmuteUserResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetRelationshipRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetRelationshipResponse_default_instance_._instance,
  &::sonet::follow::v1::_CheckRelationshipRequest_default_instance_._instance,
  &::sonet::follow::v1::_CheckRelationshipResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetBulkRelationshipsRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse_default_instance_._instance,
  &::sonet::follow::v1::_GetBulkRelationshipsResponse_default_instance_._instance,
  &::sonet::follow::v1::_BulkFollowRequest_default_instance_._instance,
  &::sonet::follow::v1::_BulkFollowResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowersRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowersResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowingRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowingResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetMutualFriendsRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetMutualFriendsResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetRecommendationsRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetRecommendationsResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetTrendingUsersRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetTrendingUsersResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowerAnalyticsRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse_default_instance_._instance,
  &::sonet::follow::v1::_GetFollowerAnalyticsResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetSocialMetricsRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetSocialMetricsResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetLiveFollowerCountRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetLiveFollowerCountResponse_default_instance_._instance,
  &::sonet::follow::v1::_GetRecentActivityRequest_default_instance_._instance,
  &::sonet::follow::v1::_GetRecentActivityResponse_default_instance_._instance,
  &::sonet::follow::v1::_FollowActivity_default_instance_._instance,
  &::sonet::follow::v1::_ValidateFollowRequest_default_instance_._instance,
  &::sonet::follow::v1::_ValidateFollowResponse_default_instance_._instance,
  &::sonet::follow::v1::_CheckRateLimitRequest_default_instance_._instance,
  &::sonet::follow::v1::_CheckRateLimitResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2ffollow_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032proto/follow_service.proto\022\017sonet.foll"
  "ow.v1\032\037google/protobuf/timestamp.proto\032\033"
  "google/protobuf/empty.proto\"\221\005\n\006Follow\022\021"
  "\n\tfollow_id\030\001 \001(\t\022\023\n\013follower_id\030\002 \001(\t\022\024"
  "\n\014following_id\030\003 \001(\t\022)\n\004type\030\004 \001(\0162\033.son"
  "et.follow.v1.FollowType\022-\n\006status\030\005 \001(\0162"
  "\035.sonet.follow.v1.FollowStatus\022.\n\ncreate"
  "d_at\030\006 \001(\0132\032.google.protobuf.Timestamp\022."
  "\n\nupdated_at\030\007 \001(\0132\032.google.protobuf.Tim"
  "estamp\022/\n\013approved_at\030\010 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\031\n\021interaction_count\030\t \001"
  "(\005\0227\n\023last_interaction_at\030\n \001(\0132\032.google"
  ".protobuf.Timestamp\022\030\n\020engagement_score\030"
  "\013 \001(\001\022\020\n\010is_muted\030\014 \001(\010\022\025\n\rshow_retweets"
  "\030\r \001(\010\022\024\n\014show_replies\030\016 \001(\010\022\027\n\017is_close"
  "_friend\030\017 \001(\010\022D\n\022notification_level\030\020 \001("
  "\0162(.sonet.follow.v1.FollowNotificationLe"
  "vel\022\025\n\rfollow_source\030\021 \001(\t\022\035\n\025relationsh"
  "ip_strength\030\022 \001(\001\022\034\n\024mutual_friends_coun"
  "t\030\023 \001(\005\"\256\005\n\014Relationship\022\027\n\017relationship"
  "_id\030\001 \001(\t\022\020\n\010user1_id\030\002 \001(\t\022\020\n\010user2_id\030"
  "\003 \001(\t\022/\n\004type\030\004 \001(\0162!.sonet.follow.v1.Re"
  "lationshipType\022\033\n\023user1_follows_user2\030\005 "
  "\001(\010\022\033\n\023user2_follows_user1\030\006 \001(\010\022\032\n\022user"
  "1_blocks_user2\030\007 \001(\010\022\032\n\022user2_blocks_use"
  "r1\030\010 \001(\010\022\031\n\021user1_mutes_user2\030\t \001(\010\022\031\n\021u"
  "ser2_mutes_user1\030\n \001(\010\022\030\n\020is_close_frien"
  "ds\030\013 \001(\010\022 \n\030is_verified_relationship\030\014 \001"
  "(\010\022.\n\ncreated_at\030\r \001(\0132\032.google.protobuf"
  ".Timestamp\022.\n\nupdated_at\030\016 \001(\0132\032.google."
  "protobuf.Timestamp\022;\n\027user1_followed_use"
  "r2_at\030\017 \001(\0132\032.google.protobuf.Timestamp\022"
  ";\n\027user2_followed_user1_at\030\020 \001(\0132\032.googl"
  "e.protobuf.Timestamp\022\032\n\022total_interactio"
  "ns\030\021 \001(\005\022\035\n\025relationship_strength\030\022 \001(\001\022"
  "\027\n\017engagement_rate\030\023 \001(\001\022\036\n\026mutual_follo"
  "wers_count\030\024 \001(\005\"\346\001\n\010UserInfo\022\017\n\007user_id"
  "\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\022\024\n\014display_name"
  "\030\003 \001(\t\022\022\n\navatar_url\030\004 \001(\t\022\023\n\013is_verifie"
  "d\030\005 \001(\010\022\022\n\nis_private\030\006 \001(\010\022\027\n\017followers"
  "_count\030\007 \001(\005\022\027\n\017following_count\030\010 \001(\005\0222\n"
  "\016last_active_at\030\t \001(\0132\032.google.protobuf."
  "Timestamp\"\315\001\n\016Recommendation\022\'\n\004user\030\001 \001"
  "(\0132\031.sonet.follow.v1.UserInfo\022\r\n\005score\030\002"
  " \001(\001\022\016\n\006reason\030\003 \001(\t\022;\n\talgorithm\030\004 \001(\0162"
  "(.sonet.follow.v1.RecommendationAlgorith"
  "m\022\034\n\024mutual_friends_count\030\005 \001(\005\022\030\n\020commo"
  "n_interests\030\006 \003(\t\"{\n\016PaginationInfo\022\023\n\013n"
  "ext_cursor\030\001 \001(\t\022\027\n\017previous_cursor\030\002 \001("
  "\t\022\020\n\010has_next\030\003 \001(\010\022\024\n\014has_previous\030\004 \001("
  "\010\022\023\n\013total_count\030\005 \001(\005\"t\n\021FollowUserRequ"
  "est\022\017\n\007user_id\030\001 \001(\t\022\023\n\013follower_id\030\002 \001("
  "\t\022)\n\004type\030\003 \001(\0162\033.sonet.follow.v1.Follow"
  "Type\022\016\n\006source\030\004 \001(\t\"~\n\022FollowUserRespon"
  "se\022\'\n\006follow\030\001 \001(\0132\027.sonet.follow.v1.Fol"
  "low\022\017\n\007success\030\002 \001(\010\022\017\n\007message\030\003 \001(\t\022\035\n"
  "\025was_already_following\030\004 \001(\010\";\n\023Unfollow"
  "UserRequest\022\017\n\007user_id\030\001 \001(\t\022\023\n\013follower"
  "_id\030\002 \001(\t\"O\n\024UnfollowUserResponse\022\017\n\007suc"
  "cess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\025\n\rwas_follo"
  "wing\030\003 \001(\010\"G\n\020BlockUserRequest\022\017\n\007user_i"
  "d\030\001 \001(\t\022\022\n\nblocker_id\030\002 \001(\t\022\016\n\006reason\030\003 "
  "\001(\t\"t\n\021BlockUserResponse\022\017\n\007success\030\001 \001("
  "\010\022\017\n\007message\030\002 \001(\t\022\033\n\023was_already_blocke"
  "d\030\003 \001(\010\022 \n\030unfollowed_automatically\030\004 \001("
  "\010\"9\n\022UnblockUserRequest\022\017\n\007user_id\030\001 \001(\t"
  "\022\022\n\nblocker_id\030\002 \001(\t\"L\n\023UnblockUserRespo"
  "nse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\023\n"
  "\013was_blocked\030\003 \001(\010\"f\n\017MuteUserRequest\022\017\n"
  "\007user_id\030\001 \001(\t\022\020\n\010muter_id\030\002 \001(\t\022\032\n\022mute"
  "_notifications\030\003 \001(\010\022\024\n\014mute_content\030\004 \001"
  "(\010\"O\n\020MuteUserResponse\022\017\n\007success\030\001 \001(\010\022"
  "\017\n\007message\030\002 \001(\t\022\031\n\021was_already_muted\030\003 "
  "\001(\010\"6\n\021UnmuteUserRequest\022\017\n\007user_id\030\001 \001("
  "\t\022\020\n\010muter_id\030\002 \001(\t\"I\n\022UnmuteUserRespons"
  "e\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022\021\n\tw"
  "as_muted\030\003 \001(\010\"<\n\026GetRelationshipRequest"
  "\022\020\n\010user1_id\030\001 \001(\t\022\020\n\010user2_id\030\002 \001(\t\"]\n\027"
  "GetRelationshipResponse\0223\n\014relationship\030"
  "\001 \001(\0132\035.sonet.follow.v1.Relationship\022\r\n\005"
  "found\030\002 \001(\010\"`\n\030CheckRelationshipRequest\022"
  "\023\n\013follower_id\030\001 \001(\t\022\024\n\014following_id\030\002 \001"
  "(\t\022\031\n\021relationship_type\030\003 \001(\t\"V\n\031CheckRe"
  "lationshipResponse\022\016\n\006exists\030\001 \001(\010\022)\n\005si"
  "nce\030\002 \001(\0132\032.google.protobuf.Timestamp\"G\n"
  "\033GetBulkRelationshipsRequest\022\017\n\007user_id\030"
  "\001 \001(\t\022\027\n\017target_user_ids\030\002 \003(\t\"\337\001\n\034GetBu"
  "lkRelationshipsResponse\022W\n\rrelationships"
  "\030\001 \003(\0132@.sonet.follow.v1.GetBulkRelation"
  "shipsResponse.RelationshipsEntry\022\021\n\tnot_"
  "found\030\002 \003(\t\032S\n\022RelationshipsEntry\022\013\n\003key"
  "\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.sonet.follow.v1."
  "Relationship:\0028\001\"e\n\021BulkFollowRequest\022\023\n"
  "\013follower_id\030\001 \001(\t\022\020\n\010user_ids\030\002 \003(\t\022)\n\004"
  "type\030\003 \001(\0162\033.sonet.follow.v1.FollowType\""
  "\250\001\n\022BulkFollowResponse\022\022\n\nsuccessful\030\001 \003"
  "(\t\022\016\n\006failed\030\002 \003(\t\022\031\n\021already_following\030"
  "\003 \003(\t\022\017\n\007blocked\030\004 \003(\t\022\017\n\007pending\030\005 \003(\t\022"
  "\027\n\017total_requested\030\006 \001(\005\022\030\n\020total_succes"
  "sful\030\007 \001(\005\"|\n\023GetFollowersRequest\022\017\n\007use"
  "r_id\030\001 \001(\t\022\032\n\022requesting_user_id\030\002 \001(\t\022\r"
  "\n\005limit\030\003 \001(\005\022\016\n\006cursor\030\004 \001(\t\022\031\n\021include"
  "_analytics\030\005 \001(\010\"\216\001\n\024GetFollowersRespons"
  "e\022,\n\tfollowers\030\001 \003(\0132\031.sonet.follow.v1.U"
  "serInfo\0223\n\npagination\030\002 \001(\0132\037.sonet.foll"
  "ow.v1.PaginationInfo\022\023\n\013total_count\030\003 \001("
  "\005\"|\n\023GetFollowingRequest\022\017\n\007user_id\030\001 \001("
  "\t\022\032\n\022requesting_user_id\030\002 \001(\t\022\r\n\005limit\030\003"
  " \001(\005\022\016\n\006cursor\030\004 \001(\t\022\031\n\021include_analytic"
  "s\030\005 \001(\010\"\216\001\n\024GetFollowingResponse\022,\n\tfoll"
  "owing\030\001 \003(\0132\031.sonet.follow.v1.UserInfo\0223"
  "\n\npagination\030\002 \001(\0132\037.sonet.follow.v1.Pag"
  "inationInfo\022\023\n\013total_count\030\003 \001(\005\"h\n\027GetM"
  "utualFriendsRequest\022\020\n\010user1_id\030\001 \001(\t\022\020\n"
  "\010user2_id\030\002 \001(\t\022\032\n\022requesting_user_id\030\003 "
  "\001(\t\022\r\n\005limit\030\004 \001(\005\"b\n\030GetMutualFriendsRe"
  "sponse\0221\n\016mutual_friends\030\001 \003(\0132\031.sonet.f"
  "ollow.v1.UserInfo\022\023\n\013total_count\030\002 \001(\005\"\245"
  "\001\n\031GetRecommendationsRequest\022\017\n\007user_id\030"
  "\001 \001(\t\022;\n\talgorithm\030\002 \001(\0162(.sonet.follow."
  "v1.RecommendationAlgorithm\022\r\n\005limit\030\003 \001("
  "\005\022\030\n\020exclude_user_ids\030\004 \003(\t\022\021\n\tinterests"
  "\030\005 \003(\t\"\240\001\n\032GetRecommendationsResponse\0228\n"
  "\017recommendations\030\001 \003(\0132\037.sonet.follow.v1"
  ".Recommendation\022\026\n\016algorithm_used\030\002 \001(\t\022"
  "0\n\014generated_at\030\003 \001(\0132\032.google.protobuf."
  "Timestamp\"q\n\027GetTrendingUsersRequest\022\032\n\022"
  "requesting_user_id\030\001 \001(\t\022\r\n\005limit\030\002 \001(\005\022"
  "\020\n\010category\030\003 \001(\t\022\031\n\021time_window_hours\030\004"
  " \001(\005\"\232\001\n\030GetTrendingUsersResponse\0227\n\016tre"
  "nding_users\030\001 \003(\0132\037.sonet.follow.v1.Reco"
  "mmendation\022\023\n\013time_period\030\002 \001(\t\0220\n\014gener"
  "ated_at\030\003 \001(\0132\032.google.protobuf.Timestam"
  "p\"^\n\033GetFollowerAnalyticsRequest\022\017\n\007user"
  "_id\030\001 \001(\t\022\032\n\022requesting_user_id\030\002 \001(\t\022\022\n"
  "\ntime_range\030\003 \001(\t\"\353\004\n\034GetFollowerAnalyti"
  "csResponse\022\027\n\017total_followers\030\001 \001(\005\022\027\n\017t"
  "otal_following\030\002 \001(\005\022\026\n\016mutual_follows\030\003"
  " \001(\005\022\036\n\026followers_gained_today\030\004 \001(\005\022\034\n\024"
  "followers_lost_today\030\005 \001(\005\022\035\n\025followers_"
  "gained_week\030\006 \001(\005\022\033\n\023followers_lost_week"
  "\030\007 \001(\005\022\036\n\026followers_gained_month\030\010 \001(\005\022\034"
  "\n\024followers_lost_month\030\t \001(\005\022\037\n\027average_"
  "engagement_rate\030\n \001(\001\022c\n\024followers_by_co"
  "untry\030\013 \003(\0132E.sonet.follow.v1.GetFollowe"
  "rAnalyticsResponse.FollowersByCountryEnt"
  "ry\022T\n\014daily_growth\030\014 \003(\0132>.sonet.follow."
  "v1.GetFollowerAnalyticsResponse.DailyGro"
  "wthEntry\0329\n\027FollowersByCountryEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\0322\n\020DailyGrow"
  "thEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\""
  "F\n\027GetSocialMetricsRequest\022\017\n\007user_id\030\001 "
  "\001(\t\022\032\n\022requesting_user_id\030\002 \001(\t\"\217\002\n\030GetS"
  "ocialMetricsResponse\022\027\n\017followers_count\030"
  "\001 \001(\005\022\027\n\017following_count\030\002 \001(\005\022!\n\031follow"
  "ers_following_ratio\030\003 \001(\001\022 \n\030average_eng"
  "agement_score\030\004 \001(\001\022\027\n\017influence_score\030\005"
  " \001(\001\022\032\n\022mutual_connections\030\006 \001(\005\022\025\n\rnetw"
  "ork_reach\030\007 \001(\001\0220\n\014last_updated\030\010 \001(\0132\032."
  "google.protobuf.Timestamp\"J\n\033GetLiveFoll"
  "owerCountRequest\022\017\n\007user_id\030\001 \001(\t\022\032\n\022req"
  "uesting_user_id\030\002 \001(\t\"\241\001\n\034GetLiveFollowe"
  "rCountResponse\022\026\n\016follower_count\030\001 \001(\005\022\027"
  "\n\017following_count\030\002 \001(\005\0220\n\014last_updated\030"
  "\003 \001(\0132\032.google.protobuf.Timestamp\022\036\n\026cha"
  "nge_since_yesterday\030\004 \001(\005\"Q\n\030GetRecentAc"
  "tivityRequest\022\017\n\007user_id\030\001 \001(\t\022\r\n\005limit\030"
  "\002 \001(\005\022\025\n\ractivity_type\030\003 \001(\t\"\224\001\n\031GetRece"
  "ntActivityResponse\0223\n\nactivities\030\001 \003(\0132\037"
  ".sonet.follow.v1.FollowActivity\022\020\n\010has_m"
  "ore\030\002 \001(\010\0220\n\014last_updated\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\"\275\001\n\016FollowActivity\022\023"
  "\n\013activity_id\030\001 \001(\t\022\025\n\ractor_user_id\030\002 \001"
  "(\t\022\026\n\016target_user_id\030\003 \001(\t\022\016\n\006action\030\004 \001"
  "(\t\022-\n\ttimestamp\030\005 \001(\0132\032.google.protobuf."
  "Timestamp\022(\n\005actor\030\006 \001(\0132\031.sonet.follow."
  "v1.UserInfo\"B\n\025ValidateFollowRequest\022\023\n\013"
  "follower_id\030\001 \001(\t\022\024\n\014following_id\030\002 \001(\t\""
  "\204\001\n\026ValidateFollowResponse\022\022\n\ncan_follow"
  "\030\001 \001(\010\022\016\n\006reason\030\002 \001(\t\022\031\n\021requires_appro"
  "val\030\003 \001(\010\022\022\n\nis_blocked\030\004 \001(\010\022\027\n\017at_foll"
  "ow_limit\030\005 \001(\010\"8\n\025CheckRateLimitRequest\022"
  "\017\n\007user_id\030\001 \001(\t\022\016\n\006action\030\002 \001(\t\"\230\001\n\026Che"
  "ckRateLimitResponse\022\017\n\007allowed\030\001 \001(\010\022\r\n\005"
  "limit\030\002 \001(\005\022\021\n\tremaining\030\003 \001(\005\022.\n\nreset_"
  "time\030\004 \001(\0132\032.google.protobuf.Timestamp\022\033"
  "\n\023retry_after_seconds\030\005 \001(\005*\255\001\n\nFollowTy"
  "pe\022\033\n\027FOLLOW_TYPE_UNSPECIFIED\020\000\022\030\n\024FOLLO"
  "W_TYPE_STANDARD\020\001\022\034\n\030FOLLOW_TYPE_CLOSE_F"
  "RIEND\020\002\022\026\n\022FOLLOW_TYPE_MUTUAL\020\003\022\027\n\023FOLLO"
  "W_TYPE_PENDING\020\004\022\031\n\025FOLLOW_TYPE_REQUESTE"
  "D\020\005*\267\001\n\014FollowStatus\022\035\n\031FOLLOW_STATUS_UN"
  "SPECIFIED\020\000\022\030\n\024FOLLOW_STATUS_ACTIVE\020\001\022\032\n"
  "\026FOLLOW_STATUS_INACTIVE\020\002\022\031\n\025FOLLOW_STAT"
  "US_PENDING\020\003\022\032\n\026FOLLOW_STATUS_REJECTED\020\004"
  "\022\033\n\027FOLLOW_STATUS_CANCELLED\020\005*\270\001\n\027Follow"
  "NotificationLevel\022\"\n\036NOTIFICATION_LEVEL_"
  "UNSPECIFIED\020\000\022\032\n\026NOTIFICATION_LEVEL_ALL\020"
  "\001\022 \n\034NOTIFICATION_LEVEL_IMPORTANT\020\002\022\037\n\033N"
  "OTIFICATION_LEVEL_MENTIONS\020\003\022\032\n\026NOTIFICA"
  "TION_LEVEL_OFF\020\004*\250\003\n\020RelationshipType\022!\n"
  "\035RELATIONSHIP_TYPE_UNSPECIFIED\020\000\022\032\n\026RELA"
  "TIONSHIP_TYPE_NONE\020\001\022\037\n\033RELATIONSHIP_TYP"
  "E_FOLLOWING\020\002\022!\n\035RELATIONSHIP_TYPE_FOLLO"
  "WED_BY\020\003\022\034\n\030RELATIONSHIP_TYPE_MUTUAL\020\004\022\035"
  "\n\031RELATIONSHIP_TYPE_BLOCKED\020\005\022 \n\034RELATIO"
  "NSHIP_TYPE_BLOCKED_BY\020\006\022\033\n\027RELATIONSHIP_"
  "TYPE_MUTED\020\007\022#\n\037RELATIONSHIP_TYPE_CLOSE_"
  "FRIENDS\020\010\022&\n\"RELATIONSHIP_TYPE_PENDING_I"
  "NCOMING\020\t\022&\n\"RELATIONSHIP_TYPE_PENDING_O"
  "UTGOING\020\n\022 \n\034RELATIONSHIP_TYPE_RESTRICTE"
  "D\020\013*\340\002\n\027RecommendationAlgorithm\022(\n$RECOM"
  "MENDATION_ALGORITHM_UNSPECIFIED\020\000\022+\n\'REC"
  "OMMENDATION_ALGORITHM_MUTUAL_FRIENDS\020\001\022&"
  "\n\"RECOMMENDATION_ALGORITHM_INTERESTS\020\002\022\'"
  "\n#RECOMMENDATION_ALGORITHM_ENGAGEMENT\020\003\022"
  "%\n!RECOMMENDATION_ALGORITHM_LOCATION\020\004\022%"
  "\n!RECOMMENDATION_ALGORITHM_TRENDING\020\005\022*\n"
  "&RECOMMENDATION_ALGORITHM_COLLABORATIVE\020"
  "\006\022#\n\037RECOMMENDATION_ALGORITHM_HYBRID\020\0072\372"
  "\021\n\rFollowService\022U\n\nFollowUser\022\".sonet.f"
  "ollow.v1.FollowUserRequest\032#.sonet.follo"
  "w.v1.FollowUserResponse\022[\n\014UnfollowUser\022"
  "$.sonet.follow.v1.UnfollowUserRequest\032%."
  "sonet.follow.v1.UnfollowUserResponse\022R\n\t"
  "BlockUser\022!.sonet.follow.v1.BlockUserReq"
  "uest\032\".sonet.follow.v1.BlockUserResponse"
  "\022X\n\013UnblockUser\022#.sonet.follow.v1.Unbloc"
  "kUserRequest\032$.sonet.follow.v1.UnblockUs"
  "erResponse\022O\n\010MuteUser\022 .sonet.follow.v1"
  ".MuteUserRequest\032!.sonet.follow.v1.MuteU"
  "serResponse\022U\n\nUnmuteUser\022\".sonet.follow"
  ".v1.UnmuteUserRequest\032#.sonet.follow.v1."
  "UnmuteUserResponse\022d\n\017GetRelationship\022\'."
  "sonet.follow.v1.GetRelationshipRequest\032("
  ".sonet.follow.v1.GetRelationshipResponse"
  "\022j\n\021CheckRelationship\022).sonet.follow.v1."
  "CheckRelationshipRequest\032*.sonet.follow."
  "v1.CheckRelationshipResponse\022s\n\024GetBulkR"
  "elationships\022,.sonet.follow.v1.GetBulkRe"
  "lationshipsRequest\032-.sonet.follow.v1.Get"
  "BulkRelationshipsResponse\022[\n\014GetFollower"
  "s\022$.sonet.follow.v1.GetFollowersRequest\032"
  "%.sonet.follow.v1.GetFollowersResponse\022["
  "\n\014GetFollowing\022$.sonet.follow.v1.GetFoll"
  "owingRequest\032%.sonet.follow.v1.GetFollow"
  "ingResponse\022g\n\020GetMutualFriends\022(.sonet."
  "follow.v1.GetMutualFriendsRequest\032).sone"
  "t.follow.v1.GetMutualFriendsResponse\022U\n\n"
  "BulkFollow\022\".sonet.follow.v1.BulkFollowR"
  "equest\032#.sonet.follow.v1.BulkFollowRespo"
  "nse\022W\n\014BulkUnfollow\022\".sonet.follow.v1.Bu"
  "lkFollowRequest\032#.sonet.follow.v1.BulkFo"
  "llowResponse\022m\n\022GetRecommendations\022*.son"
  "et.follow.v1.GetRecommendationsRequest\032+"
  ".sonet.follow.v1.GetRecommendationsRespo"
  "nse\022g\n\020GetTrendingUsers\022(.sonet.follow.v"
  "1.GetTrendingUsersRequest\032).sonet.follow"
  ".v1.GetTrendingUsersResponse\022s\n\024GetFollo"
  "werAnalytics\022,.sonet.follow.v1.GetFollow"
  "erAnalyticsRequest\032-.sonet.follow.v1.Get"
  "FollowerAnalyticsResponse\022g\n\020GetSocialMe"
  "trics\022(.sonet.follow.v1.GetSocialMetrics"
  "Request\032).sonet.follow.v1.GetSocialMetri"
  "csResponse\022s\n\024GetLiveFollowerCount\022,.son"
  "et.follow.v1.GetLiveFollowerCountRequest"
  "\032-.sonet.follow.v1.GetLiveFollowerCountR"
  "esponse\022j\n\021GetRecentActivity\022).sonet.fol"
  "low.v1.GetRecentActivityRequest\032*.sonet."
  "follow.v1.GetRecentActivityResponse\022h\n\025S"
  "treamFollowerUpdates\022,.sonet.follow.v1.G"
  "etLiveFollowerCountRequest\032\037.sonet.follo"
  "w.v1.FollowActivity0\001\022a\n\016ValidateFollow\022"
  "&.sonet.follow.v1.ValidateFollowRequest\032"
  "\'.sonet.follow.v1.ValidateFollowResponse"
  "\022a\n\016CheckRateLimit\022&.sonet.follow.v1.Che"
  "ckRateLimitRequest\032\'.sonet.follow.v1.Che"
  "ckRateLimitResponseBV\n\023com.sonet.follow."
  "v1B\022FollowServiceProtoP\001Z)github.com/nq-"
  "26/sonet/follow/v1;followv1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2ffollow_5fservice_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2ffollow_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2ffollow_5fservice_2eproto = {
    false, false, 11195, descriptor_table_protodef_proto_2ffollow_5fservice_2eproto,
    "proto/follow_service.proto",
    &descriptor_table_proto_2ffollow_5fservice_2eproto_once, descriptor_table_proto_2ffollow_5fservice_2eproto_deps, 2, 51,
    schemas, file_default_instances, TableStruct_proto_2ffollow_5fservice_2eproto::offsets,
    file_level_metadata_proto_2ffollow_5fservice_2eproto, file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto,
    file_level_service_descriptors_proto_2ffollow_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2ffollow_5fservice_2eproto_getter() {
  return &descriptor_table_proto_2ffollow_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2ffollow_5fservice_2eproto(&descriptor_table_proto_2ffollow_5fservice_2eproto);
namespace sonet {
namespace follow {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ffollow_5fservice_2eproto);
  return file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[0];
}
bool FollowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ffollow_5fservice_2eproto);
  return file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[1];
}
bool FollowStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FollowNotificationLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ffollow_5fservice_2eproto);
  return file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[2];
}
bool FollowNotificationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationshipType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ffollow_5fservice_2eproto);
  return file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[3];
}
bool RelationshipType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecommendationAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2ffollow_5fservice_2eproto);
  return file_level_enum_descriptors_proto_2ffollow_5fservice_2eproto[4];
}
bool RecommendationAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Follow::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Follow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Follow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& approved_at(const Follow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_interaction_at(const Follow* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Follow::_Internal::created_at(const Follow* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Follow::_Internal::updated_at(const Follow* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Follow::_Internal::approved_at(const Follow* msg) {
  return *msg->_impl_.approved_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Follow::_Internal::last_interaction_at(const Follow* msg) {
  return *msg->_impl_.last_interaction_at_;
}
void Follow::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Follow::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void Follow::clear_approved_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.approved_at_ != nullptr) {
    delete _impl_.approved_at_;
  }
  _impl_.approved_at_ = nullptr;
}
void Follow::clear_last_interaction_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_interaction_at_ != nullptr) {
    delete _impl_.last_interaction_at_;
  }
  _impl_.last_interaction_at_ = nullptr;
}
Follow::Follow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.Follow)
}
Follow::Follow(const Follow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Follow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.follow_id_){}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , decltype(_impl_.follow_source_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.approved_at_){nullptr}
    , decltype(_impl_.last_interaction_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.engagement_score_){}
    , decltype(_impl_.interaction_count_){}
    , decltype(_impl_.is_muted_){}
    , decltype(_impl_.show_retweets_){}
    , decltype(_impl_.show_replies_){}
    , decltype(_impl_.is_close_friend_){}
    , decltype(_impl_.notification_level_){}
    , decltype(_impl_.mutual_friends_count_){}
    , decltype(_impl_.relationship_strength_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.follow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follow_id().empty()) {
    _this->_impl_.follow_id_.Set(from._internal_follow_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_following_id().empty()) {
    _this->_impl_.following_id_.Set(from._internal_following_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.follow_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follow_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follow_source().empty()) {
    _this->_impl_.follow_source_.Set(from._internal_follow_source(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_approved_at()) {
    _this->_impl_.approved_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.approved_at_);
  }
  if (from._internal_has_last_interaction_at()) {
    _this->_impl_.last_interaction_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_interaction_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relationship_strength_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.relationship_strength_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.Follow)
}

inline void Follow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.follow_id_){}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , decltype(_impl_.follow_source_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.approved_at_){nullptr}
    , decltype(_impl_.last_interaction_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.engagement_score_){0}
    , decltype(_impl_.interaction_count_){0}
    , decltype(_impl_.is_muted_){false}
    , decltype(_impl_.show_retweets_){false}
    , decltype(_impl_.show_replies_){false}
    , decltype(_impl_.is_close_friend_){false}
    , decltype(_impl_.notification_level_){0}
    , decltype(_impl_.mutual_friends_count_){0}
    , decltype(_impl_.relationship_strength_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.follow_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follow_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.follow_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follow_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Follow::~Follow() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.Follow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Follow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follow_id_.Destroy();
  _impl_.follower_id_.Destroy();
  _impl_.following_id_.Destroy();
  _impl_.follow_source_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.approved_at_;
  if (this != internal_default_instance()) delete _impl_.last_interaction_at_;
}

void Follow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Follow::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.Follow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follow_id_.ClearToEmpty();
  _impl_.follower_id_.ClearToEmpty();
  _impl_.following_id_.ClearToEmpty();
  _impl_.follow_source_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.approved_at_ != nullptr) {
    delete _impl_.approved_at_;
  }
  _impl_.approved_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_interaction_at_ != nullptr) {
    delete _impl_.last_interaction_at_;
  }
  _impl_.last_interaction_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.relationship_strength_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.relationship_strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Follow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string follow_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_follow_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Follow.follow_id"));
        } else
          goto handle_unusual;
        continue;
      // string follower_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Follow.follower_id"));
        } else
          goto handle_unusual;
        continue;
      // string following_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_following_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Follow.following_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.FollowType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::follow::v1::FollowType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.FollowStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::sonet::follow::v1::FollowStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp approved_at = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_approved_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 interaction_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.interaction_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_interaction_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_interaction_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double engagement_score = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.engagement_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_muted = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_retweets = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.show_retweets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_replies = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.show_replies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_close_friend = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.is_close_friend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.FollowNotificationLevel notification_level = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_notification_level(static_cast<::sonet::follow::v1::FollowNotificationLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string follow_source = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_follow_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Follow.follow_source"));
        } else
          goto handle_unusual;
        continue;
      // double relationship_strength = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.relationship_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_friends_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.mutual_friends_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Follow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.Follow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string follow_id = 1;
  if (!this->_internal_follow_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follow_id().data(), static_cast<int>(this->_internal_follow_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Follow.follow_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_follow_id(), target);
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Follow.follower_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_follower_id(), target);
  }

  // string following_id = 3;
  if (!this->_internal_following_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_following_id().data(), static_cast<int>(this->_internal_following_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Follow.following_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_following_id(), target);
  }

  // .sonet.follow.v1.FollowType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // .sonet.follow.v1.FollowStatus status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 7;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp approved_at = 8;
  if (this->_internal_has_approved_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::approved_at(this),
        _Internal::approved_at(this).GetCachedSize(), target, stream);
  }

  // int32 interaction_count = 9;
  if (this->_internal_interaction_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_interaction_count(), target);
  }

  // .google.protobuf.Timestamp last_interaction_at = 10;
  if (this->_internal_has_last_interaction_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last_interaction_at(this),
        _Internal::last_interaction_at(this).GetCachedSize(), target, stream);
  }

  // double engagement_score = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = this->_internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_engagement_score(), target);
  }

  // bool is_muted = 12;
  if (this->_internal_is_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_muted(), target);
  }

  // bool show_retweets = 13;
  if (this->_internal_show_retweets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_show_retweets(), target);
  }

  // bool show_replies = 14;
  if (this->_internal_show_replies() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_show_replies(), target);
  }

  // bool is_close_friend = 15;
  if (this->_internal_is_close_friend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_close_friend(), target);
  }

  // .sonet.follow.v1.FollowNotificationLevel notification_level = 16;
  if (this->_internal_notification_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_notification_level(), target);
  }

  // string follow_source = 17;
  if (!this->_internal_follow_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follow_source().data(), static_cast<int>(this->_internal_follow_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Follow.follow_source");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_follow_source(), target);
  }

  // double relationship_strength = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = this->_internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_relationship_strength(), target);
  }

  // int32 mutual_friends_count = 19;
  if (this->_internal_mutual_friends_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_mutual_friends_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.Follow)
  return target;
}

size_t Follow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.Follow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string follow_id = 1;
  if (!this->_internal_follow_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follow_id());
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  // string following_id = 3;
  if (!this->_internal_following_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_following_id());
  }

  // string follow_source = 17;
  if (!this->_internal_follow_source().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follow_source());
  }

  // .google.protobuf.Timestamp created_at = 6;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 7;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp approved_at = 8;
  if (this->_internal_has_approved_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.approved_at_);
  }

  // .google.protobuf.Timestamp last_interaction_at = 10;
  if (this->_internal_has_last_interaction_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_interaction_at_);
  }

  // .sonet.follow.v1.FollowType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .sonet.follow.v1.FollowStatus status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double engagement_score = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = this->_internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    total_size += 1 + 8;
  }

  // int32 interaction_count = 9;
  if (this->_internal_interaction_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_interaction_count());
  }

  // bool is_muted = 12;
  if (this->_internal_is_muted() != 0) {
    total_size += 1 + 1;
  }

  // bool show_retweets = 13;
  if (this->_internal_show_retweets() != 0) {
    total_size += 1 + 1;
  }

  // bool show_replies = 14;
  if (this->_internal_show_replies() != 0) {
    total_size += 1 + 1;
  }

  // bool is_close_friend = 15;
  if (this->_internal_is_close_friend() != 0) {
    total_size += 1 + 1;
  }

  // .sonet.follow.v1.FollowNotificationLevel notification_level = 16;
  if (this->_internal_notification_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_notification_level());
  }

  // int32 mutual_friends_count = 19;
  if (this->_internal_mutual_friends_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mutual_friends_count());
  }

  // double relationship_strength = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = this->_internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Follow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Follow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Follow::GetClassData() const { return &_class_data_; }


void Follow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Follow*>(&to_msg);
  auto& from = static_cast<const Follow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.Follow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_follow_id().empty()) {
    _this->_internal_set_follow_id(from._internal_follow_id());
  }
  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  if (!from._internal_following_id().empty()) {
    _this->_internal_set_following_id(from._internal_following_id());
  }
  if (!from._internal_follow_source().empty()) {
    _this->_internal_set_follow_source(from._internal_follow_source());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_approved_at()) {
    _this->_internal_mutable_approved_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_approved_at());
  }
  if (from._internal_has_last_interaction_at()) {
    _this->_internal_mutable_last_interaction_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_interaction_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_score = from._internal_engagement_score();
  uint64_t raw_engagement_score;
  memcpy(&raw_engagement_score, &tmp_engagement_score, sizeof(tmp_engagement_score));
  if (raw_engagement_score != 0) {
    _this->_internal_set_engagement_score(from._internal_engagement_score());
  }
  if (from._internal_interaction_count() != 0) {
    _this->_internal_set_interaction_count(from._internal_interaction_count());
  }
  if (from._internal_is_muted() != 0) {
    _this->_internal_set_is_muted(from._internal_is_muted());
  }
  if (from._internal_show_retweets() != 0) {
    _this->_internal_set_show_retweets(from._internal_show_retweets());
  }
  if (from._internal_show_replies() != 0) {
    _this->_internal_set_show_replies(from._internal_show_replies());
  }
  if (from._internal_is_close_friend() != 0) {
    _this->_internal_set_is_close_friend(from._internal_is_close_friend());
  }
  if (from._internal_notification_level() != 0) {
    _this->_internal_set_notification_level(from._internal_notification_level());
  }
  if (from._internal_mutual_friends_count() != 0) {
    _this->_internal_set_mutual_friends_count(from._internal_mutual_friends_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = from._internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    _this->_internal_set_relationship_strength(from._internal_relationship_strength());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Follow::CopyFrom(const Follow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.Follow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Follow::IsInitialized() const {
  return true;
}

void Follow::InternalSwap(Follow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follow_id_, lhs_arena,
      &other->_impl_.follow_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.following_id_, lhs_arena,
      &other->_impl_.following_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follow_source_, lhs_arena,
      &other->_impl_.follow_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Follow, _impl_.relationship_strength_)
      + sizeof(Follow::_impl_.relationship_strength_)
      - PROTOBUF_FIELD_OFFSET(Follow, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Follow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[0]);
}

// ===================================================================

class Relationship::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const Relationship* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const Relationship* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& user1_followed_user2_at(const Relationship* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& user2_followed_user1_at(const Relationship* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Relationship::_Internal::created_at(const Relationship* msg) {
  return *msg->_impl_.created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Relationship::_Internal::updated_at(const Relationship* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Relationship::_Internal::user1_followed_user2_at(const Relationship* msg) {
  return *msg->_impl_.user1_followed_user2_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Relationship::_Internal::user2_followed_user1_at(const Relationship* msg) {
  return *msg->_impl_.user2_followed_user1_at_;
}
void Relationship::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
void Relationship::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void Relationship::clear_user1_followed_user2_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.user1_followed_user2_at_ != nullptr) {
    delete _impl_.user1_followed_user2_at_;
  }
  _impl_.user1_followed_user2_at_ = nullptr;
}
void Relationship::clear_user2_followed_user1_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.user2_followed_user1_at_ != nullptr) {
    delete _impl_.user2_followed_user1_at_;
  }
  _impl_.user2_followed_user1_at_ = nullptr;
}
Relationship::Relationship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.Relationship)
}
Relationship::Relationship(const Relationship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Relationship* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_id_){}
    , decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.user1_followed_user2_at_){nullptr}
    , decltype(_impl_.user2_followed_user1_at_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.user1_follows_user2_){}
    , decltype(_impl_.user2_follows_user1_){}
    , decltype(_impl_.user1_blocks_user2_){}
    , decltype(_impl_.user2_blocks_user1_){}
    , decltype(_impl_.user1_mutes_user2_){}
    , decltype(_impl_.user2_mutes_user1_){}
    , decltype(_impl_.is_close_friends_){}
    , decltype(_impl_.is_verified_relationship_){}
    , decltype(_impl_.total_interactions_){}
    , decltype(_impl_.relationship_strength_){}
    , decltype(_impl_.engagement_rate_){}
    , decltype(_impl_.mutual_followers_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relationship_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relationship_id().empty()) {
    _this->_impl_.relationship_id_.Set(from._internal_relationship_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user1_id().empty()) {
    _this->_impl_.user1_id_.Set(from._internal_user1_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user2_id().empty()) {
    _this->_impl_.user2_id_.Set(from._internal_user2_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_user1_followed_user2_at()) {
    _this->_impl_.user1_followed_user2_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.user1_followed_user2_at_);
  }
  if (from._internal_has_user2_followed_user1_at()) {
    _this->_impl_.user2_followed_user1_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.user2_followed_user1_at_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutual_followers_count_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.mutual_followers_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.Relationship)
}

inline void Relationship::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_id_){}
    , decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.user1_followed_user2_at_){nullptr}
    , decltype(_impl_.user2_followed_user1_at_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.user1_follows_user2_){false}
    , decltype(_impl_.user2_follows_user1_){false}
    , decltype(_impl_.user1_blocks_user2_){false}
    , decltype(_impl_.user2_blocks_user1_){false}
    , decltype(_impl_.user1_mutes_user2_){false}
    , decltype(_impl_.user2_mutes_user1_){false}
    , decltype(_impl_.is_close_friends_){false}
    , decltype(_impl_.is_verified_relationship_){false}
    , decltype(_impl_.total_interactions_){0}
    , decltype(_impl_.relationship_strength_){0}
    , decltype(_impl_.engagement_rate_){0}
    , decltype(_impl_.mutual_followers_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relationship_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Relationship::~Relationship() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.Relationship)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Relationship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relationship_id_.Destroy();
  _impl_.user1_id_.Destroy();
  _impl_.user2_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.user1_followed_user2_at_;
  if (this != internal_default_instance()) delete _impl_.user2_followed_user1_at_;
}

void Relationship::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Relationship::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.Relationship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relationship_id_.ClearToEmpty();
  _impl_.user1_id_.ClearToEmpty();
  _impl_.user2_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user1_followed_user2_at_ != nullptr) {
    delete _impl_.user1_followed_user2_at_;
  }
  _impl_.user1_followed_user2_at_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.user2_followed_user1_at_ != nullptr) {
    delete _impl_.user2_followed_user1_at_;
  }
  _impl_.user2_followed_user1_at_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mutual_followers_count_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.mutual_followers_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relationship::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relationship_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relationship_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Relationship.relationship_id"));
        } else
          goto handle_unusual;
        continue;
      // string user1_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user1_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Relationship.user1_id"));
        } else
          goto handle_unusual;
        continue;
      // string user2_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user2_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Relationship.user2_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.RelationshipType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::follow::v1::RelationshipType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool user1_follows_user2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.user1_follows_user2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool user2_follows_user1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.user2_follows_user1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool user1_blocks_user2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.user1_blocks_user2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool user2_blocks_user1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.user2_blocks_user1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool user1_mutes_user2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.user1_mutes_user2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool user2_mutes_user1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.user2_mutes_user1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_close_friends = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_close_friends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_verified_relationship = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_verified_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp user1_followed_user2_at = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_user1_followed_user2_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp user2_followed_user1_at = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_user2_followed_user1_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_interactions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.total_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double relationship_strength = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.relationship_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double engagement_rate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_followers_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.mutual_followers_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Relationship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.Relationship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relationship_id = 1;
  if (!this->_internal_relationship_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relationship_id().data(), static_cast<int>(this->_internal_relationship_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Relationship.relationship_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_relationship_id(), target);
  }

  // string user1_id = 2;
  if (!this->_internal_user1_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user1_id().data(), static_cast<int>(this->_internal_user1_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Relationship.user1_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user1_id(), target);
  }

  // string user2_id = 3;
  if (!this->_internal_user2_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user2_id().data(), static_cast<int>(this->_internal_user2_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Relationship.user2_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user2_id(), target);
  }

  // .sonet.follow.v1.RelationshipType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // bool user1_follows_user2 = 5;
  if (this->_internal_user1_follows_user2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_user1_follows_user2(), target);
  }

  // bool user2_follows_user1 = 6;
  if (this->_internal_user2_follows_user1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_user2_follows_user1(), target);
  }

  // bool user1_blocks_user2 = 7;
  if (this->_internal_user1_blocks_user2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_user1_blocks_user2(), target);
  }

  // bool user2_blocks_user1 = 8;
  if (this->_internal_user2_blocks_user1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_user2_blocks_user1(), target);
  }

  // bool user1_mutes_user2 = 9;
  if (this->_internal_user1_mutes_user2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_user1_mutes_user2(), target);
  }

  // bool user2_mutes_user1 = 10;
  if (this->_internal_user2_mutes_user1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_user2_mutes_user1(), target);
  }

  // bool is_close_friends = 11;
  if (this->_internal_is_close_friends() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_close_friends(), target);
  }

  // bool is_verified_relationship = 12;
  if (this->_internal_is_verified_relationship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_verified_relationship(), target);
  }

  // .google.protobuf.Timestamp created_at = 13;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 14;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp user1_followed_user2_at = 15;
  if (this->_internal_has_user1_followed_user2_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::user1_followed_user2_at(this),
        _Internal::user1_followed_user2_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp user2_followed_user1_at = 16;
  if (this->_internal_has_user2_followed_user1_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::user2_followed_user1_at(this),
        _Internal::user2_followed_user1_at(this).GetCachedSize(), target, stream);
  }

  // int32 total_interactions = 17;
  if (this->_internal_total_interactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_total_interactions(), target);
  }

  // double relationship_strength = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = this->_internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_relationship_strength(), target);
  }

  // double engagement_rate = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_engagement_rate(), target);
  }

  // int32 mutual_followers_count = 20;
  if (this->_internal_mutual_followers_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_mutual_followers_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.Relationship)
  return target;
}

size_t Relationship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.Relationship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relationship_id = 1;
  if (!this->_internal_relationship_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relationship_id());
  }

  // string user1_id = 2;
  if (!this->_internal_user1_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user1_id());
  }

  // string user2_id = 3;
  if (!this->_internal_user2_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user2_id());
  }

  // .google.protobuf.Timestamp created_at = 13;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 14;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // .google.protobuf.Timestamp user1_followed_user2_at = 15;
  if (this->_internal_has_user1_followed_user2_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user1_followed_user2_at_);
  }

  // .google.protobuf.Timestamp user2_followed_user1_at = 16;
  if (this->_internal_has_user2_followed_user1_at()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user2_followed_user1_at_);
  }

  // .sonet.follow.v1.RelationshipType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool user1_follows_user2 = 5;
  if (this->_internal_user1_follows_user2() != 0) {
    total_size += 1 + 1;
  }

  // bool user2_follows_user1 = 6;
  if (this->_internal_user2_follows_user1() != 0) {
    total_size += 1 + 1;
  }

  // bool user1_blocks_user2 = 7;
  if (this->_internal_user1_blocks_user2() != 0) {
    total_size += 1 + 1;
  }

  // bool user2_blocks_user1 = 8;
  if (this->_internal_user2_blocks_user1() != 0) {
    total_size += 1 + 1;
  }

  // bool user1_mutes_user2 = 9;
  if (this->_internal_user1_mutes_user2() != 0) {
    total_size += 1 + 1;
  }

  // bool user2_mutes_user1 = 10;
  if (this->_internal_user2_mutes_user1() != 0) {
    total_size += 1 + 1;
  }

  // bool is_close_friends = 11;
  if (this->_internal_is_close_friends() != 0) {
    total_size += 1 + 1;
  }

  // bool is_verified_relationship = 12;
  if (this->_internal_is_verified_relationship() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_interactions = 17;
  if (this->_internal_total_interactions() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_total_interactions());
  }

  // double relationship_strength = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = this->_internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    total_size += 2 + 8;
  }

  // double engagement_rate = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = this->_internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    total_size += 2 + 8;
  }

  // int32 mutual_followers_count = 20;
  if (this->_internal_mutual_followers_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mutual_followers_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Relationship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Relationship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Relationship::GetClassData() const { return &_class_data_; }


void Relationship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Relationship*>(&to_msg);
  auto& from = static_cast<const Relationship&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.Relationship)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relationship_id().empty()) {
    _this->_internal_set_relationship_id(from._internal_relationship_id());
  }
  if (!from._internal_user1_id().empty()) {
    _this->_internal_set_user1_id(from._internal_user1_id());
  }
  if (!from._internal_user2_id().empty()) {
    _this->_internal_set_user2_id(from._internal_user2_id());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_has_user1_followed_user2_at()) {
    _this->_internal_mutable_user1_followed_user2_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_user1_followed_user2_at());
  }
  if (from._internal_has_user2_followed_user1_at()) {
    _this->_internal_mutable_user2_followed_user1_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_user2_followed_user1_at());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_user1_follows_user2() != 0) {
    _this->_internal_set_user1_follows_user2(from._internal_user1_follows_user2());
  }
  if (from._internal_user2_follows_user1() != 0) {
    _this->_internal_set_user2_follows_user1(from._internal_user2_follows_user1());
  }
  if (from._internal_user1_blocks_user2() != 0) {
    _this->_internal_set_user1_blocks_user2(from._internal_user1_blocks_user2());
  }
  if (from._internal_user2_blocks_user1() != 0) {
    _this->_internal_set_user2_blocks_user1(from._internal_user2_blocks_user1());
  }
  if (from._internal_user1_mutes_user2() != 0) {
    _this->_internal_set_user1_mutes_user2(from._internal_user1_mutes_user2());
  }
  if (from._internal_user2_mutes_user1() != 0) {
    _this->_internal_set_user2_mutes_user1(from._internal_user2_mutes_user1());
  }
  if (from._internal_is_close_friends() != 0) {
    _this->_internal_set_is_close_friends(from._internal_is_close_friends());
  }
  if (from._internal_is_verified_relationship() != 0) {
    _this->_internal_set_is_verified_relationship(from._internal_is_verified_relationship());
  }
  if (from._internal_total_interactions() != 0) {
    _this->_internal_set_total_interactions(from._internal_total_interactions());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relationship_strength = from._internal_relationship_strength();
  uint64_t raw_relationship_strength;
  memcpy(&raw_relationship_strength, &tmp_relationship_strength, sizeof(tmp_relationship_strength));
  if (raw_relationship_strength != 0) {
    _this->_internal_set_relationship_strength(from._internal_relationship_strength());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_engagement_rate = from._internal_engagement_rate();
  uint64_t raw_engagement_rate;
  memcpy(&raw_engagement_rate, &tmp_engagement_rate, sizeof(tmp_engagement_rate));
  if (raw_engagement_rate != 0) {
    _this->_internal_set_engagement_rate(from._internal_engagement_rate());
  }
  if (from._internal_mutual_followers_count() != 0) {
    _this->_internal_set_mutual_followers_count(from._internal_mutual_followers_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Relationship::CopyFrom(const Relationship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.Relationship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relationship::IsInitialized() const {
  return true;
}

void Relationship::InternalSwap(Relationship* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relationship_id_, lhs_arena,
      &other->_impl_.relationship_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user1_id_, lhs_arena,
      &other->_impl_.user1_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user2_id_, lhs_arena,
      &other->_impl_.user2_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Relationship, _impl_.mutual_followers_count_)
      + sizeof(Relationship::_impl_.mutual_followers_count_)
      - PROTOBUF_FIELD_OFFSET(Relationship, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Relationship::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[1]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_active_at(const UserInfo* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserInfo::_Internal::last_active_at(const UserInfo* msg) {
  return *msg->_impl_.last_active_at_;
}
void UserInfo::clear_last_active_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_active_at_ != nullptr) {
    delete _impl_.last_active_at_;
  }
  _impl_.last_active_at_ = nullptr;
}
UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.last_active_at_){nullptr}
    , decltype(_impl_.is_verified_){}
    , decltype(_impl_.is_private_){}
    , decltype(_impl_.followers_count_){}
    , decltype(_impl_.following_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar_url().empty()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_last_active_at()) {
    _this->_impl_.last_active_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_active_at_);
  }
  ::memcpy(&_impl_.is_verified_, &from._impl_.is_verified_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.following_count_) -
    reinterpret_cast<char*>(&_impl_.is_verified_)) + sizeof(_impl_.following_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.last_active_at_){nullptr}
    , decltype(_impl_.is_verified_){false}
    , decltype(_impl_.is_private_){false}
    , decltype(_impl_.followers_count_){0}
    , decltype(_impl_.following_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.username_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.avatar_url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_active_at_;
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.avatar_url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.last_active_at_ != nullptr) {
    delete _impl_.last_active_at_;
  }
  _impl_.last_active_at_ = nullptr;
  ::memset(&_impl_.is_verified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.following_count_) -
      reinterpret_cast<char*>(&_impl_.is_verified_)) + sizeof(_impl_.following_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UserInfo.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UserInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UserInfo.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string avatar_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UserInfo.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      // bool is_verified = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_private = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_private_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.followers_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 following_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.following_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_active_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_active_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UserInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UserInfo.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UserInfo.display_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display_name(), target);
  }

  // string avatar_url = 4;
  if (!this->_internal_avatar_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UserInfo.avatar_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar_url(), target);
  }

  // bool is_verified = 5;
  if (this->_internal_is_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_verified(), target);
  }

  // bool is_private = 6;
  if (this->_internal_is_private() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_private(), target);
  }

  // int32 followers_count = 7;
  if (this->_internal_followers_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_followers_count(), target);
  }

  // int32 following_count = 8;
  if (this->_internal_following_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_following_count(), target);
  }

  // .google.protobuf.Timestamp last_active_at = 9;
  if (this->_internal_has_last_active_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::last_active_at(this),
        _Internal::last_active_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string avatar_url = 4;
  if (!this->_internal_avatar_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar_url());
  }

  // .google.protobuf.Timestamp last_active_at = 9;
  if (this->_internal_has_last_active_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_active_at_);
  }

  // bool is_verified = 5;
  if (this->_internal_is_verified() != 0) {
    total_size += 1 + 1;
  }

  // bool is_private = 6;
  if (this->_internal_is_private() != 0) {
    total_size += 1 + 1;
  }

  // int32 followers_count = 7;
  if (this->_internal_followers_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_count());
  }

  // int32 following_count = 8;
  if (this->_internal_following_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_following_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }


void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UserInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_avatar_url().empty()) {
    _this->_internal_set_avatar_url(from._internal_avatar_url());
  }
  if (from._internal_has_last_active_at()) {
    _this->_internal_mutable_last_active_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_active_at());
  }
  if (from._internal_is_verified() != 0) {
    _this->_internal_set_is_verified(from._internal_is_verified());
  }
  if (from._internal_is_private() != 0) {
    _this->_internal_set_is_private(from._internal_is_private());
  }
  if (from._internal_followers_count() != 0) {
    _this->_internal_set_followers_count(from._internal_followers_count());
  }
  if (from._internal_following_count() != 0) {
    _this->_internal_set_following_count(from._internal_following_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.following_count_)
      + sizeof(UserInfo::_impl_.following_count_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_active_at_)>(
          reinterpret_cast<char*>(&_impl_.last_active_at_),
          reinterpret_cast<char*>(&other->_impl_.last_active_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[2]);
}

// ===================================================================

class Recommendation::_Internal {
 public:
  static const ::sonet::follow::v1::UserInfo& user(const Recommendation* msg);
};

const ::sonet::follow::v1::UserInfo&
Recommendation::_Internal::user(const Recommendation* msg) {
  return *msg->_impl_.user_;
}
Recommendation::Recommendation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.Recommendation)
}
Recommendation::Recommendation(const Recommendation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Recommendation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.common_interests_){from._impl_.common_interests_}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.score_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.mutual_friends_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::sonet::follow::v1::UserInfo(*from._impl_.user_);
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutual_friends_count_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.mutual_friends_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.Recommendation)
}

inline void Recommendation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.common_interests_){arena}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.algorithm_){0}
    , decltype(_impl_.mutual_friends_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Recommendation::~Recommendation() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.Recommendation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Recommendation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.common_interests_.~RepeatedPtrField();
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void Recommendation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Recommendation::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.Recommendation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.common_interests_.Clear();
  _impl_.reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  ::memset(&_impl_.score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mutual_friends_count_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.mutual_friends_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Recommendation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.follow.v1.UserInfo user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Recommendation.reason"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.RecommendationAlgorithm algorithm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::sonet::follow::v1::RecommendationAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_friends_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mutual_friends_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string common_interests = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_common_interests();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.Recommendation.common_interests"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Recommendation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.Recommendation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.follow.v1.UserInfo user = 1;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // double score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_score(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Recommendation.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 4;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_algorithm(), target);
  }

  // int32 mutual_friends_count = 5;
  if (this->_internal_mutual_friends_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mutual_friends_count(), target);
  }

  // repeated string common_interests = 6;
  for (int i = 0, n = this->_internal_common_interests_size(); i < n; i++) {
    const auto& s = this->_internal_common_interests(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.Recommendation.common_interests");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.Recommendation)
  return target;
}

size_t Recommendation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.Recommendation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string common_interests = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.common_interests_.size());
  for (int i = 0, n = _impl_.common_interests_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.common_interests_.Get(i));
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .sonet.follow.v1.UserInfo user = 1;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // double score = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = this->_internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 8;
  }

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 4;
  if (this->_internal_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  // int32 mutual_friends_count = 5;
  if (this->_internal_mutual_friends_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutual_friends_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Recommendation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Recommendation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Recommendation::GetClassData() const { return &_class_data_; }


void Recommendation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Recommendation*>(&to_msg);
  auto& from = static_cast<const Recommendation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.Recommendation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.common_interests_.MergeFrom(from._impl_.common_interests_);
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::sonet::follow::v1::UserInfo::MergeFrom(
        from._internal_user());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_score = from._internal_score();
  uint64_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_mutual_friends_count() != 0) {
    _this->_internal_set_mutual_friends_count(from._internal_mutual_friends_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Recommendation::CopyFrom(const Recommendation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.Recommendation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recommendation::IsInitialized() const {
  return true;
}

void Recommendation::InternalSwap(Recommendation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.common_interests_.InternalSwap(&other->_impl_.common_interests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Recommendation, _impl_.mutual_friends_count_)
      + sizeof(Recommendation::_impl_.mutual_friends_count_)
      - PROTOBUF_FIELD_OFFSET(Recommendation, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Recommendation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[3]);
}

// ===================================================================

class PaginationInfo::_Internal {
 public:
};

PaginationInfo::PaginationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.PaginationInfo)
}
PaginationInfo::PaginationInfo(const PaginationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PaginationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_cursor_){}
    , decltype(_impl_.previous_cursor_){}
    , decltype(_impl_.has_next_){}
    , decltype(_impl_.has_previous_){}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_cursor().empty()) {
    _this->_impl_.next_cursor_.Set(from._internal_next_cursor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previous_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous_cursor().empty()) {
    _this->_impl_.previous_cursor_.Set(from._internal_previous_cursor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.has_next_, &from._impl_.has_next_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_count_) -
    reinterpret_cast<char*>(&_impl_.has_next_)) + sizeof(_impl_.total_count_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.PaginationInfo)
}

inline void PaginationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.next_cursor_){}
    , decltype(_impl_.previous_cursor_){}
    , decltype(_impl_.has_next_){false}
    , decltype(_impl_.has_previous_){false}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaginationInfo::~PaginationInfo() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.PaginationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaginationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_cursor_.Destroy();
  _impl_.previous_cursor_.Destroy();
}

void PaginationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PaginationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.PaginationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_cursor_.ClearToEmpty();
  _impl_.previous_cursor_.ClearToEmpty();
  ::memset(&_impl_.has_next_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_count_) -
      reinterpret_cast<char*>(&_impl_.has_next_)) + sizeof(_impl_.total_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string next_cursor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.PaginationInfo.next_cursor"));
        } else
          goto handle_unusual;
        continue;
      // string previous_cursor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previous_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.PaginationInfo.previous_cursor"));
        } else
          goto handle_unusual;
        continue;
      // bool has_next = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.has_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_previous = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.has_previous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaginationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.PaginationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_cursor = 1;
  if (!this->_internal_next_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_cursor().data(), static_cast<int>(this->_internal_next_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.PaginationInfo.next_cursor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_next_cursor(), target);
  }

  // string previous_cursor = 2;
  if (!this->_internal_previous_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_previous_cursor().data(), static_cast<int>(this->_internal_previous_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.PaginationInfo.previous_cursor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_previous_cursor(), target);
  }

  // bool has_next = 3;
  if (this->_internal_has_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_next(), target);
  }

  // bool has_previous = 4;
  if (this->_internal_has_previous() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_has_previous(), target);
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.PaginationInfo)
  return target;
}

size_t PaginationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.PaginationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string next_cursor = 1;
  if (!this->_internal_next_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_cursor());
  }

  // string previous_cursor = 2;
  if (!this->_internal_previous_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_cursor());
  }

  // bool has_next = 3;
  if (this->_internal_has_next() != 0) {
    total_size += 1 + 1;
  }

  // bool has_previous = 4;
  if (this->_internal_has_previous() != 0) {
    total_size += 1 + 1;
  }

  // int32 total_count = 5;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PaginationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationInfo::GetClassData() const { return &_class_data_; }


void PaginationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PaginationInfo*>(&to_msg);
  auto& from = static_cast<const PaginationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.PaginationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_cursor().empty()) {
    _this->_internal_set_next_cursor(from._internal_next_cursor());
  }
  if (!from._internal_previous_cursor().empty()) {
    _this->_internal_set_previous_cursor(from._internal_previous_cursor());
  }
  if (from._internal_has_next() != 0) {
    _this->_internal_set_has_next(from._internal_has_next());
  }
  if (from._internal_has_previous() != 0) {
    _this->_internal_set_has_previous(from._internal_has_previous());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationInfo::CopyFrom(const PaginationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.PaginationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationInfo::IsInitialized() const {
  return true;
}

void PaginationInfo::InternalSwap(PaginationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_cursor_, lhs_arena,
      &other->_impl_.next_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_cursor_, lhs_arena,
      &other->_impl_.previous_cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginationInfo, _impl_.total_count_)
      + sizeof(PaginationInfo::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(PaginationInfo, _impl_.has_next_)>(
          reinterpret_cast<char*>(&_impl_.has_next_),
          reinterpret_cast<char*>(&other->_impl_.has_next_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[4]);
}

// ===================================================================

class FollowUserRequest::_Internal {
 public:
};

FollowUserRequest::FollowUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.FollowUserRequest)
}
FollowUserRequest::FollowUserRequest(const FollowUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FollowUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.FollowUserRequest)
}

inline void FollowUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FollowUserRequest::~FollowUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.FollowUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.follower_id_.Destroy();
  _impl_.source_.Destroy();
}

void FollowUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.FollowUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.follower_id_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string follower_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowUserRequest.follower_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.FollowType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::follow::v1::FollowType>(val));
        } else
          goto handle_unusual;
        continue;
      // string source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowUserRequest.source"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.FollowUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowUserRequest.follower_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_follower_id(), target);
  }

  // .sonet.follow.v1.FollowType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string source = 4;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowUserRequest.source");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.FollowUserRequest)
  return target;
}

size_t FollowUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.FollowUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  // string source = 4;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // .sonet.follow.v1.FollowType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowUserRequest::GetClassData() const { return &_class_data_; }


void FollowUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowUserRequest*>(&to_msg);
  auto& from = static_cast<const FollowUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.FollowUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowUserRequest::CopyFrom(const FollowUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.FollowUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowUserRequest::IsInitialized() const {
  return true;
}

void FollowUserRequest::InternalSwap(FollowUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[5]);
}

// ===================================================================

class FollowUserResponse::_Internal {
 public:
  static const ::sonet::follow::v1::Follow& follow(const FollowUserResponse* msg);
};

const ::sonet::follow::v1::Follow&
FollowUserResponse::_Internal::follow(const FollowUserResponse* msg) {
  return *msg->_impl_.follow_;
}
FollowUserResponse::FollowUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.FollowUserResponse)
}
FollowUserResponse::FollowUserResponse(const FollowUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FollowUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.follow_){nullptr}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_already_following_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_follow()) {
    _this->_impl_.follow_ = new ::sonet::follow::v1::Follow(*from._impl_.follow_);
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_already_following_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_already_following_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.FollowUserResponse)
}

inline void FollowUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.follow_){nullptr}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_already_following_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FollowUserResponse::~FollowUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.FollowUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.follow_;
}

void FollowUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.FollowUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.follow_ != nullptr) {
    delete _impl_.follow_;
  }
  _impl_.follow_ = nullptr;
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_already_following_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_already_following_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.follow.v1.Follow follow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_already_following = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.was_already_following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.FollowUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.follow.v1.Follow follow = 1;
  if (this->_internal_has_follow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::follow(this),
        _Internal::follow(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // bool was_already_following = 4;
  if (this->_internal_was_already_following() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_was_already_following(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.FollowUserResponse)
  return target;
}

size_t FollowUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.FollowUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .sonet.follow.v1.Follow follow = 1;
  if (this->_internal_has_follow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.follow_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_already_following = 4;
  if (this->_internal_was_already_following() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowUserResponse::GetClassData() const { return &_class_data_; }


void FollowUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowUserResponse*>(&to_msg);
  auto& from = static_cast<const FollowUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.FollowUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_follow()) {
    _this->_internal_mutable_follow()->::sonet::follow::v1::Follow::MergeFrom(
        from._internal_follow());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_already_following() != 0) {
    _this->_internal_set_was_already_following(from._internal_was_already_following());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowUserResponse::CopyFrom(const FollowUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.FollowUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowUserResponse::IsInitialized() const {
  return true;
}

void FollowUserResponse::InternalSwap(FollowUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowUserResponse, _impl_.was_already_following_)
      + sizeof(FollowUserResponse::_impl_.was_already_following_)
      - PROTOBUF_FIELD_OFFSET(FollowUserResponse, _impl_.follow_)>(
          reinterpret_cast<char*>(&_impl_.follow_),
          reinterpret_cast<char*>(&other->_impl_.follow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[6]);
}

// ===================================================================

class UnfollowUserRequest::_Internal {
 public:
};

UnfollowUserRequest::UnfollowUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnfollowUserRequest)
}
UnfollowUserRequest::UnfollowUserRequest(const UnfollowUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnfollowUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.follower_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnfollowUserRequest)
}

inline void UnfollowUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.follower_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnfollowUserRequest::~UnfollowUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnfollowUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnfollowUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.follower_id_.Destroy();
}

void UnfollowUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnfollowUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnfollowUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.follower_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfollowUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnfollowUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string follower_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnfollowUserRequest.follower_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnfollowUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnfollowUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnfollowUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnfollowUserRequest.follower_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_follower_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnfollowUserRequest)
  return target;
}

size_t UnfollowUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnfollowUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string follower_id = 2;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnfollowUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnfollowUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnfollowUserRequest::GetClassData() const { return &_class_data_; }


void UnfollowUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnfollowUserRequest*>(&to_msg);
  auto& from = static_cast<const UnfollowUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnfollowUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnfollowUserRequest::CopyFrom(const UnfollowUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnfollowUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfollowUserRequest::IsInitialized() const {
  return true;
}

void UnfollowUserRequest::InternalSwap(UnfollowUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfollowUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[7]);
}

// ===================================================================

class UnfollowUserResponse::_Internal {
 public:
};

UnfollowUserResponse::UnfollowUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnfollowUserResponse)
}
UnfollowUserResponse::UnfollowUserResponse(const UnfollowUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnfollowUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_following_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_following_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_following_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnfollowUserResponse)
}

inline void UnfollowUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_following_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnfollowUserResponse::~UnfollowUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnfollowUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnfollowUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UnfollowUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnfollowUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnfollowUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_following_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_following_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnfollowUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnfollowUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_following = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.was_following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnfollowUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnfollowUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnfollowUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool was_following = 3;
  if (this->_internal_was_following() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_following(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnfollowUserResponse)
  return target;
}

size_t UnfollowUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnfollowUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_following = 3;
  if (this->_internal_was_following() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnfollowUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnfollowUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnfollowUserResponse::GetClassData() const { return &_class_data_; }


void UnfollowUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnfollowUserResponse*>(&to_msg);
  auto& from = static_cast<const UnfollowUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnfollowUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_following() != 0) {
    _this->_internal_set_was_following(from._internal_was_following());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnfollowUserResponse::CopyFrom(const UnfollowUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnfollowUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfollowUserResponse::IsInitialized() const {
  return true;
}

void UnfollowUserResponse::InternalSwap(UnfollowUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnfollowUserResponse, _impl_.was_following_)
      + sizeof(UnfollowUserResponse::_impl_.was_following_)
      - PROTOBUF_FIELD_OFFSET(UnfollowUserResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnfollowUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[8]);
}

// ===================================================================

class BlockUserRequest::_Internal {
 public:
};

BlockUserRequest::BlockUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.BlockUserRequest)
}
BlockUserRequest::BlockUserRequest(const BlockUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.blocker_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blocker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blocker_id().empty()) {
    _this->_impl_.blocker_id_.Set(from._internal_blocker_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.BlockUserRequest)
}

inline void BlockUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.blocker_id_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blocker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockUserRequest::~BlockUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.BlockUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.blocker_id_.Destroy();
  _impl_.reason_.Destroy();
}

void BlockUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.BlockUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.blocker_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BlockUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string blocker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blocker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BlockUserRequest.blocker_id"));
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BlockUserRequest.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.BlockUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BlockUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string blocker_id = 2;
  if (!this->_internal_blocker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blocker_id().data(), static_cast<int>(this->_internal_blocker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BlockUserRequest.blocker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blocker_id(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BlockUserRequest.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.BlockUserRequest)
  return target;
}

size_t BlockUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.BlockUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string blocker_id = 2;
  if (!this->_internal_blocker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blocker_id());
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockUserRequest::GetClassData() const { return &_class_data_; }


void BlockUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockUserRequest*>(&to_msg);
  auto& from = static_cast<const BlockUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.BlockUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_blocker_id().empty()) {
    _this->_internal_set_blocker_id(from._internal_blocker_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockUserRequest::CopyFrom(const BlockUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.BlockUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUserRequest::IsInitialized() const {
  return true;
}

void BlockUserRequest::InternalSwap(BlockUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blocker_id_, lhs_arena,
      &other->_impl_.blocker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[9]);
}

// ===================================================================

class BlockUserResponse::_Internal {
 public:
};

BlockUserResponse::BlockUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.BlockUserResponse)
}
BlockUserResponse::BlockUserResponse(const BlockUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_already_blocked_){}
    , decltype(_impl_.unfollowed_automatically_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unfollowed_automatically_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.unfollowed_automatically_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.BlockUserResponse)
}

inline void BlockUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_already_blocked_){false}
    , decltype(_impl_.unfollowed_automatically_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockUserResponse::~BlockUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.BlockUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void BlockUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.BlockUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unfollowed_automatically_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.unfollowed_automatically_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BlockUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_already_blocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.was_already_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unfollowed_automatically = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.unfollowed_automatically_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlockUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.BlockUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BlockUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool was_already_blocked = 3;
  if (this->_internal_was_already_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_already_blocked(), target);
  }

  // bool unfollowed_automatically = 4;
  if (this->_internal_unfollowed_automatically() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_unfollowed_automatically(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.BlockUserResponse)
  return target;
}

size_t BlockUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.BlockUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_already_blocked = 3;
  if (this->_internal_was_already_blocked() != 0) {
    total_size += 1 + 1;
  }

  // bool unfollowed_automatically = 4;
  if (this->_internal_unfollowed_automatically() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockUserResponse::GetClassData() const { return &_class_data_; }


void BlockUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockUserResponse*>(&to_msg);
  auto& from = static_cast<const BlockUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.BlockUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_already_blocked() != 0) {
    _this->_internal_set_was_already_blocked(from._internal_was_already_blocked());
  }
  if (from._internal_unfollowed_automatically() != 0) {
    _this->_internal_set_unfollowed_automatically(from._internal_unfollowed_automatically());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockUserResponse::CopyFrom(const BlockUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.BlockUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockUserResponse::IsInitialized() const {
  return true;
}

void BlockUserResponse::InternalSwap(BlockUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockUserResponse, _impl_.unfollowed_automatically_)
      + sizeof(BlockUserResponse::_impl_.unfollowed_automatically_)
      - PROTOBUF_FIELD_OFFSET(BlockUserResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[10]);
}

// ===================================================================

class UnblockUserRequest::_Internal {
 public:
};

UnblockUserRequest::UnblockUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnblockUserRequest)
}
UnblockUserRequest::UnblockUserRequest(const UnblockUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnblockUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.blocker_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blocker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blocker_id().empty()) {
    _this->_impl_.blocker_id_.Set(from._internal_blocker_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnblockUserRequest)
}

inline void UnblockUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.blocker_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blocker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blocker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnblockUserRequest::~UnblockUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnblockUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnblockUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.blocker_id_.Destroy();
}

void UnblockUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnblockUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnblockUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.blocker_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnblockUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnblockUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string blocker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_blocker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnblockUserRequest.blocker_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnblockUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnblockUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnblockUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string blocker_id = 2;
  if (!this->_internal_blocker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blocker_id().data(), static_cast<int>(this->_internal_blocker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnblockUserRequest.blocker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blocker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnblockUserRequest)
  return target;
}

size_t UnblockUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnblockUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string blocker_id = 2;
  if (!this->_internal_blocker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blocker_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnblockUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnblockUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnblockUserRequest::GetClassData() const { return &_class_data_; }


void UnblockUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnblockUserRequest*>(&to_msg);
  auto& from = static_cast<const UnblockUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnblockUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_blocker_id().empty()) {
    _this->_internal_set_blocker_id(from._internal_blocker_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnblockUserRequest::CopyFrom(const UnblockUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnblockUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockUserRequest::IsInitialized() const {
  return true;
}

void UnblockUserRequest::InternalSwap(UnblockUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blocker_id_, lhs_arena,
      &other->_impl_.blocker_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnblockUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[11]);
}

// ===================================================================

class UnblockUserResponse::_Internal {
 public:
};

UnblockUserResponse::UnblockUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnblockUserResponse)
}
UnblockUserResponse::UnblockUserResponse(const UnblockUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnblockUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_blocked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_blocked_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_blocked_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnblockUserResponse)
}

inline void UnblockUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_blocked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnblockUserResponse::~UnblockUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnblockUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnblockUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UnblockUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnblockUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnblockUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_blocked_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_blocked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnblockUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnblockUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_blocked = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.was_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnblockUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnblockUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnblockUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool was_blocked = 3;
  if (this->_internal_was_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_blocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnblockUserResponse)
  return target;
}

size_t UnblockUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnblockUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_blocked = 3;
  if (this->_internal_was_blocked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnblockUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnblockUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnblockUserResponse::GetClassData() const { return &_class_data_; }


void UnblockUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnblockUserResponse*>(&to_msg);
  auto& from = static_cast<const UnblockUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnblockUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_blocked() != 0) {
    _this->_internal_set_was_blocked(from._internal_was_blocked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnblockUserResponse::CopyFrom(const UnblockUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnblockUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnblockUserResponse::IsInitialized() const {
  return true;
}

void UnblockUserResponse::InternalSwap(UnblockUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnblockUserResponse, _impl_.was_blocked_)
      + sizeof(UnblockUserResponse::_impl_.was_blocked_)
      - PROTOBUF_FIELD_OFFSET(UnblockUserResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnblockUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[12]);
}

// ===================================================================

class MuteUserRequest::_Internal {
 public:
};

MuteUserRequest::MuteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.MuteUserRequest)
}
MuteUserRequest::MuteUserRequest(const MuteUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MuteUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.muter_id_){}
    , decltype(_impl_.mute_notifications_){}
    , decltype(_impl_.mute_content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.muter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_muter_id().empty()) {
    _this->_impl_.muter_id_.Set(from._internal_muter_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mute_notifications_, &from._impl_.mute_notifications_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mute_content_) -
    reinterpret_cast<char*>(&_impl_.mute_notifications_)) + sizeof(_impl_.mute_content_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.MuteUserRequest)
}

inline void MuteUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.muter_id_){}
    , decltype(_impl_.mute_notifications_){false}
    , decltype(_impl_.mute_content_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.muter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MuteUserRequest::~MuteUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.MuteUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.muter_id_.Destroy();
}

void MuteUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.MuteUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.muter_id_.ClearToEmpty();
  ::memset(&_impl_.mute_notifications_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mute_content_) -
      reinterpret_cast<char*>(&_impl_.mute_notifications_)) + sizeof(_impl_.mute_content_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.MuteUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string muter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_muter_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.MuteUserRequest.muter_id"));
        } else
          goto handle_unusual;
        continue;
      // bool mute_notifications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mute_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mute_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mute_content_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.MuteUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.MuteUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string muter_id = 2;
  if (!this->_internal_muter_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_muter_id().data(), static_cast<int>(this->_internal_muter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.MuteUserRequest.muter_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_muter_id(), target);
  }

  // bool mute_notifications = 3;
  if (this->_internal_mute_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_mute_notifications(), target);
  }

  // bool mute_content = 4;
  if (this->_internal_mute_content() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_mute_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.MuteUserRequest)
  return target;
}

size_t MuteUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.MuteUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string muter_id = 2;
  if (!this->_internal_muter_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_muter_id());
  }

  // bool mute_notifications = 3;
  if (this->_internal_mute_notifications() != 0) {
    total_size += 1 + 1;
  }

  // bool mute_content = 4;
  if (this->_internal_mute_content() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MuteUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteUserRequest::GetClassData() const { return &_class_data_; }


void MuteUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MuteUserRequest*>(&to_msg);
  auto& from = static_cast<const MuteUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.MuteUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_muter_id().empty()) {
    _this->_internal_set_muter_id(from._internal_muter_id());
  }
  if (from._internal_mute_notifications() != 0) {
    _this->_internal_set_mute_notifications(from._internal_mute_notifications());
  }
  if (from._internal_mute_content() != 0) {
    _this->_internal_set_mute_content(from._internal_mute_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteUserRequest::CopyFrom(const MuteUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.MuteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteUserRequest::IsInitialized() const {
  return true;
}

void MuteUserRequest::InternalSwap(MuteUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.muter_id_, lhs_arena,
      &other->_impl_.muter_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteUserRequest, _impl_.mute_content_)
      + sizeof(MuteUserRequest::_impl_.mute_content_)
      - PROTOBUF_FIELD_OFFSET(MuteUserRequest, _impl_.mute_notifications_)>(
          reinterpret_cast<char*>(&_impl_.mute_notifications_),
          reinterpret_cast<char*>(&other->_impl_.mute_notifications_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[13]);
}

// ===================================================================

class MuteUserResponse::_Internal {
 public:
};

MuteUserResponse::MuteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.MuteUserResponse)
}
MuteUserResponse::MuteUserResponse(const MuteUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MuteUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_already_muted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_already_muted_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_already_muted_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.MuteUserResponse)
}

inline void MuteUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_already_muted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MuteUserResponse::~MuteUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.MuteUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void MuteUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.MuteUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_already_muted_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_already_muted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MuteUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.MuteUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_already_muted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.was_already_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MuteUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.MuteUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.MuteUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool was_already_muted = 3;
  if (this->_internal_was_already_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_already_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.MuteUserResponse)
  return target;
}

size_t MuteUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.MuteUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_already_muted = 3;
  if (this->_internal_was_already_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MuteUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MuteUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MuteUserResponse::GetClassData() const { return &_class_data_; }


void MuteUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MuteUserResponse*>(&to_msg);
  auto& from = static_cast<const MuteUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.MuteUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_already_muted() != 0) {
    _this->_internal_set_was_already_muted(from._internal_was_already_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MuteUserResponse::CopyFrom(const MuteUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.MuteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteUserResponse::IsInitialized() const {
  return true;
}

void MuteUserResponse::InternalSwap(MuteUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MuteUserResponse, _impl_.was_already_muted_)
      + sizeof(MuteUserResponse::_impl_.was_already_muted_)
      - PROTOBUF_FIELD_OFFSET(MuteUserResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MuteUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[14]);
}

// ===================================================================

class UnmuteUserRequest::_Internal {
 public:
};

UnmuteUserRequest::UnmuteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnmuteUserRequest)
}
UnmuteUserRequest::UnmuteUserRequest(const UnmuteUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnmuteUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.muter_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.muter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_muter_id().empty()) {
    _this->_impl_.muter_id_.Set(from._internal_muter_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnmuteUserRequest)
}

inline void UnmuteUserRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.muter_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.muter_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.muter_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnmuteUserRequest::~UnmuteUserRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnmuteUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.muter_id_.Destroy();
}

void UnmuteUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnmuteUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnmuteUserRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.muter_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnmuteUserRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string muter_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_muter_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnmuteUserRequest.muter_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteUserRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnmuteUserRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnmuteUserRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string muter_id = 2;
  if (!this->_internal_muter_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_muter_id().data(), static_cast<int>(this->_internal_muter_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnmuteUserRequest.muter_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_muter_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnmuteUserRequest)
  return target;
}

size_t UnmuteUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnmuteUserRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string muter_id = 2;
  if (!this->_internal_muter_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_muter_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnmuteUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteUserRequest::GetClassData() const { return &_class_data_; }


void UnmuteUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnmuteUserRequest*>(&to_msg);
  auto& from = static_cast<const UnmuteUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnmuteUserRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_muter_id().empty()) {
    _this->_internal_set_muter_id(from._internal_muter_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteUserRequest::CopyFrom(const UnmuteUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnmuteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteUserRequest::IsInitialized() const {
  return true;
}

void UnmuteUserRequest::InternalSwap(UnmuteUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.muter_id_, lhs_arena,
      &other->_impl_.muter_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[15]);
}

// ===================================================================

class UnmuteUserResponse::_Internal {
 public:
};

UnmuteUserResponse::UnmuteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.UnmuteUserResponse)
}
UnmuteUserResponse::UnmuteUserResponse(const UnmuteUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnmuteUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.was_muted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_muted_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_muted_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.UnmuteUserResponse)
}

inline void UnmuteUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.was_muted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnmuteUserResponse::~UnmuteUserResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.UnmuteUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnmuteUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void UnmuteUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnmuteUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.UnmuteUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_muted_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.was_muted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnmuteUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.UnmuteUserResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // bool was_muted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.was_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnmuteUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.UnmuteUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.UnmuteUserResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool was_muted = 3;
  if (this->_internal_was_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_was_muted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.UnmuteUserResponse)
  return target;
}

size_t UnmuteUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.UnmuteUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // bool was_muted = 3;
  if (this->_internal_was_muted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnmuteUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnmuteUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnmuteUserResponse::GetClassData() const { return &_class_data_; }


void UnmuteUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnmuteUserResponse*>(&to_msg);
  auto& from = static_cast<const UnmuteUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.UnmuteUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_was_muted() != 0) {
    _this->_internal_set_was_muted(from._internal_was_muted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnmuteUserResponse::CopyFrom(const UnmuteUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.UnmuteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnmuteUserResponse::IsInitialized() const {
  return true;
}

void UnmuteUserResponse::InternalSwap(UnmuteUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnmuteUserResponse, _impl_.was_muted_)
      + sizeof(UnmuteUserResponse::_impl_.was_muted_)
      - PROTOBUF_FIELD_OFFSET(UnmuteUserResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnmuteUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[16]);
}

// ===================================================================

class GetRelationshipRequest::_Internal {
 public:
};

GetRelationshipRequest::GetRelationshipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRelationshipRequest)
}
GetRelationshipRequest::GetRelationshipRequest(const GetRelationshipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRelationshipRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user1_id().empty()) {
    _this->_impl_.user1_id_.Set(from._internal_user1_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user2_id().empty()) {
    _this->_impl_.user2_id_.Set(from._internal_user2_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRelationshipRequest)
}

inline void GetRelationshipRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRelationshipRequest::~GetRelationshipRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRelationshipRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRelationshipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user1_id_.Destroy();
  _impl_.user2_id_.Destroy();
}

void GetRelationshipRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRelationshipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRelationshipRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user1_id_.ClearToEmpty();
  _impl_.user2_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRelationshipRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user1_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user1_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRelationshipRequest.user1_id"));
        } else
          goto handle_unusual;
        continue;
      // string user2_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user2_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRelationshipRequest.user2_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRelationshipRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRelationshipRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user1_id = 1;
  if (!this->_internal_user1_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user1_id().data(), static_cast<int>(this->_internal_user1_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRelationshipRequest.user1_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user1_id(), target);
  }

  // string user2_id = 2;
  if (!this->_internal_user2_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user2_id().data(), static_cast<int>(this->_internal_user2_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRelationshipRequest.user2_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user2_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRelationshipRequest)
  return target;
}

size_t GetRelationshipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRelationshipRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user1_id = 1;
  if (!this->_internal_user1_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user1_id());
  }

  // string user2_id = 2;
  if (!this->_internal_user2_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user2_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRelationshipRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRelationshipRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRelationshipRequest::GetClassData() const { return &_class_data_; }


void GetRelationshipRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRelationshipRequest*>(&to_msg);
  auto& from = static_cast<const GetRelationshipRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRelationshipRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user1_id().empty()) {
    _this->_internal_set_user1_id(from._internal_user1_id());
  }
  if (!from._internal_user2_id().empty()) {
    _this->_internal_set_user2_id(from._internal_user2_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRelationshipRequest::CopyFrom(const GetRelationshipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRelationshipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRelationshipRequest::IsInitialized() const {
  return true;
}

void GetRelationshipRequest::InternalSwap(GetRelationshipRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user1_id_, lhs_arena,
      &other->_impl_.user1_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user2_id_, lhs_arena,
      &other->_impl_.user2_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRelationshipRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[17]);
}

// ===================================================================

class GetRelationshipResponse::_Internal {
 public:
  static const ::sonet::follow::v1::Relationship& relationship(const GetRelationshipResponse* msg);
};

const ::sonet::follow::v1::Relationship&
GetRelationshipResponse::_Internal::relationship(const GetRelationshipResponse* msg) {
  return *msg->_impl_.relationship_;
}
GetRelationshipResponse::GetRelationshipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRelationshipResponse)
}
GetRelationshipResponse::GetRelationshipResponse(const GetRelationshipResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRelationshipResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_){nullptr}
    , decltype(_impl_.found_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_relationship()) {
    _this->_impl_.relationship_ = new ::sonet::follow::v1::Relationship(*from._impl_.relationship_);
  }
  _this->_impl_.found_ = from._impl_.found_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRelationshipResponse)
}

inline void GetRelationshipResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relationship_){nullptr}
    , decltype(_impl_.found_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRelationshipResponse::~GetRelationshipResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRelationshipResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRelationshipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.relationship_;
}

void GetRelationshipResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRelationshipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRelationshipResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.relationship_ != nullptr) {
    delete _impl_.relationship_;
  }
  _impl_.relationship_ = nullptr;
  _impl_.found_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRelationshipResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sonet.follow.v1.Relationship relationship = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationship(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool found = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRelationshipResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRelationshipResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sonet.follow.v1.Relationship relationship = 1;
  if (this->_internal_has_relationship()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::relationship(this),
        _Internal::relationship(this).GetCachedSize(), target, stream);
  }

  // bool found = 2;
  if (this->_internal_found() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_found(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRelationshipResponse)
  return target;
}

size_t GetRelationshipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRelationshipResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sonet.follow.v1.Relationship relationship = 1;
  if (this->_internal_has_relationship()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relationship_);
  }

  // bool found = 2;
  if (this->_internal_found() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRelationshipResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRelationshipResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRelationshipResponse::GetClassData() const { return &_class_data_; }


void GetRelationshipResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRelationshipResponse*>(&to_msg);
  auto& from = static_cast<const GetRelationshipResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRelationshipResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relationship()) {
    _this->_internal_mutable_relationship()->::sonet::follow::v1::Relationship::MergeFrom(
        from._internal_relationship());
  }
  if (from._internal_found() != 0) {
    _this->_internal_set_found(from._internal_found());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRelationshipResponse::CopyFrom(const GetRelationshipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRelationshipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRelationshipResponse::IsInitialized() const {
  return true;
}

void GetRelationshipResponse::InternalSwap(GetRelationshipResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRelationshipResponse, _impl_.found_)
      + sizeof(GetRelationshipResponse::_impl_.found_)
      - PROTOBUF_FIELD_OFFSET(GetRelationshipResponse, _impl_.relationship_)>(
          reinterpret_cast<char*>(&_impl_.relationship_),
          reinterpret_cast<char*>(&other->_impl_.relationship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRelationshipResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[18]);
}

// ===================================================================

class CheckRelationshipRequest::_Internal {
 public:
};

CheckRelationshipRequest::CheckRelationshipRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.CheckRelationshipRequest)
}
CheckRelationshipRequest::CheckRelationshipRequest(const CheckRelationshipRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRelationshipRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , decltype(_impl_.relationship_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_following_id().empty()) {
    _this->_impl_.following_id_.Set(from._internal_following_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.relationship_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relationship_type().empty()) {
    _this->_impl_.relationship_type_.Set(from._internal_relationship_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.CheckRelationshipRequest)
}

inline void CheckRelationshipRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , decltype(_impl_.relationship_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relationship_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relationship_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckRelationshipRequest::~CheckRelationshipRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.CheckRelationshipRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRelationshipRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follower_id_.Destroy();
  _impl_.following_id_.Destroy();
  _impl_.relationship_type_.Destroy();
}

void CheckRelationshipRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRelationshipRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.CheckRelationshipRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follower_id_.ClearToEmpty();
  _impl_.following_id_.ClearToEmpty();
  _impl_.relationship_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRelationshipRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string follower_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.CheckRelationshipRequest.follower_id"));
        } else
          goto handle_unusual;
        continue;
      // string following_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_following_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.CheckRelationshipRequest.following_id"));
        } else
          goto handle_unusual;
        continue;
      // string relationship_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_relationship_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.CheckRelationshipRequest.relationship_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRelationshipRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.CheckRelationshipRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.CheckRelationshipRequest.follower_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_follower_id(), target);
  }

  // string following_id = 2;
  if (!this->_internal_following_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_following_id().data(), static_cast<int>(this->_internal_following_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.CheckRelationshipRequest.following_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_following_id(), target);
  }

  // string relationship_type = 3;
  if (!this->_internal_relationship_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relationship_type().data(), static_cast<int>(this->_internal_relationship_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.CheckRelationshipRequest.relationship_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_relationship_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.CheckRelationshipRequest)
  return target;
}

size_t CheckRelationshipRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.CheckRelationshipRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  // string following_id = 2;
  if (!this->_internal_following_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_following_id());
  }

  // string relationship_type = 3;
  if (!this->_internal_relationship_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relationship_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRelationshipRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRelationshipRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRelationshipRequest::GetClassData() const { return &_class_data_; }


void CheckRelationshipRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRelationshipRequest*>(&to_msg);
  auto& from = static_cast<const CheckRelationshipRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.CheckRelationshipRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  if (!from._internal_following_id().empty()) {
    _this->_internal_set_following_id(from._internal_following_id());
  }
  if (!from._internal_relationship_type().empty()) {
    _this->_internal_set_relationship_type(from._internal_relationship_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRelationshipRequest::CopyFrom(const CheckRelationshipRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.CheckRelationshipRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRelationshipRequest::IsInitialized() const {
  return true;
}

void CheckRelationshipRequest::InternalSwap(CheckRelationshipRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.following_id_, lhs_arena,
      &other->_impl_.following_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relationship_type_, lhs_arena,
      &other->_impl_.relationship_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRelationshipRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[19]);
}

// ===================================================================

class CheckRelationshipResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& since(const CheckRelationshipResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CheckRelationshipResponse::_Internal::since(const CheckRelationshipResponse* msg) {
  return *msg->_impl_.since_;
}
void CheckRelationshipResponse::clear_since() {
  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
}
CheckRelationshipResponse::CheckRelationshipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.CheckRelationshipResponse)
}
CheckRelationshipResponse::CheckRelationshipResponse(const CheckRelationshipResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRelationshipResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.since_){nullptr}
    , decltype(_impl_.exists_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_since()) {
    _this->_impl_.since_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.since_);
  }
  _this->_impl_.exists_ = from._impl_.exists_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.CheckRelationshipResponse)
}

inline void CheckRelationshipResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.since_){nullptr}
    , decltype(_impl_.exists_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckRelationshipResponse::~CheckRelationshipResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.CheckRelationshipResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRelationshipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.since_;
}

void CheckRelationshipResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRelationshipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.CheckRelationshipResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.since_ != nullptr) {
    delete _impl_.since_;
  }
  _impl_.since_ = nullptr;
  _impl_.exists_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRelationshipResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp since = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_since(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRelationshipResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.CheckRelationshipResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::since(this),
        _Internal::since(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.CheckRelationshipResponse)
  return target;
}

size_t CheckRelationshipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.CheckRelationshipResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp since = 2;
  if (this->_internal_has_since()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.since_);
  }

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRelationshipResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRelationshipResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRelationshipResponse::GetClassData() const { return &_class_data_; }


void CheckRelationshipResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRelationshipResponse*>(&to_msg);
  auto& from = static_cast<const CheckRelationshipResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.CheckRelationshipResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_since()) {
    _this->_internal_mutable_since()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_since());
  }
  if (from._internal_exists() != 0) {
    _this->_internal_set_exists(from._internal_exists());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRelationshipResponse::CopyFrom(const CheckRelationshipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.CheckRelationshipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRelationshipResponse::IsInitialized() const {
  return true;
}

void CheckRelationshipResponse::InternalSwap(CheckRelationshipResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckRelationshipResponse, _impl_.exists_)
      + sizeof(CheckRelationshipResponse::_impl_.exists_)
      - PROTOBUF_FIELD_OFFSET(CheckRelationshipResponse, _impl_.since_)>(
          reinterpret_cast<char*>(&_impl_.since_),
          reinterpret_cast<char*>(&other->_impl_.since_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRelationshipResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[20]);
}

// ===================================================================

class GetBulkRelationshipsRequest::_Internal {
 public:
};

GetBulkRelationshipsRequest::GetBulkRelationshipsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetBulkRelationshipsRequest)
}
GetBulkRelationshipsRequest::GetBulkRelationshipsRequest(const GetBulkRelationshipsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBulkRelationshipsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_user_ids_){from._impl_.target_user_ids_}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetBulkRelationshipsRequest)
}

inline void GetBulkRelationshipsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_user_ids_){arena}
    , decltype(_impl_.user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBulkRelationshipsRequest::~GetBulkRelationshipsRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetBulkRelationshipsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBulkRelationshipsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_user_ids_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
}

void GetBulkRelationshipsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBulkRelationshipsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetBulkRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_user_ids_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBulkRelationshipsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetBulkRelationshipsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string target_user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBulkRelationshipsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetBulkRelationshipsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetBulkRelationshipsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // repeated string target_user_ids = 2;
  for (int i = 0, n = this->_internal_target_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_target_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetBulkRelationshipsRequest.target_user_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetBulkRelationshipsRequest)
  return target;
}

size_t GetBulkRelationshipsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetBulkRelationshipsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_user_ids_.size());
  for (int i = 0, n = _impl_.target_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_user_ids_.Get(i));
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBulkRelationshipsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBulkRelationshipsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBulkRelationshipsRequest::GetClassData() const { return &_class_data_; }


void GetBulkRelationshipsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBulkRelationshipsRequest*>(&to_msg);
  auto& from = static_cast<const GetBulkRelationshipsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetBulkRelationshipsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_user_ids_.MergeFrom(from._impl_.target_user_ids_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBulkRelationshipsRequest::CopyFrom(const GetBulkRelationshipsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetBulkRelationshipsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBulkRelationshipsRequest::IsInitialized() const {
  return true;
}

void GetBulkRelationshipsRequest::InternalSwap(GetBulkRelationshipsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_user_ids_.InternalSwap(&other->_impl_.target_user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBulkRelationshipsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[21]);
}

// ===================================================================

GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse() {}
GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::MergeFrom(const GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[22]);
}

// ===================================================================

class GetBulkRelationshipsResponse::_Internal {
 public:
};

GetBulkRelationshipsResponse::GetBulkRelationshipsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetBulkRelationshipsResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetBulkRelationshipsResponse)
}
GetBulkRelationshipsResponse::GetBulkRelationshipsResponse(const GetBulkRelationshipsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBulkRelationshipsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.relationships_)*/{}
    , decltype(_impl_.not_found_){from._impl_.not_found_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.relationships_.MergeFrom(from._impl_.relationships_);
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetBulkRelationshipsResponse)
}

inline void GetBulkRelationshipsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.relationships_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.not_found_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBulkRelationshipsResponse::~GetBulkRelationshipsResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetBulkRelationshipsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetBulkRelationshipsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relationships_.Destruct();
  _impl_.relationships_.~MapField();
  _impl_.not_found_.~RepeatedPtrField();
}

void GetBulkRelationshipsResponse::ArenaDtor(void* object) {
  GetBulkRelationshipsResponse* _this = reinterpret_cast< GetBulkRelationshipsResponse* >(object);
  _this->_impl_.relationships_.Destruct();
}
void GetBulkRelationshipsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBulkRelationshipsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetBulkRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relationships_.Clear();
  _impl_.not_found_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBulkRelationshipsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .sonet.follow.v1.Relationship> relationships = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.relationships_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string not_found = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_not_found();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetBulkRelationshipsResponse.not_found"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBulkRelationshipsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetBulkRelationshipsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .sonet.follow.v1.Relationship> relationships = 1;
  if (!this->_internal_relationships().empty()) {
    using MapType = ::_pb::Map<std::string, ::sonet::follow::v1::Relationship>;
    using WireHelper = GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_relationships();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.follow.v1.GetBulkRelationshipsResponse.RelationshipsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string not_found = 2;
  for (int i = 0, n = this->_internal_not_found_size(); i < n; i++) {
    const auto& s = this->_internal_not_found(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetBulkRelationshipsResponse.not_found");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetBulkRelationshipsResponse)
  return target;
}

size_t GetBulkRelationshipsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetBulkRelationshipsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .sonet.follow.v1.Relationship> relationships = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_relationships_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sonet::follow::v1::Relationship >::const_iterator
      it = this->_internal_relationships().begin();
      it != this->_internal_relationships().end(); ++it) {
    total_size += GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string not_found = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.not_found_.size());
  for (int i = 0, n = _impl_.not_found_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.not_found_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBulkRelationshipsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBulkRelationshipsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBulkRelationshipsResponse::GetClassData() const { return &_class_data_; }


void GetBulkRelationshipsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBulkRelationshipsResponse*>(&to_msg);
  auto& from = static_cast<const GetBulkRelationshipsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetBulkRelationshipsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relationships_.MergeFrom(from._impl_.relationships_);
  _this->_impl_.not_found_.MergeFrom(from._impl_.not_found_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBulkRelationshipsResponse::CopyFrom(const GetBulkRelationshipsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetBulkRelationshipsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBulkRelationshipsResponse::IsInitialized() const {
  return true;
}

void GetBulkRelationshipsResponse::InternalSwap(GetBulkRelationshipsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.relationships_.InternalSwap(&other->_impl_.relationships_);
  _impl_.not_found_.InternalSwap(&other->_impl_.not_found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBulkRelationshipsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[23]);
}

// ===================================================================

class BulkFollowRequest::_Internal {
 public:
};

BulkFollowRequest::BulkFollowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.BulkFollowRequest)
}
BulkFollowRequest::BulkFollowRequest(const BulkFollowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkFollowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){from._impl_.user_ids_}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.BulkFollowRequest)
}

inline void BulkFollowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_ids_){arena}
    , decltype(_impl_.follower_id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BulkFollowRequest::~BulkFollowRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.BulkFollowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkFollowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_ids_.~RepeatedPtrField();
  _impl_.follower_id_.Destroy();
}

void BulkFollowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkFollowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.BulkFollowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_ids_.Clear();
  _impl_.follower_id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkFollowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string follower_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowRequest.follower_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowRequest.user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.FollowType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sonet::follow::v1::FollowType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkFollowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.BulkFollowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowRequest.follower_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_follower_id(), target);
  }

  // repeated string user_ids = 2;
  for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowRequest.user_ids");
    target = stream->WriteString(2, s, target);
  }

  // .sonet.follow.v1.FollowType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.BulkFollowRequest)
  return target;
}

size_t BulkFollowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.BulkFollowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string user_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.user_ids_.size());
  for (int i = 0, n = _impl_.user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.user_ids_.Get(i));
  }

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  // .sonet.follow.v1.FollowType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkFollowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkFollowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkFollowRequest::GetClassData() const { return &_class_data_; }


void BulkFollowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkFollowRequest*>(&to_msg);
  auto& from = static_cast<const BulkFollowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.BulkFollowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_ids_.MergeFrom(from._impl_.user_ids_);
  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkFollowRequest::CopyFrom(const BulkFollowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.BulkFollowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkFollowRequest::IsInitialized() const {
  return true;
}

void BulkFollowRequest::InternalSwap(BulkFollowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_ids_.InternalSwap(&other->_impl_.user_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkFollowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[24]);
}

// ===================================================================

class BulkFollowResponse::_Internal {
 public:
};

BulkFollowResponse::BulkFollowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.BulkFollowResponse)
}
BulkFollowResponse::BulkFollowResponse(const BulkFollowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulkFollowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.successful_){from._impl_.successful_}
    , decltype(_impl_.failed_){from._impl_.failed_}
    , decltype(_impl_.already_following_){from._impl_.already_following_}
    , decltype(_impl_.blocked_){from._impl_.blocked_}
    , decltype(_impl_.pending_){from._impl_.pending_}
    , decltype(_impl_.total_requested_){}
    , decltype(_impl_.total_successful_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_requested_, &from._impl_.total_requested_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_successful_) -
    reinterpret_cast<char*>(&_impl_.total_requested_)) + sizeof(_impl_.total_successful_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.BulkFollowResponse)
}

inline void BulkFollowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.successful_){arena}
    , decltype(_impl_.failed_){arena}
    , decltype(_impl_.already_following_){arena}
    , decltype(_impl_.blocked_){arena}
    , decltype(_impl_.pending_){arena}
    , decltype(_impl_.total_requested_){0}
    , decltype(_impl_.total_successful_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulkFollowResponse::~BulkFollowResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.BulkFollowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulkFollowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.successful_.~RepeatedPtrField();
  _impl_.failed_.~RepeatedPtrField();
  _impl_.already_following_.~RepeatedPtrField();
  _impl_.blocked_.~RepeatedPtrField();
  _impl_.pending_.~RepeatedPtrField();
}

void BulkFollowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulkFollowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.BulkFollowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.successful_.Clear();
  _impl_.failed_.Clear();
  _impl_.already_following_.Clear();
  _impl_.blocked_.Clear();
  _impl_.pending_.Clear();
  ::memset(&_impl_.total_requested_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_successful_) -
      reinterpret_cast<char*>(&_impl_.total_requested_)) + sizeof(_impl_.total_successful_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulkFollowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string successful = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_successful();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowResponse.successful"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string failed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowResponse.failed"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string already_following = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_already_following();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowResponse.already_following"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string blocked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocked();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowResponse.blocked"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string pending = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pending();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.BulkFollowResponse.pending"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_requested = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_requested_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_successful = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.total_successful_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulkFollowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.BulkFollowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string successful = 1;
  for (int i = 0, n = this->_internal_successful_size(); i < n; i++) {
    const auto& s = this->_internal_successful(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowResponse.successful");
    target = stream->WriteString(1, s, target);
  }

  // repeated string failed = 2;
  for (int i = 0, n = this->_internal_failed_size(); i < n; i++) {
    const auto& s = this->_internal_failed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowResponse.failed");
    target = stream->WriteString(2, s, target);
  }

  // repeated string already_following = 3;
  for (int i = 0, n = this->_internal_already_following_size(); i < n; i++) {
    const auto& s = this->_internal_already_following(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowResponse.already_following");
    target = stream->WriteString(3, s, target);
  }

  // repeated string blocked = 4;
  for (int i = 0, n = this->_internal_blocked_size(); i < n; i++) {
    const auto& s = this->_internal_blocked(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowResponse.blocked");
    target = stream->WriteString(4, s, target);
  }

  // repeated string pending = 5;
  for (int i = 0, n = this->_internal_pending_size(); i < n; i++) {
    const auto& s = this->_internal_pending(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.BulkFollowResponse.pending");
    target = stream->WriteString(5, s, target);
  }

  // int32 total_requested = 6;
  if (this->_internal_total_requested() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_requested(), target);
  }

  // int32 total_successful = 7;
  if (this->_internal_total_successful() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_total_successful(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.BulkFollowResponse)
  return target;
}

size_t BulkFollowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.BulkFollowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string successful = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.successful_.size());
  for (int i = 0, n = _impl_.successful_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.successful_.Get(i));
  }

  // repeated string failed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.failed_.size());
  for (int i = 0, n = _impl_.failed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.failed_.Get(i));
  }

  // repeated string already_following = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.already_following_.size());
  for (int i = 0, n = _impl_.already_following_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.already_following_.Get(i));
  }

  // repeated string blocked = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blocked_.size());
  for (int i = 0, n = _impl_.blocked_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blocked_.Get(i));
  }

  // repeated string pending = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.pending_.size());
  for (int i = 0, n = _impl_.pending_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.pending_.Get(i));
  }

  // int32 total_requested = 6;
  if (this->_internal_total_requested() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_requested());
  }

  // int32 total_successful = 7;
  if (this->_internal_total_successful() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_successful());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulkFollowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulkFollowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulkFollowResponse::GetClassData() const { return &_class_data_; }


void BulkFollowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulkFollowResponse*>(&to_msg);
  auto& from = static_cast<const BulkFollowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.BulkFollowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.successful_.MergeFrom(from._impl_.successful_);
  _this->_impl_.failed_.MergeFrom(from._impl_.failed_);
  _this->_impl_.already_following_.MergeFrom(from._impl_.already_following_);
  _this->_impl_.blocked_.MergeFrom(from._impl_.blocked_);
  _this->_impl_.pending_.MergeFrom(from._impl_.pending_);
  if (from._internal_total_requested() != 0) {
    _this->_internal_set_total_requested(from._internal_total_requested());
  }
  if (from._internal_total_successful() != 0) {
    _this->_internal_set_total_successful(from._internal_total_successful());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulkFollowResponse::CopyFrom(const BulkFollowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.BulkFollowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulkFollowResponse::IsInitialized() const {
  return true;
}

void BulkFollowResponse::InternalSwap(BulkFollowResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.successful_.InternalSwap(&other->_impl_.successful_);
  _impl_.failed_.InternalSwap(&other->_impl_.failed_);
  _impl_.already_following_.InternalSwap(&other->_impl_.already_following_);
  _impl_.blocked_.InternalSwap(&other->_impl_.blocked_);
  _impl_.pending_.InternalSwap(&other->_impl_.pending_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulkFollowResponse, _impl_.total_successful_)
      + sizeof(BulkFollowResponse::_impl_.total_successful_)
      - PROTOBUF_FIELD_OFFSET(BulkFollowResponse, _impl_.total_requested_)>(
          reinterpret_cast<char*>(&_impl_.total_requested_),
          reinterpret_cast<char*>(&other->_impl_.total_requested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulkFollowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[25]);
}

// ===================================================================

class GetFollowersRequest::_Internal {
 public:
};

GetFollowersRequest::GetFollowersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowersRequest)
}
GetFollowersRequest::GetFollowersRequest(const GetFollowersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.include_analytics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_analytics_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_analytics_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowersRequest)
}

inline void GetFollowersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.include_analytics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFollowersRequest::~GetFollowersRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFollowersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  _impl_.cursor_.Destroy();
}

void GetFollowersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.cursor_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_analytics_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_analytics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowersRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowersRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowersRequest.cursor"));
        } else
          goto handle_unusual;
        continue;
      // bool include_analytics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_analytics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowersRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowersRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowersRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  // bool include_analytics = 5;
  if (this->_internal_include_analytics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_analytics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowersRequest)
  return target;
}

size_t GetFollowersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // bool include_analytics = 5;
  if (this->_internal_include_analytics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowersRequest::GetClassData() const { return &_class_data_; }


void GetFollowersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowersRequest*>(&to_msg);
  auto& from = static_cast<const GetFollowersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_include_analytics() != 0) {
    _this->_internal_set_include_analytics(from._internal_include_analytics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowersRequest::CopyFrom(const GetFollowersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowersRequest::IsInitialized() const {
  return true;
}

void GetFollowersRequest::InternalSwap(GetFollowersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFollowersRequest, _impl_.include_analytics_)
      + sizeof(GetFollowersRequest::_impl_.include_analytics_)
      - PROTOBUF_FIELD_OFFSET(GetFollowersRequest, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[26]);
}

// ===================================================================

class GetFollowersResponse::_Internal {
 public:
  static const ::sonet::follow::v1::PaginationInfo& pagination(const GetFollowersResponse* msg);
};

const ::sonet::follow::v1::PaginationInfo&
GetFollowersResponse::_Internal::pagination(const GetFollowersResponse* msg) {
  return *msg->_impl_.pagination_;
}
GetFollowersResponse::GetFollowersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowersResponse)
}
GetFollowersResponse::GetFollowersResponse(const GetFollowersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.followers_){from._impl_.followers_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::follow::v1::PaginationInfo(*from._impl_.pagination_);
  }
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowersResponse)
}

inline void GetFollowersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.followers_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFollowersResponse::~GetFollowersResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFollowersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.followers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetFollowersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.followers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.UserInfo followers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_followers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.PaginationInfo pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo followers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_followers_size()); i < n; i++) {
    const auto& repfield = this->_internal_followers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowersResponse)
  return target;
}

size_t GetFollowersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo followers = 1;
  total_size += 1UL * this->_internal_followers_size();
  for (const auto& msg : this->_impl_.followers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowersResponse::GetClassData() const { return &_class_data_; }


void GetFollowersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowersResponse*>(&to_msg);
  auto& from = static_cast<const GetFollowersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.followers_.MergeFrom(from._impl_.followers_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::follow::v1::PaginationInfo::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowersResponse::CopyFrom(const GetFollowersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowersResponse::IsInitialized() const {
  return true;
}

void GetFollowersResponse::InternalSwap(GetFollowersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.followers_.InternalSwap(&other->_impl_.followers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFollowersResponse, _impl_.total_count_)
      + sizeof(GetFollowersResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(GetFollowersResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[27]);
}

// ===================================================================

class GetFollowingRequest::_Internal {
 public:
};

GetFollowingRequest::GetFollowingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowingRequest)
}
GetFollowingRequest::GetFollowingRequest(const GetFollowingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.include_analytics_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cursor().empty()) {
    _this->_impl_.cursor_.Set(from._internal_cursor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_analytics_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_analytics_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowingRequest)
}

inline void GetFollowingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.cursor_){}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.include_analytics_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cursor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cursor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFollowingRequest::~GetFollowingRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFollowingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  _impl_.cursor_.Destroy();
}

void GetFollowingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.cursor_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_analytics_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.include_analytics_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowingRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowingRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cursor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cursor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowingRequest.cursor"));
        } else
          goto handle_unusual;
        continue;
      // bool include_analytics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_analytics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowingRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowingRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowingRequest.cursor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cursor(), target);
  }

  // bool include_analytics = 5;
  if (this->_internal_include_analytics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_analytics(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowingRequest)
  return target;
}

size_t GetFollowingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // string cursor = 4;
  if (!this->_internal_cursor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cursor());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // bool include_analytics = 5;
  if (this->_internal_include_analytics() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowingRequest::GetClassData() const { return &_class_data_; }


void GetFollowingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowingRequest*>(&to_msg);
  auto& from = static_cast<const GetFollowingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (!from._internal_cursor().empty()) {
    _this->_internal_set_cursor(from._internal_cursor());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_include_analytics() != 0) {
    _this->_internal_set_include_analytics(from._internal_include_analytics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowingRequest::CopyFrom(const GetFollowingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingRequest::IsInitialized() const {
  return true;
}

void GetFollowingRequest::InternalSwap(GetFollowingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cursor_, lhs_arena,
      &other->_impl_.cursor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFollowingRequest, _impl_.include_analytics_)
      + sizeof(GetFollowingRequest::_impl_.include_analytics_)
      - PROTOBUF_FIELD_OFFSET(GetFollowingRequest, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[28]);
}

// ===================================================================

class GetFollowingResponse::_Internal {
 public:
  static const ::sonet::follow::v1::PaginationInfo& pagination(const GetFollowingResponse* msg);
};

const ::sonet::follow::v1::PaginationInfo&
GetFollowingResponse::_Internal::pagination(const GetFollowingResponse* msg) {
  return *msg->_impl_.pagination_;
}
GetFollowingResponse::GetFollowingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowingResponse)
}
GetFollowingResponse::GetFollowingResponse(const GetFollowingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.following_){from._impl_.following_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::sonet::follow::v1::PaginationInfo(*from._impl_.pagination_);
  }
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowingResponse)
}

inline void GetFollowingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.following_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFollowingResponse::~GetFollowingResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFollowingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.following_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void GetFollowingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.following_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _impl_.total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.UserInfo following = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_following(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.PaginationInfo pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo following = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_following_size()); i < n; i++) {
    const auto& repfield = this->_internal_following(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowingResponse)
  return target;
}

size_t GetFollowingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo following = 1;
  total_size += 1UL * this->_internal_following_size();
  for (const auto& msg : this->_impl_.following_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sonet.follow.v1.PaginationInfo pagination = 2;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // int32 total_count = 3;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowingResponse::GetClassData() const { return &_class_data_; }


void GetFollowingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowingResponse*>(&to_msg);
  auto& from = static_cast<const GetFollowingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.following_.MergeFrom(from._impl_.following_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::sonet::follow::v1::PaginationInfo::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowingResponse::CopyFrom(const GetFollowingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowingResponse::IsInitialized() const {
  return true;
}

void GetFollowingResponse::InternalSwap(GetFollowingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.following_.InternalSwap(&other->_impl_.following_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFollowingResponse, _impl_.total_count_)
      + sizeof(GetFollowingResponse::_impl_.total_count_)
      - PROTOBUF_FIELD_OFFSET(GetFollowingResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[29]);
}

// ===================================================================

class GetMutualFriendsRequest::_Internal {
 public:
};

GetMutualFriendsRequest::GetMutualFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetMutualFriendsRequest)
}
GetMutualFriendsRequest::GetMutualFriendsRequest(const GetMutualFriendsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMutualFriendsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user1_id().empty()) {
    _this->_impl_.user1_id_.Set(from._internal_user1_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user2_id().empty()) {
    _this->_impl_.user2_id_.Set(from._internal_user2_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetMutualFriendsRequest)
}

inline void GetMutualFriendsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user1_id_){}
    , decltype(_impl_.user2_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user1_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user1_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user2_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user2_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMutualFriendsRequest::~GetMutualFriendsRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetMutualFriendsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMutualFriendsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user1_id_.Destroy();
  _impl_.user2_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
}

void GetMutualFriendsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMutualFriendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetMutualFriendsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user1_id_.ClearToEmpty();
  _impl_.user2_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMutualFriendsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user1_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user1_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetMutualFriendsRequest.user1_id"));
        } else
          goto handle_unusual;
        continue;
      // string user2_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user2_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetMutualFriendsRequest.user2_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMutualFriendsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetMutualFriendsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user1_id = 1;
  if (!this->_internal_user1_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user1_id().data(), static_cast<int>(this->_internal_user1_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetMutualFriendsRequest.user1_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user1_id(), target);
  }

  // string user2_id = 2;
  if (!this->_internal_user2_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user2_id().data(), static_cast<int>(this->_internal_user2_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetMutualFriendsRequest.user2_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user2_id(), target);
  }

  // string requesting_user_id = 3;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetMutualFriendsRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_requesting_user_id(), target);
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetMutualFriendsRequest)
  return target;
}

size_t GetMutualFriendsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetMutualFriendsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user1_id = 1;
  if (!this->_internal_user1_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user1_id());
  }

  // string user2_id = 2;
  if (!this->_internal_user2_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user2_id());
  }

  // string requesting_user_id = 3;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // int32 limit = 4;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMutualFriendsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMutualFriendsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMutualFriendsRequest::GetClassData() const { return &_class_data_; }


void GetMutualFriendsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMutualFriendsRequest*>(&to_msg);
  auto& from = static_cast<const GetMutualFriendsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetMutualFriendsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user1_id().empty()) {
    _this->_internal_set_user1_id(from._internal_user1_id());
  }
  if (!from._internal_user2_id().empty()) {
    _this->_internal_set_user2_id(from._internal_user2_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMutualFriendsRequest::CopyFrom(const GetMutualFriendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetMutualFriendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMutualFriendsRequest::IsInitialized() const {
  return true;
}

void GetMutualFriendsRequest::InternalSwap(GetMutualFriendsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user1_id_, lhs_arena,
      &other->_impl_.user1_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user2_id_, lhs_arena,
      &other->_impl_.user2_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMutualFriendsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[30]);
}

// ===================================================================

class GetMutualFriendsResponse::_Internal {
 public:
};

GetMutualFriendsResponse::GetMutualFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetMutualFriendsResponse)
}
GetMutualFriendsResponse::GetMutualFriendsResponse(const GetMutualFriendsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMutualFriendsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mutual_friends_){from._impl_.mutual_friends_}
    , decltype(_impl_.total_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_count_ = from._impl_.total_count_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetMutualFriendsResponse)
}

inline void GetMutualFriendsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mutual_friends_){arena}
    , decltype(_impl_.total_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMutualFriendsResponse::~GetMutualFriendsResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetMutualFriendsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMutualFriendsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mutual_friends_.~RepeatedPtrField();
}

void GetMutualFriendsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMutualFriendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetMutualFriendsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mutual_friends_.Clear();
  _impl_.total_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMutualFriendsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.UserInfo mutual_friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mutual_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMutualFriendsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetMutualFriendsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo mutual_friends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mutual_friends_size()); i < n; i++) {
    const auto& repfield = this->_internal_mutual_friends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetMutualFriendsResponse)
  return target;
}

size_t GetMutualFriendsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetMutualFriendsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.UserInfo mutual_friends = 1;
  total_size += 1UL * this->_internal_mutual_friends_size();
  for (const auto& msg : this->_impl_.mutual_friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total_count = 2;
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMutualFriendsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMutualFriendsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMutualFriendsResponse::GetClassData() const { return &_class_data_; }


void GetMutualFriendsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMutualFriendsResponse*>(&to_msg);
  auto& from = static_cast<const GetMutualFriendsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetMutualFriendsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mutual_friends_.MergeFrom(from._impl_.mutual_friends_);
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMutualFriendsResponse::CopyFrom(const GetMutualFriendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetMutualFriendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMutualFriendsResponse::IsInitialized() const {
  return true;
}

void GetMutualFriendsResponse::InternalSwap(GetMutualFriendsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mutual_friends_.InternalSwap(&other->_impl_.mutual_friends_);
  swap(_impl_.total_count_, other->_impl_.total_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMutualFriendsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[31]);
}

// ===================================================================

class GetRecommendationsRequest::_Internal {
 public:
};

GetRecommendationsRequest::GetRecommendationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRecommendationsRequest)
}
GetRecommendationsRequest::GetRecommendationsRequest(const GetRecommendationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecommendationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exclude_user_ids_){from._impl_.exclude_user_ids_}
    , decltype(_impl_.interests_){from._impl_.interests_}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.algorithm_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.algorithm_, &from._impl_.algorithm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRecommendationsRequest)
}

inline void GetRecommendationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exclude_user_ids_){arena}
    , decltype(_impl_.interests_){arena}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.algorithm_){0}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRecommendationsRequest::~GetRecommendationsRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRecommendationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecommendationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exclude_user_ids_.~RepeatedPtrField();
  _impl_.interests_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
}

void GetRecommendationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecommendationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRecommendationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exclude_user_ids_.Clear();
  _impl_.interests_.Clear();
  _impl_.user_id_.ClearToEmpty();
  ::memset(&_impl_.algorithm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.algorithm_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecommendationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecommendationsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.RecommendationAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::sonet::follow::v1::RecommendationAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exclude_user_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exclude_user_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string interests = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_interests();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecommendationsRequest.interests"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecommendationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRecommendationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecommendationsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // repeated string exclude_user_ids = 4;
  for (int i = 0, n = this->_internal_exclude_user_ids_size(); i < n; i++) {
    const auto& s = this->_internal_exclude_user_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecommendationsRequest.exclude_user_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string interests = 5;
  for (int i = 0, n = this->_internal_interests_size(); i < n; i++) {
    const auto& s = this->_internal_interests(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecommendationsRequest.interests");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRecommendationsRequest)
  return target;
}

size_t GetRecommendationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRecommendationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exclude_user_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exclude_user_ids_.size());
  for (int i = 0, n = _impl_.exclude_user_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exclude_user_ids_.Get(i));
  }

  // repeated string interests = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.interests_.size());
  for (int i = 0, n = _impl_.interests_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.interests_.Get(i));
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .sonet.follow.v1.RecommendationAlgorithm algorithm = 2;
  if (this->_internal_algorithm() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  // int32 limit = 3;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecommendationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecommendationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecommendationsRequest::GetClassData() const { return &_class_data_; }


void GetRecommendationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecommendationsRequest*>(&to_msg);
  auto& from = static_cast<const GetRecommendationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRecommendationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exclude_user_ids_.MergeFrom(from._impl_.exclude_user_ids_);
  _this->_impl_.interests_.MergeFrom(from._impl_.interests_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_algorithm() != 0) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecommendationsRequest::CopyFrom(const GetRecommendationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRecommendationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendationsRequest::IsInitialized() const {
  return true;
}

void GetRecommendationsRequest::InternalSwap(GetRecommendationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exclude_user_ids_.InternalSwap(&other->_impl_.exclude_user_ids_);
  _impl_.interests_.InternalSwap(&other->_impl_.interests_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecommendationsRequest, _impl_.limit_)
      + sizeof(GetRecommendationsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetRecommendationsRequest, _impl_.algorithm_)>(
          reinterpret_cast<char*>(&_impl_.algorithm_),
          reinterpret_cast<char*>(&other->_impl_.algorithm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecommendationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[32]);
}

// ===================================================================

class GetRecommendationsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at(const GetRecommendationsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetRecommendationsResponse::_Internal::generated_at(const GetRecommendationsResponse* msg) {
  return *msg->_impl_.generated_at_;
}
void GetRecommendationsResponse::clear_generated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
}
GetRecommendationsResponse::GetRecommendationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRecommendationsResponse)
}
GetRecommendationsResponse::GetRecommendationsResponse(const GetRecommendationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecommendationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recommendations_){from._impl_.recommendations_}
    , decltype(_impl_.algorithm_used_){}
    , decltype(_impl_.generated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.algorithm_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm_used().empty()) {
    _this->_impl_.algorithm_used_.Set(from._internal_algorithm_used(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_generated_at()) {
    _this->_impl_.generated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.generated_at_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRecommendationsResponse)
}

inline void GetRecommendationsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recommendations_){arena}
    , decltype(_impl_.algorithm_used_){}
    , decltype(_impl_.generated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.algorithm_used_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.algorithm_used_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRecommendationsResponse::~GetRecommendationsResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRecommendationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecommendationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recommendations_.~RepeatedPtrField();
  _impl_.algorithm_used_.Destroy();
  if (this != internal_default_instance()) delete _impl_.generated_at_;
}

void GetRecommendationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecommendationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRecommendationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recommendations_.Clear();
  _impl_.algorithm_used_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecommendationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.Recommendation recommendations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recommendations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string algorithm_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_algorithm_used();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecommendationsResponse.algorithm_used"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp generated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecommendationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRecommendationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.Recommendation recommendations = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recommendations_size()); i < n; i++) {
    const auto& repfield = this->_internal_recommendations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string algorithm_used = 2;
  if (!this->_internal_algorithm_used().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_algorithm_used().data(), static_cast<int>(this->_internal_algorithm_used().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecommendationsResponse.algorithm_used");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_algorithm_used(), target);
  }

  // .google.protobuf.Timestamp generated_at = 3;
  if (this->_internal_has_generated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::generated_at(this),
        _Internal::generated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRecommendationsResponse)
  return target;
}

size_t GetRecommendationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRecommendationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.Recommendation recommendations = 1;
  total_size += 1UL * this->_internal_recommendations_size();
  for (const auto& msg : this->_impl_.recommendations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string algorithm_used = 2;
  if (!this->_internal_algorithm_used().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm_used());
  }

  // .google.protobuf.Timestamp generated_at = 3;
  if (this->_internal_has_generated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.generated_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecommendationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecommendationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecommendationsResponse::GetClassData() const { return &_class_data_; }


void GetRecommendationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecommendationsResponse*>(&to_msg);
  auto& from = static_cast<const GetRecommendationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRecommendationsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.recommendations_.MergeFrom(from._impl_.recommendations_);
  if (!from._internal_algorithm_used().empty()) {
    _this->_internal_set_algorithm_used(from._internal_algorithm_used());
  }
  if (from._internal_has_generated_at()) {
    _this->_internal_mutable_generated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_generated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecommendationsResponse::CopyFrom(const GetRecommendationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRecommendationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecommendationsResponse::IsInitialized() const {
  return true;
}

void GetRecommendationsResponse::InternalSwap(GetRecommendationsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.recommendations_.InternalSwap(&other->_impl_.recommendations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.algorithm_used_, lhs_arena,
      &other->_impl_.algorithm_used_, rhs_arena
  );
  swap(_impl_.generated_at_, other->_impl_.generated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecommendationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[33]);
}

// ===================================================================

class GetTrendingUsersRequest::_Internal {
 public:
};

GetTrendingUsersRequest::GetTrendingUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetTrendingUsersRequest)
}
GetTrendingUsersRequest::GetTrendingUsersRequest(const GetTrendingUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrendingUsersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.time_window_hours_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    _this->_impl_.category_.Set(from._internal_category(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.limit_, &from._impl_.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_window_hours_) -
    reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.time_window_hours_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetTrendingUsersRequest)
}

inline void GetTrendingUsersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.time_window_hours_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTrendingUsersRequest::~GetTrendingUsersRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetTrendingUsersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrendingUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requesting_user_id_.Destroy();
  _impl_.category_.Destroy();
}

void GetTrendingUsersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrendingUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetTrendingUsersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.category_.ClearToEmpty();
  ::memset(&_impl_.limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_window_hours_) -
      reinterpret_cast<char*>(&_impl_.limit_)) + sizeof(_impl_.time_window_hours_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrendingUsersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string requesting_user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetTrendingUsersRequest.category"));
        } else
          goto handle_unusual;
        continue;
      // int32 time_window_hours = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.time_window_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTrendingUsersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetTrendingUsersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string requesting_user_id = 1;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetTrendingUsersRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requesting_user_id(), target);
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetTrendingUsersRequest.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // int32 time_window_hours = 4;
  if (this->_internal_time_window_hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_time_window_hours(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetTrendingUsersRequest)
  return target;
}

size_t GetTrendingUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetTrendingUsersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requesting_user_id = 1;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 time_window_hours = 4;
  if (this->_internal_time_window_hours() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_window_hours());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrendingUsersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrendingUsersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrendingUsersRequest::GetClassData() const { return &_class_data_; }


void GetTrendingUsersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrendingUsersRequest*>(&to_msg);
  auto& from = static_cast<const GetTrendingUsersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetTrendingUsersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (!from._internal_category().empty()) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_time_window_hours() != 0) {
    _this->_internal_set_time_window_hours(from._internal_time_window_hours());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrendingUsersRequest::CopyFrom(const GetTrendingUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetTrendingUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrendingUsersRequest::IsInitialized() const {
  return true;
}

void GetTrendingUsersRequest::InternalSwap(GetTrendingUsersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.category_, lhs_arena,
      &other->_impl_.category_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTrendingUsersRequest, _impl_.time_window_hours_)
      + sizeof(GetTrendingUsersRequest::_impl_.time_window_hours_)
      - PROTOBUF_FIELD_OFFSET(GetTrendingUsersRequest, _impl_.limit_)>(
          reinterpret_cast<char*>(&_impl_.limit_),
          reinterpret_cast<char*>(&other->_impl_.limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrendingUsersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[34]);
}

// ===================================================================

class GetTrendingUsersResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& generated_at(const GetTrendingUsersResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetTrendingUsersResponse::_Internal::generated_at(const GetTrendingUsersResponse* msg) {
  return *msg->_impl_.generated_at_;
}
void GetTrendingUsersResponse::clear_generated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
}
GetTrendingUsersResponse::GetTrendingUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetTrendingUsersResponse)
}
GetTrendingUsersResponse::GetTrendingUsersResponse(const GetTrendingUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrendingUsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trending_users_){from._impl_.trending_users_}
    , decltype(_impl_.time_period_){}
    , decltype(_impl_.generated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_period_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_period_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_period().empty()) {
    _this->_impl_.time_period_.Set(from._internal_time_period(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_generated_at()) {
    _this->_impl_.generated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.generated_at_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetTrendingUsersResponse)
}

inline void GetTrendingUsersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trending_users_){arena}
    , decltype(_impl_.time_period_){}
    , decltype(_impl_.generated_at_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.time_period_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_period_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTrendingUsersResponse::~GetTrendingUsersResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetTrendingUsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrendingUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trending_users_.~RepeatedPtrField();
  _impl_.time_period_.Destroy();
  if (this != internal_default_instance()) delete _impl_.generated_at_;
}

void GetTrendingUsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrendingUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetTrendingUsersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trending_users_.Clear();
  _impl_.time_period_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.generated_at_ != nullptr) {
    delete _impl_.generated_at_;
  }
  _impl_.generated_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrendingUsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.Recommendation trending_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trending_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string time_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time_period();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetTrendingUsersResponse.time_period"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp generated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_generated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTrendingUsersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetTrendingUsersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.Recommendation trending_users = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trending_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_trending_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string time_period = 2;
  if (!this->_internal_time_period().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_period().data(), static_cast<int>(this->_internal_time_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetTrendingUsersResponse.time_period");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time_period(), target);
  }

  // .google.protobuf.Timestamp generated_at = 3;
  if (this->_internal_has_generated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::generated_at(this),
        _Internal::generated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetTrendingUsersResponse)
  return target;
}

size_t GetTrendingUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetTrendingUsersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.Recommendation trending_users = 1;
  total_size += 1UL * this->_internal_trending_users_size();
  for (const auto& msg : this->_impl_.trending_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string time_period = 2;
  if (!this->_internal_time_period().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_period());
  }

  // .google.protobuf.Timestamp generated_at = 3;
  if (this->_internal_has_generated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.generated_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrendingUsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrendingUsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrendingUsersResponse::GetClassData() const { return &_class_data_; }


void GetTrendingUsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrendingUsersResponse*>(&to_msg);
  auto& from = static_cast<const GetTrendingUsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetTrendingUsersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trending_users_.MergeFrom(from._impl_.trending_users_);
  if (!from._internal_time_period().empty()) {
    _this->_internal_set_time_period(from._internal_time_period());
  }
  if (from._internal_has_generated_at()) {
    _this->_internal_mutable_generated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_generated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrendingUsersResponse::CopyFrom(const GetTrendingUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetTrendingUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrendingUsersResponse::IsInitialized() const {
  return true;
}

void GetTrendingUsersResponse::InternalSwap(GetTrendingUsersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trending_users_.InternalSwap(&other->_impl_.trending_users_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_period_, lhs_arena,
      &other->_impl_.time_period_, rhs_arena
  );
  swap(_impl_.generated_at_, other->_impl_.generated_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrendingUsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[35]);
}

// ===================================================================

class GetFollowerAnalyticsRequest::_Internal {
 public:
};

GetFollowerAnalyticsRequest::GetFollowerAnalyticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowerAnalyticsRequest)
}
GetFollowerAnalyticsRequest::GetFollowerAnalyticsRequest(const GetFollowerAnalyticsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowerAnalyticsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.time_range_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_range_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_range().empty()) {
    _this->_impl_.time_range_.Set(from._internal_time_range(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowerAnalyticsRequest)
}

inline void GetFollowerAnalyticsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , decltype(_impl_.time_range_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_range_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_range_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFollowerAnalyticsRequest::~GetFollowerAnalyticsRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowerAnalyticsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFollowerAnalyticsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
  _impl_.time_range_.Destroy();
}

void GetFollowerAnalyticsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowerAnalyticsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowerAnalyticsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _impl_.time_range_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowerAnalyticsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowerAnalyticsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string time_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_time_range();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetFollowerAnalyticsRequest.time_range"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowerAnalyticsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowerAnalyticsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowerAnalyticsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowerAnalyticsRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  // string time_range = 3;
  if (!this->_internal_time_range().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_range().data(), static_cast<int>(this->_internal_time_range().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetFollowerAnalyticsRequest.time_range");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowerAnalyticsRequest)
  return target;
}

size_t GetFollowerAnalyticsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowerAnalyticsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  // string time_range = 3;
  if (!this->_internal_time_range().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_range());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowerAnalyticsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowerAnalyticsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowerAnalyticsRequest::GetClassData() const { return &_class_data_; }


void GetFollowerAnalyticsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowerAnalyticsRequest*>(&to_msg);
  auto& from = static_cast<const GetFollowerAnalyticsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowerAnalyticsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  if (!from._internal_time_range().empty()) {
    _this->_internal_set_time_range(from._internal_time_range());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowerAnalyticsRequest::CopyFrom(const GetFollowerAnalyticsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowerAnalyticsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerAnalyticsRequest::IsInitialized() const {
  return true;
}

void GetFollowerAnalyticsRequest::InternalSwap(GetFollowerAnalyticsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_range_, lhs_arena,
      &other->_impl_.time_range_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowerAnalyticsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[36]);
}

// ===================================================================

GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse() {}
GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::MergeFrom(const GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[37]);
}

// ===================================================================

GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse() {}
GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::MergeFrom(const GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[38]);
}

// ===================================================================

class GetFollowerAnalyticsResponse::_Internal {
 public:
};

GetFollowerAnalyticsResponse::GetFollowerAnalyticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetFollowerAnalyticsResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetFollowerAnalyticsResponse)
}
GetFollowerAnalyticsResponse::GetFollowerAnalyticsResponse(const GetFollowerAnalyticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFollowerAnalyticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.followers_by_country_)*/{}
    , /*decltype(_impl_.daily_growth_)*/{}
    , decltype(_impl_.total_followers_){}
    , decltype(_impl_.total_following_){}
    , decltype(_impl_.mutual_follows_){}
    , decltype(_impl_.followers_gained_today_){}
    , decltype(_impl_.followers_lost_today_){}
    , decltype(_impl_.followers_gained_week_){}
    , decltype(_impl_.followers_lost_week_){}
    , decltype(_impl_.followers_gained_month_){}
    , decltype(_impl_.average_engagement_rate_){}
    , decltype(_impl_.followers_lost_month_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.followers_by_country_.MergeFrom(from._impl_.followers_by_country_);
  _this->_impl_.daily_growth_.MergeFrom(from._impl_.daily_growth_);
  ::memcpy(&_impl_.total_followers_, &from._impl_.total_followers_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.followers_lost_month_) -
    reinterpret_cast<char*>(&_impl_.total_followers_)) + sizeof(_impl_.followers_lost_month_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetFollowerAnalyticsResponse)
}

inline void GetFollowerAnalyticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.followers_by_country_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.daily_growth_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.total_followers_){0}
    , decltype(_impl_.total_following_){0}
    , decltype(_impl_.mutual_follows_){0}
    , decltype(_impl_.followers_gained_today_){0}
    , decltype(_impl_.followers_lost_today_){0}
    , decltype(_impl_.followers_gained_week_){0}
    , decltype(_impl_.followers_lost_week_){0}
    , decltype(_impl_.followers_gained_month_){0}
    , decltype(_impl_.average_engagement_rate_){0}
    , decltype(_impl_.followers_lost_month_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetFollowerAnalyticsResponse::~GetFollowerAnalyticsResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetFollowerAnalyticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetFollowerAnalyticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.followers_by_country_.Destruct();
  _impl_.followers_by_country_.~MapField();
  _impl_.daily_growth_.Destruct();
  _impl_.daily_growth_.~MapField();
}

void GetFollowerAnalyticsResponse::ArenaDtor(void* object) {
  GetFollowerAnalyticsResponse* _this = reinterpret_cast< GetFollowerAnalyticsResponse* >(object);
  _this->_impl_.followers_by_country_.Destruct();
  _this->_impl_.daily_growth_.Destruct();
}
void GetFollowerAnalyticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFollowerAnalyticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetFollowerAnalyticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.followers_by_country_.Clear();
  _impl_.daily_growth_.Clear();
  ::memset(&_impl_.total_followers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.followers_lost_month_) -
      reinterpret_cast<char*>(&_impl_.total_followers_)) + sizeof(_impl_.followers_lost_month_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFollowerAnalyticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_followers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_following = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_following_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_follows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mutual_follows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_gained_today = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.followers_gained_today_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_lost_today = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.followers_lost_today_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_gained_week = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.followers_gained_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_lost_week = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.followers_lost_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_gained_month = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.followers_gained_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 followers_lost_month = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.followers_lost_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double average_engagement_rate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.average_engagement_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> followers_by_country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.followers_by_country_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> daily_growth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.daily_growth_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetFollowerAnalyticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetFollowerAnalyticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_followers = 1;
  if (this->_internal_total_followers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_total_followers(), target);
  }

  // int32 total_following = 2;
  if (this->_internal_total_following() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total_following(), target);
  }

  // int32 mutual_follows = 3;
  if (this->_internal_mutual_follows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mutual_follows(), target);
  }

  // int32 followers_gained_today = 4;
  if (this->_internal_followers_gained_today() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_followers_gained_today(), target);
  }

  // int32 followers_lost_today = 5;
  if (this->_internal_followers_lost_today() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_followers_lost_today(), target);
  }

  // int32 followers_gained_week = 6;
  if (this->_internal_followers_gained_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_followers_gained_week(), target);
  }

  // int32 followers_lost_week = 7;
  if (this->_internal_followers_lost_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_followers_lost_week(), target);
  }

  // int32 followers_gained_month = 8;
  if (this->_internal_followers_gained_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_followers_gained_month(), target);
  }

  // int32 followers_lost_month = 9;
  if (this->_internal_followers_lost_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_followers_lost_month(), target);
  }

  // double average_engagement_rate = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_rate = this->_internal_average_engagement_rate();
  uint64_t raw_average_engagement_rate;
  memcpy(&raw_average_engagement_rate, &tmp_average_engagement_rate, sizeof(tmp_average_engagement_rate));
  if (raw_average_engagement_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_average_engagement_rate(), target);
  }

  // map<string, int32> followers_by_country = 11;
  if (!this->_internal_followers_by_country().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_followers_by_country();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.follow.v1.GetFollowerAnalyticsResponse.FollowersByCountryEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, int32> daily_growth = 12;
  if (!this->_internal_daily_growth().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_daily_growth();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "sonet.follow.v1.GetFollowerAnalyticsResponse.DailyGrowthEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetFollowerAnalyticsResponse)
  return target;
}

size_t GetFollowerAnalyticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetFollowerAnalyticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> followers_by_country = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_followers_by_country_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_followers_by_country().begin();
      it != this->_internal_followers_by_country().end(); ++it) {
    total_size += GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> daily_growth = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_daily_growth_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_daily_growth().begin();
      it != this->_internal_daily_growth().end(); ++it) {
    total_size += GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 total_followers = 1;
  if (this->_internal_total_followers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_followers());
  }

  // int32 total_following = 2;
  if (this->_internal_total_following() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_following());
  }

  // int32 mutual_follows = 3;
  if (this->_internal_mutual_follows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutual_follows());
  }

  // int32 followers_gained_today = 4;
  if (this->_internal_followers_gained_today() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_gained_today());
  }

  // int32 followers_lost_today = 5;
  if (this->_internal_followers_lost_today() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_lost_today());
  }

  // int32 followers_gained_week = 6;
  if (this->_internal_followers_gained_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_gained_week());
  }

  // int32 followers_lost_week = 7;
  if (this->_internal_followers_lost_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_lost_week());
  }

  // int32 followers_gained_month = 8;
  if (this->_internal_followers_gained_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_gained_month());
  }

  // double average_engagement_rate = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_rate = this->_internal_average_engagement_rate();
  uint64_t raw_average_engagement_rate;
  memcpy(&raw_average_engagement_rate, &tmp_average_engagement_rate, sizeof(tmp_average_engagement_rate));
  if (raw_average_engagement_rate != 0) {
    total_size += 1 + 8;
  }

  // int32 followers_lost_month = 9;
  if (this->_internal_followers_lost_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_lost_month());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFollowerAnalyticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFollowerAnalyticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFollowerAnalyticsResponse::GetClassData() const { return &_class_data_; }


void GetFollowerAnalyticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFollowerAnalyticsResponse*>(&to_msg);
  auto& from = static_cast<const GetFollowerAnalyticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetFollowerAnalyticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.followers_by_country_.MergeFrom(from._impl_.followers_by_country_);
  _this->_impl_.daily_growth_.MergeFrom(from._impl_.daily_growth_);
  if (from._internal_total_followers() != 0) {
    _this->_internal_set_total_followers(from._internal_total_followers());
  }
  if (from._internal_total_following() != 0) {
    _this->_internal_set_total_following(from._internal_total_following());
  }
  if (from._internal_mutual_follows() != 0) {
    _this->_internal_set_mutual_follows(from._internal_mutual_follows());
  }
  if (from._internal_followers_gained_today() != 0) {
    _this->_internal_set_followers_gained_today(from._internal_followers_gained_today());
  }
  if (from._internal_followers_lost_today() != 0) {
    _this->_internal_set_followers_lost_today(from._internal_followers_lost_today());
  }
  if (from._internal_followers_gained_week() != 0) {
    _this->_internal_set_followers_gained_week(from._internal_followers_gained_week());
  }
  if (from._internal_followers_lost_week() != 0) {
    _this->_internal_set_followers_lost_week(from._internal_followers_lost_week());
  }
  if (from._internal_followers_gained_month() != 0) {
    _this->_internal_set_followers_gained_month(from._internal_followers_gained_month());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_rate = from._internal_average_engagement_rate();
  uint64_t raw_average_engagement_rate;
  memcpy(&raw_average_engagement_rate, &tmp_average_engagement_rate, sizeof(tmp_average_engagement_rate));
  if (raw_average_engagement_rate != 0) {
    _this->_internal_set_average_engagement_rate(from._internal_average_engagement_rate());
  }
  if (from._internal_followers_lost_month() != 0) {
    _this->_internal_set_followers_lost_month(from._internal_followers_lost_month());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFollowerAnalyticsResponse::CopyFrom(const GetFollowerAnalyticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetFollowerAnalyticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFollowerAnalyticsResponse::IsInitialized() const {
  return true;
}

void GetFollowerAnalyticsResponse::InternalSwap(GetFollowerAnalyticsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.followers_by_country_.InternalSwap(&other->_impl_.followers_by_country_);
  _impl_.daily_growth_.InternalSwap(&other->_impl_.daily_growth_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFollowerAnalyticsResponse, _impl_.followers_lost_month_)
      + sizeof(GetFollowerAnalyticsResponse::_impl_.followers_lost_month_)
      - PROTOBUF_FIELD_OFFSET(GetFollowerAnalyticsResponse, _impl_.total_followers_)>(
          reinterpret_cast<char*>(&_impl_.total_followers_),
          reinterpret_cast<char*>(&other->_impl_.total_followers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFollowerAnalyticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[39]);
}

// ===================================================================

class GetSocialMetricsRequest::_Internal {
 public:
};

GetSocialMetricsRequest::GetSocialMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetSocialMetricsRequest)
}
GetSocialMetricsRequest::GetSocialMetricsRequest(const GetSocialMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSocialMetricsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetSocialMetricsRequest)
}

inline void GetSocialMetricsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSocialMetricsRequest::~GetSocialMetricsRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetSocialMetricsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSocialMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
}

void GetSocialMetricsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSocialMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetSocialMetricsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocialMetricsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetSocialMetricsRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSocialMetricsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetSocialMetricsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetSocialMetricsRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetSocialMetricsRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetSocialMetricsRequest)
  return target;
}

size_t GetSocialMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetSocialMetricsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocialMetricsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSocialMetricsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocialMetricsRequest::GetClassData() const { return &_class_data_; }


void GetSocialMetricsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSocialMetricsRequest*>(&to_msg);
  auto& from = static_cast<const GetSocialMetricsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetSocialMetricsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocialMetricsRequest::CopyFrom(const GetSocialMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetSocialMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocialMetricsRequest::IsInitialized() const {
  return true;
}

void GetSocialMetricsRequest::InternalSwap(GetSocialMetricsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocialMetricsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[40]);
}

// ===================================================================

class GetSocialMetricsResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const GetSocialMetricsResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetSocialMetricsResponse::_Internal::last_updated(const GetSocialMetricsResponse* msg) {
  return *msg->_impl_.last_updated_;
}
void GetSocialMetricsResponse::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
}
GetSocialMetricsResponse::GetSocialMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetSocialMetricsResponse)
}
GetSocialMetricsResponse::GetSocialMetricsResponse(const GetSocialMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSocialMetricsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.followers_count_){}
    , decltype(_impl_.following_count_){}
    , decltype(_impl_.followers_following_ratio_){}
    , decltype(_impl_.average_engagement_score_){}
    , decltype(_impl_.influence_score_){}
    , decltype(_impl_.network_reach_){}
    , decltype(_impl_.mutual_connections_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_updated()) {
    _this->_impl_.last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_updated_);
  }
  ::memcpy(&_impl_.followers_count_, &from._impl_.followers_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mutual_connections_) -
    reinterpret_cast<char*>(&_impl_.followers_count_)) + sizeof(_impl_.mutual_connections_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetSocialMetricsResponse)
}

inline void GetSocialMetricsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.followers_count_){0}
    , decltype(_impl_.following_count_){0}
    , decltype(_impl_.followers_following_ratio_){0}
    , decltype(_impl_.average_engagement_score_){0}
    , decltype(_impl_.influence_score_){0}
    , decltype(_impl_.network_reach_){0}
    , decltype(_impl_.mutual_connections_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSocialMetricsResponse::~GetSocialMetricsResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetSocialMetricsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSocialMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_updated_;
}

void GetSocialMetricsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSocialMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetSocialMetricsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
  ::memset(&_impl_.followers_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mutual_connections_) -
      reinterpret_cast<char*>(&_impl_.followers_count_)) + sizeof(_impl_.mutual_connections_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSocialMetricsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 followers_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.followers_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 following_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.following_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double followers_following_ratio = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.followers_following_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double average_engagement_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.average_engagement_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double influence_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.influence_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mutual_connections = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mutual_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double network_reach = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.network_reach_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSocialMetricsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetSocialMetricsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 followers_count = 1;
  if (this->_internal_followers_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_followers_count(), target);
  }

  // int32 following_count = 2;
  if (this->_internal_following_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_following_count(), target);
  }

  // double followers_following_ratio = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_followers_following_ratio = this->_internal_followers_following_ratio();
  uint64_t raw_followers_following_ratio;
  memcpy(&raw_followers_following_ratio, &tmp_followers_following_ratio, sizeof(tmp_followers_following_ratio));
  if (raw_followers_following_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_followers_following_ratio(), target);
  }

  // double average_engagement_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_score = this->_internal_average_engagement_score();
  uint64_t raw_average_engagement_score;
  memcpy(&raw_average_engagement_score, &tmp_average_engagement_score, sizeof(tmp_average_engagement_score));
  if (raw_average_engagement_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_average_engagement_score(), target);
  }

  // double influence_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_influence_score = this->_internal_influence_score();
  uint64_t raw_influence_score;
  memcpy(&raw_influence_score, &tmp_influence_score, sizeof(tmp_influence_score));
  if (raw_influence_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_influence_score(), target);
  }

  // int32 mutual_connections = 6;
  if (this->_internal_mutual_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mutual_connections(), target);
  }

  // double network_reach = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_reach = this->_internal_network_reach();
  uint64_t raw_network_reach;
  memcpy(&raw_network_reach, &tmp_network_reach, sizeof(tmp_network_reach));
  if (raw_network_reach != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_network_reach(), target);
  }

  // .google.protobuf.Timestamp last_updated = 8;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetSocialMetricsResponse)
  return target;
}

size_t GetSocialMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetSocialMetricsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 8;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_);
  }

  // int32 followers_count = 1;
  if (this->_internal_followers_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_followers_count());
  }

  // int32 following_count = 2;
  if (this->_internal_following_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_following_count());
  }

  // double followers_following_ratio = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_followers_following_ratio = this->_internal_followers_following_ratio();
  uint64_t raw_followers_following_ratio;
  memcpy(&raw_followers_following_ratio, &tmp_followers_following_ratio, sizeof(tmp_followers_following_ratio));
  if (raw_followers_following_ratio != 0) {
    total_size += 1 + 8;
  }

  // double average_engagement_score = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_score = this->_internal_average_engagement_score();
  uint64_t raw_average_engagement_score;
  memcpy(&raw_average_engagement_score, &tmp_average_engagement_score, sizeof(tmp_average_engagement_score));
  if (raw_average_engagement_score != 0) {
    total_size += 1 + 8;
  }

  // double influence_score = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_influence_score = this->_internal_influence_score();
  uint64_t raw_influence_score;
  memcpy(&raw_influence_score, &tmp_influence_score, sizeof(tmp_influence_score));
  if (raw_influence_score != 0) {
    total_size += 1 + 8;
  }

  // double network_reach = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_reach = this->_internal_network_reach();
  uint64_t raw_network_reach;
  memcpy(&raw_network_reach, &tmp_network_reach, sizeof(tmp_network_reach));
  if (raw_network_reach != 0) {
    total_size += 1 + 8;
  }

  // int32 mutual_connections = 6;
  if (this->_internal_mutual_connections() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mutual_connections());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSocialMetricsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSocialMetricsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSocialMetricsResponse::GetClassData() const { return &_class_data_; }


void GetSocialMetricsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSocialMetricsResponse*>(&to_msg);
  auto& from = static_cast<const GetSocialMetricsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetSocialMetricsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_updated()) {
    _this->_internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_updated());
  }
  if (from._internal_followers_count() != 0) {
    _this->_internal_set_followers_count(from._internal_followers_count());
  }
  if (from._internal_following_count() != 0) {
    _this->_internal_set_following_count(from._internal_following_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_followers_following_ratio = from._internal_followers_following_ratio();
  uint64_t raw_followers_following_ratio;
  memcpy(&raw_followers_following_ratio, &tmp_followers_following_ratio, sizeof(tmp_followers_following_ratio));
  if (raw_followers_following_ratio != 0) {
    _this->_internal_set_followers_following_ratio(from._internal_followers_following_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_average_engagement_score = from._internal_average_engagement_score();
  uint64_t raw_average_engagement_score;
  memcpy(&raw_average_engagement_score, &tmp_average_engagement_score, sizeof(tmp_average_engagement_score));
  if (raw_average_engagement_score != 0) {
    _this->_internal_set_average_engagement_score(from._internal_average_engagement_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_influence_score = from._internal_influence_score();
  uint64_t raw_influence_score;
  memcpy(&raw_influence_score, &tmp_influence_score, sizeof(tmp_influence_score));
  if (raw_influence_score != 0) {
    _this->_internal_set_influence_score(from._internal_influence_score());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_reach = from._internal_network_reach();
  uint64_t raw_network_reach;
  memcpy(&raw_network_reach, &tmp_network_reach, sizeof(tmp_network_reach));
  if (raw_network_reach != 0) {
    _this->_internal_set_network_reach(from._internal_network_reach());
  }
  if (from._internal_mutual_connections() != 0) {
    _this->_internal_set_mutual_connections(from._internal_mutual_connections());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSocialMetricsResponse::CopyFrom(const GetSocialMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetSocialMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSocialMetricsResponse::IsInitialized() const {
  return true;
}

void GetSocialMetricsResponse::InternalSwap(GetSocialMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSocialMetricsResponse, _impl_.mutual_connections_)
      + sizeof(GetSocialMetricsResponse::_impl_.mutual_connections_)
      - PROTOBUF_FIELD_OFFSET(GetSocialMetricsResponse, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSocialMetricsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[41]);
}

// ===================================================================

class GetLiveFollowerCountRequest::_Internal {
 public:
};

GetLiveFollowerCountRequest::GetLiveFollowerCountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetLiveFollowerCountRequest)
}
GetLiveFollowerCountRequest::GetLiveFollowerCountRequest(const GetLiveFollowerCountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLiveFollowerCountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_requesting_user_id().empty()) {
    _this->_impl_.requesting_user_id_.Set(from._internal_requesting_user_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetLiveFollowerCountRequest)
}

inline void GetLiveFollowerCountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.requesting_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.requesting_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.requesting_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetLiveFollowerCountRequest::~GetLiveFollowerCountRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetLiveFollowerCountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLiveFollowerCountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.requesting_user_id_.Destroy();
}

void GetLiveFollowerCountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLiveFollowerCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetLiveFollowerCountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.requesting_user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveFollowerCountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetLiveFollowerCountRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string requesting_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_requesting_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLiveFollowerCountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetLiveFollowerCountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetLiveFollowerCountRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesting_user_id().data(), static_cast<int>(this->_internal_requesting_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetLiveFollowerCountRequest.requesting_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetLiveFollowerCountRequest)
  return target;
}

size_t GetLiveFollowerCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetLiveFollowerCountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string requesting_user_id = 2;
  if (!this->_internal_requesting_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveFollowerCountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLiveFollowerCountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveFollowerCountRequest::GetClassData() const { return &_class_data_; }


void GetLiveFollowerCountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLiveFollowerCountRequest*>(&to_msg);
  auto& from = static_cast<const GetLiveFollowerCountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetLiveFollowerCountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_requesting_user_id().empty()) {
    _this->_internal_set_requesting_user_id(from._internal_requesting_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveFollowerCountRequest::CopyFrom(const GetLiveFollowerCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetLiveFollowerCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveFollowerCountRequest::IsInitialized() const {
  return true;
}

void GetLiveFollowerCountRequest::InternalSwap(GetLiveFollowerCountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.requesting_user_id_, lhs_arena,
      &other->_impl_.requesting_user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveFollowerCountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[42]);
}

// ===================================================================

class GetLiveFollowerCountResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const GetLiveFollowerCountResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetLiveFollowerCountResponse::_Internal::last_updated(const GetLiveFollowerCountResponse* msg) {
  return *msg->_impl_.last_updated_;
}
void GetLiveFollowerCountResponse::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
}
GetLiveFollowerCountResponse::GetLiveFollowerCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetLiveFollowerCountResponse)
}
GetLiveFollowerCountResponse::GetLiveFollowerCountResponse(const GetLiveFollowerCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLiveFollowerCountResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.follower_count_){}
    , decltype(_impl_.following_count_){}
    , decltype(_impl_.change_since_yesterday_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_updated()) {
    _this->_impl_.last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_updated_);
  }
  ::memcpy(&_impl_.follower_count_, &from._impl_.follower_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_since_yesterday_) -
    reinterpret_cast<char*>(&_impl_.follower_count_)) + sizeof(_impl_.change_since_yesterday_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetLiveFollowerCountResponse)
}

inline void GetLiveFollowerCountResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.follower_count_){0}
    , decltype(_impl_.following_count_){0}
    , decltype(_impl_.change_since_yesterday_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLiveFollowerCountResponse::~GetLiveFollowerCountResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetLiveFollowerCountResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLiveFollowerCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_updated_;
}

void GetLiveFollowerCountResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLiveFollowerCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetLiveFollowerCountResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
  ::memset(&_impl_.follower_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_since_yesterday_) -
      reinterpret_cast<char*>(&_impl_.follower_count_)) + sizeof(_impl_.change_since_yesterday_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLiveFollowerCountResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 follower_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.follower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 following_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.following_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 change_since_yesterday = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.change_since_yesterday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLiveFollowerCountResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetLiveFollowerCountResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 follower_count = 1;
  if (this->_internal_follower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_follower_count(), target);
  }

  // int32 following_count = 2;
  if (this->_internal_following_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_following_count(), target);
  }

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  // int32 change_since_yesterday = 4;
  if (this->_internal_change_since_yesterday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_change_since_yesterday(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetLiveFollowerCountResponse)
  return target;
}

size_t GetLiveFollowerCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetLiveFollowerCountResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_);
  }

  // int32 follower_count = 1;
  if (this->_internal_follower_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_follower_count());
  }

  // int32 following_count = 2;
  if (this->_internal_following_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_following_count());
  }

  // int32 change_since_yesterday = 4;
  if (this->_internal_change_since_yesterday() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change_since_yesterday());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLiveFollowerCountResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLiveFollowerCountResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLiveFollowerCountResponse::GetClassData() const { return &_class_data_; }


void GetLiveFollowerCountResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLiveFollowerCountResponse*>(&to_msg);
  auto& from = static_cast<const GetLiveFollowerCountResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetLiveFollowerCountResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_updated()) {
    _this->_internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_updated());
  }
  if (from._internal_follower_count() != 0) {
    _this->_internal_set_follower_count(from._internal_follower_count());
  }
  if (from._internal_following_count() != 0) {
    _this->_internal_set_following_count(from._internal_following_count());
  }
  if (from._internal_change_since_yesterday() != 0) {
    _this->_internal_set_change_since_yesterday(from._internal_change_since_yesterday());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLiveFollowerCountResponse::CopyFrom(const GetLiveFollowerCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetLiveFollowerCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLiveFollowerCountResponse::IsInitialized() const {
  return true;
}

void GetLiveFollowerCountResponse::InternalSwap(GetLiveFollowerCountResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLiveFollowerCountResponse, _impl_.change_since_yesterday_)
      + sizeof(GetLiveFollowerCountResponse::_impl_.change_since_yesterday_)
      - PROTOBUF_FIELD_OFFSET(GetLiveFollowerCountResponse, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLiveFollowerCountResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[43]);
}

// ===================================================================

class GetRecentActivityRequest::_Internal {
 public:
};

GetRecentActivityRequest::GetRecentActivityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRecentActivityRequest)
}
GetRecentActivityRequest::GetRecentActivityRequest(const GetRecentActivityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecentActivityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.activity_type_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.activity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activity_type().empty()) {
    _this->_impl_.activity_type_.Set(from._internal_activity_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRecentActivityRequest)
}

inline void GetRecentActivityRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.activity_type_){}
    , decltype(_impl_.limit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.activity_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRecentActivityRequest::~GetRecentActivityRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRecentActivityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecentActivityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.activity_type_.Destroy();
}

void GetRecentActivityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecentActivityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRecentActivityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.activity_type_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecentActivityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecentActivityRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string activity_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_activity_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.GetRecentActivityRequest.activity_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecentActivityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRecentActivityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecentActivityRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // string activity_type = 3;
  if (!this->_internal_activity_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activity_type().data(), static_cast<int>(this->_internal_activity_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.GetRecentActivityRequest.activity_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_activity_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRecentActivityRequest)
  return target;
}

size_t GetRecentActivityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRecentActivityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string activity_type = 3;
  if (!this->_internal_activity_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activity_type());
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecentActivityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecentActivityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecentActivityRequest::GetClassData() const { return &_class_data_; }


void GetRecentActivityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecentActivityRequest*>(&to_msg);
  auto& from = static_cast<const GetRecentActivityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRecentActivityRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_activity_type().empty()) {
    _this->_internal_set_activity_type(from._internal_activity_type());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecentActivityRequest::CopyFrom(const GetRecentActivityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRecentActivityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecentActivityRequest::IsInitialized() const {
  return true;
}

void GetRecentActivityRequest::InternalSwap(GetRecentActivityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activity_type_, lhs_arena,
      &other->_impl_.activity_type_, rhs_arena
  );
  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecentActivityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[44]);
}

// ===================================================================

class GetRecentActivityResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const GetRecentActivityResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetRecentActivityResponse::_Internal::last_updated(const GetRecentActivityResponse* msg) {
  return *msg->_impl_.last_updated_;
}
void GetRecentActivityResponse::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
}
GetRecentActivityResponse::GetRecentActivityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.GetRecentActivityResponse)
}
GetRecentActivityResponse::GetRecentActivityResponse(const GetRecentActivityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecentActivityResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){from._impl_.activities_}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.has_more_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_updated()) {
    _this->_impl_.last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_updated_);
  }
  _this->_impl_.has_more_ = from._impl_.has_more_;
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.GetRecentActivityResponse)
}

inline void GetRecentActivityResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){arena}
    , decltype(_impl_.last_updated_){nullptr}
    , decltype(_impl_.has_more_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecentActivityResponse::~GetRecentActivityResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.GetRecentActivityResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecentActivityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.last_updated_;
}

void GetRecentActivityResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecentActivityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.GetRecentActivityResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.last_updated_ != nullptr) {
    delete _impl_.last_updated_;
  }
  _impl_.last_updated_ = nullptr;
  _impl_.has_more_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecentActivityResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sonet.follow.v1.FollowActivity activities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool has_more = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.has_more_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecentActivityResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.GetRecentActivityResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.FollowActivity activities = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activities_size()); i < n; i++) {
    const auto& repfield = this->_internal_activities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more(), target);
  }

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_updated(this),
        _Internal::last_updated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.GetRecentActivityResponse)
  return target;
}

size_t GetRecentActivityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.GetRecentActivityResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sonet.follow.v1.FollowActivity activities = 1;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->_impl_.activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp last_updated = 3;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_updated_);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecentActivityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecentActivityResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecentActivityResponse::GetClassData() const { return &_class_data_; }


void GetRecentActivityResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecentActivityResponse*>(&to_msg);
  auto& from = static_cast<const GetRecentActivityResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.GetRecentActivityResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  if (from._internal_has_last_updated()) {
    _this->_internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_updated());
  }
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecentActivityResponse::CopyFrom(const GetRecentActivityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.GetRecentActivityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecentActivityResponse::IsInitialized() const {
  return true;
}

void GetRecentActivityResponse::InternalSwap(GetRecentActivityResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecentActivityResponse, _impl_.has_more_)
      + sizeof(GetRecentActivityResponse::_impl_.has_more_)
      - PROTOBUF_FIELD_OFFSET(GetRecentActivityResponse, _impl_.last_updated_)>(
          reinterpret_cast<char*>(&_impl_.last_updated_),
          reinterpret_cast<char*>(&other->_impl_.last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecentActivityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[45]);
}

// ===================================================================

class FollowActivity::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const FollowActivity* msg);
  static const ::sonet::follow::v1::UserInfo& actor(const FollowActivity* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
FollowActivity::_Internal::timestamp(const FollowActivity* msg) {
  return *msg->_impl_.timestamp_;
}
const ::sonet::follow::v1::UserInfo&
FollowActivity::_Internal::actor(const FollowActivity* msg) {
  return *msg->_impl_.actor_;
}
void FollowActivity::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
FollowActivity::FollowActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.FollowActivity)
}
FollowActivity::FollowActivity(const FollowActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FollowActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activity_id_){}
    , decltype(_impl_.actor_user_id_){}
    , decltype(_impl_.target_user_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.actor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.activity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activity_id().empty()) {
    _this->_impl_.activity_id_.Set(from._internal_activity_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.actor_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_actor_user_id().empty()) {
    _this->_impl_.actor_user_id_.Set(from._internal_actor_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_user_id().empty()) {
    _this->_impl_.target_user_id_.Set(from._internal_target_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if (from._internal_has_actor()) {
    _this->_impl_.actor_ = new ::sonet::follow::v1::UserInfo(*from._impl_.actor_);
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.FollowActivity)
}

inline void FollowActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activity_id_){}
    , decltype(_impl_.actor_user_id_){}
    , decltype(_impl_.target_user_id_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.actor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.activity_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activity_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.actor_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.actor_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FollowActivity::~FollowActivity() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.FollowActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activity_id_.Destroy();
  _impl_.actor_user_id_.Destroy();
  _impl_.target_user_id_.Destroy();
  _impl_.action_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.actor_;
}

void FollowActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.FollowActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activity_id_.ClearToEmpty();
  _impl_.actor_user_id_.ClearToEmpty();
  _impl_.target_user_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.actor_ != nullptr) {
    delete _impl_.actor_;
  }
  _impl_.actor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string activity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_activity_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowActivity.activity_id"));
        } else
          goto handle_unusual;
        continue;
      // string actor_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_actor_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowActivity.actor_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string target_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowActivity.target_user_id"));
        } else
          goto handle_unusual;
        continue;
      // string action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.FollowActivity.action"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sonet.follow.v1.UserInfo actor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.FollowActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string activity_id = 1;
  if (!this->_internal_activity_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activity_id().data(), static_cast<int>(this->_internal_activity_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowActivity.activity_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activity_id(), target);
  }

  // string actor_user_id = 2;
  if (!this->_internal_actor_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_actor_user_id().data(), static_cast<int>(this->_internal_actor_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowActivity.actor_user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_actor_user_id(), target);
  }

  // string target_user_id = 3;
  if (!this->_internal_target_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_user_id().data(), static_cast<int>(this->_internal_target_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowActivity.target_user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_user_id(), target);
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.FollowActivity.action");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_action(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .sonet.follow.v1.UserInfo actor = 6;
  if (this->_internal_has_actor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::actor(this),
        _Internal::actor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.FollowActivity)
  return target;
}

size_t FollowActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.FollowActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string activity_id = 1;
  if (!this->_internal_activity_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activity_id());
  }

  // string actor_user_id = 2;
  if (!this->_internal_actor_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_actor_user_id());
  }

  // string target_user_id = 3;
  if (!this->_internal_target_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_user_id());
  }

  // string action = 4;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .sonet.follow.v1.UserInfo actor = 6;
  if (this->_internal_has_actor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.actor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowActivity::GetClassData() const { return &_class_data_; }


void FollowActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowActivity*>(&to_msg);
  auto& from = static_cast<const FollowActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.FollowActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_activity_id().empty()) {
    _this->_internal_set_activity_id(from._internal_activity_id());
  }
  if (!from._internal_actor_user_id().empty()) {
    _this->_internal_set_actor_user_id(from._internal_actor_user_id());
  }
  if (!from._internal_target_user_id().empty()) {
    _this->_internal_set_target_user_id(from._internal_target_user_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_has_actor()) {
    _this->_internal_mutable_actor()->::sonet::follow::v1::UserInfo::MergeFrom(
        from._internal_actor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowActivity::CopyFrom(const FollowActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.FollowActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowActivity::IsInitialized() const {
  return true;
}

void FollowActivity::InternalSwap(FollowActivity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activity_id_, lhs_arena,
      &other->_impl_.activity_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.actor_user_id_, lhs_arena,
      &other->_impl_.actor_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_user_id_, lhs_arena,
      &other->_impl_.target_user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowActivity, _impl_.actor_)
      + sizeof(FollowActivity::_impl_.actor_)
      - PROTOBUF_FIELD_OFFSET(FollowActivity, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[46]);
}

// ===================================================================

class ValidateFollowRequest::_Internal {
 public:
};

ValidateFollowRequest::ValidateFollowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.ValidateFollowRequest)
}
ValidateFollowRequest::ValidateFollowRequest(const ValidateFollowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidateFollowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_follower_id().empty()) {
    _this->_impl_.follower_id_.Set(from._internal_follower_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_following_id().empty()) {
    _this->_impl_.following_id_.Set(from._internal_following_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.ValidateFollowRequest)
}

inline void ValidateFollowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.follower_id_){}
    , decltype(_impl_.following_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.follower_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.follower_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.following_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.following_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidateFollowRequest::~ValidateFollowRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.ValidateFollowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidateFollowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follower_id_.Destroy();
  _impl_.following_id_.Destroy();
}

void ValidateFollowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidateFollowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.ValidateFollowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follower_id_.ClearToEmpty();
  _impl_.following_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateFollowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string follower_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_follower_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.ValidateFollowRequest.follower_id"));
        } else
          goto handle_unusual;
        continue;
      // string following_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_following_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.ValidateFollowRequest.following_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateFollowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.ValidateFollowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_follower_id().data(), static_cast<int>(this->_internal_follower_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.ValidateFollowRequest.follower_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_follower_id(), target);
  }

  // string following_id = 2;
  if (!this->_internal_following_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_following_id().data(), static_cast<int>(this->_internal_following_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.ValidateFollowRequest.following_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_following_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.ValidateFollowRequest)
  return target;
}

size_t ValidateFollowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.ValidateFollowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string follower_id = 1;
  if (!this->_internal_follower_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_follower_id());
  }

  // string following_id = 2;
  if (!this->_internal_following_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_following_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateFollowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidateFollowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateFollowRequest::GetClassData() const { return &_class_data_; }


void ValidateFollowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidateFollowRequest*>(&to_msg);
  auto& from = static_cast<const ValidateFollowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.ValidateFollowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_follower_id().empty()) {
    _this->_internal_set_follower_id(from._internal_follower_id());
  }
  if (!from._internal_following_id().empty()) {
    _this->_internal_set_following_id(from._internal_following_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateFollowRequest::CopyFrom(const ValidateFollowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.ValidateFollowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateFollowRequest::IsInitialized() const {
  return true;
}

void ValidateFollowRequest::InternalSwap(ValidateFollowRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.follower_id_, lhs_arena,
      &other->_impl_.follower_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.following_id_, lhs_arena,
      &other->_impl_.following_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateFollowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[47]);
}

// ===================================================================

class ValidateFollowResponse::_Internal {
 public:
};

ValidateFollowResponse::ValidateFollowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.ValidateFollowResponse)
}
ValidateFollowResponse::ValidateFollowResponse(const ValidateFollowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidateFollowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.can_follow_){}
    , decltype(_impl_.requires_approval_){}
    , decltype(_impl_.is_blocked_){}
    , decltype(_impl_.at_follow_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.can_follow_, &from._impl_.can_follow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.at_follow_limit_) -
    reinterpret_cast<char*>(&_impl_.can_follow_)) + sizeof(_impl_.at_follow_limit_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.ValidateFollowResponse)
}

inline void ValidateFollowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.can_follow_){false}
    , decltype(_impl_.requires_approval_){false}
    , decltype(_impl_.is_blocked_){false}
    , decltype(_impl_.at_follow_limit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidateFollowResponse::~ValidateFollowResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.ValidateFollowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidateFollowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void ValidateFollowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidateFollowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.ValidateFollowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.can_follow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.at_follow_limit_) -
      reinterpret_cast<char*>(&_impl_.can_follow_)) + sizeof(_impl_.at_follow_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateFollowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool can_follow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.can_follow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.ValidateFollowResponse.reason"));
        } else
          goto handle_unusual;
        continue;
      // bool requires_approval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.requires_approval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_blocked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_blocked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool at_follow_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.at_follow_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValidateFollowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.ValidateFollowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool can_follow = 1;
  if (this->_internal_can_follow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_can_follow(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.ValidateFollowResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // bool requires_approval = 3;
  if (this->_internal_requires_approval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_requires_approval(), target);
  }

  // bool is_blocked = 4;
  if (this->_internal_is_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_blocked(), target);
  }

  // bool at_follow_limit = 5;
  if (this->_internal_at_follow_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_at_follow_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.ValidateFollowResponse)
  return target;
}

size_t ValidateFollowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.ValidateFollowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // bool can_follow = 1;
  if (this->_internal_can_follow() != 0) {
    total_size += 1 + 1;
  }

  // bool requires_approval = 3;
  if (this->_internal_requires_approval() != 0) {
    total_size += 1 + 1;
  }

  // bool is_blocked = 4;
  if (this->_internal_is_blocked() != 0) {
    total_size += 1 + 1;
  }

  // bool at_follow_limit = 5;
  if (this->_internal_at_follow_limit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateFollowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidateFollowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateFollowResponse::GetClassData() const { return &_class_data_; }


void ValidateFollowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidateFollowResponse*>(&to_msg);
  auto& from = static_cast<const ValidateFollowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.ValidateFollowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_can_follow() != 0) {
    _this->_internal_set_can_follow(from._internal_can_follow());
  }
  if (from._internal_requires_approval() != 0) {
    _this->_internal_set_requires_approval(from._internal_requires_approval());
  }
  if (from._internal_is_blocked() != 0) {
    _this->_internal_set_is_blocked(from._internal_is_blocked());
  }
  if (from._internal_at_follow_limit() != 0) {
    _this->_internal_set_at_follow_limit(from._internal_at_follow_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateFollowResponse::CopyFrom(const ValidateFollowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.ValidateFollowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateFollowResponse::IsInitialized() const {
  return true;
}

void ValidateFollowResponse::InternalSwap(ValidateFollowResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidateFollowResponse, _impl_.at_follow_limit_)
      + sizeof(ValidateFollowResponse::_impl_.at_follow_limit_)
      - PROTOBUF_FIELD_OFFSET(ValidateFollowResponse, _impl_.can_follow_)>(
          reinterpret_cast<char*>(&_impl_.can_follow_),
          reinterpret_cast<char*>(&other->_impl_.can_follow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateFollowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[48]);
}

// ===================================================================

class CheckRateLimitRequest::_Internal {
 public:
};

CheckRateLimitRequest::CheckRateLimitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.CheckRateLimitRequest)
}
CheckRateLimitRequest::CheckRateLimitRequest(const CheckRateLimitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRateLimitRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    _this->_impl_.action_.Set(from._internal_action(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.CheckRateLimitRequest)
}

inline void CheckRateLimitRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckRateLimitRequest::~CheckRateLimitRequest() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.CheckRateLimitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRateLimitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.action_.Destroy();
}

void CheckRateLimitRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRateLimitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.CheckRateLimitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.action_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRateLimitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.CheckRateLimitRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sonet.follow.v1.CheckRateLimitRequest.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRateLimitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.CheckRateLimitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.CheckRateLimitRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sonet.follow.v1.CheckRateLimitRequest.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.CheckRateLimitRequest)
  return target;
}

size_t CheckRateLimitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.CheckRateLimitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRateLimitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRateLimitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRateLimitRequest::GetClassData() const { return &_class_data_; }


void CheckRateLimitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRateLimitRequest*>(&to_msg);
  auto& from = static_cast<const CheckRateLimitRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.CheckRateLimitRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_action().empty()) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRateLimitRequest::CopyFrom(const CheckRateLimitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.CheckRateLimitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRateLimitRequest::IsInitialized() const {
  return true;
}

void CheckRateLimitRequest::InternalSwap(CheckRateLimitRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_, lhs_arena,
      &other->_impl_.action_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRateLimitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[49]);
}

// ===================================================================

class CheckRateLimitResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& reset_time(const CheckRateLimitResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CheckRateLimitResponse::_Internal::reset_time(const CheckRateLimitResponse* msg) {
  return *msg->_impl_.reset_time_;
}
void CheckRateLimitResponse::clear_reset_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.reset_time_ != nullptr) {
    delete _impl_.reset_time_;
  }
  _impl_.reset_time_ = nullptr;
}
CheckRateLimitResponse::CheckRateLimitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sonet.follow.v1.CheckRateLimitResponse)
}
CheckRateLimitResponse::CheckRateLimitResponse(const CheckRateLimitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRateLimitResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_time_){nullptr}
    , decltype(_impl_.allowed_){}
    , decltype(_impl_.limit_){}
    , decltype(_impl_.remaining_){}
    , decltype(_impl_.retry_after_seconds_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reset_time()) {
    _this->_impl_.reset_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.reset_time_);
  }
  ::memcpy(&_impl_.allowed_, &from._impl_.allowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_after_seconds_) -
    reinterpret_cast<char*>(&_impl_.allowed_)) + sizeof(_impl_.retry_after_seconds_));
  // @@protoc_insertion_point(copy_constructor:sonet.follow.v1.CheckRateLimitResponse)
}

inline void CheckRateLimitResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reset_time_){nullptr}
    , decltype(_impl_.allowed_){false}
    , decltype(_impl_.limit_){0}
    , decltype(_impl_.remaining_){0}
    , decltype(_impl_.retry_after_seconds_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CheckRateLimitResponse::~CheckRateLimitResponse() {
  // @@protoc_insertion_point(destructor:sonet.follow.v1.CheckRateLimitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRateLimitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reset_time_;
}

void CheckRateLimitResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRateLimitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sonet.follow.v1.CheckRateLimitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.reset_time_ != nullptr) {
    delete _impl_.reset_time_;
  }
  _impl_.reset_time_ = nullptr;
  ::memset(&_impl_.allowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retry_after_seconds_) -
      reinterpret_cast<char*>(&_impl_.allowed_)) + sizeof(_impl_.retry_after_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRateLimitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool allowed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reset_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 retry_after_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.retry_after_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRateLimitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sonet.follow.v1.CheckRateLimitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool allowed = 1;
  if (this->_internal_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allowed(), target);
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // int32 remaining = 3;
  if (this->_internal_remaining() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_remaining(), target);
  }

  // .google.protobuf.Timestamp reset_time = 4;
  if (this->_internal_has_reset_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reset_time(this),
        _Internal::reset_time(this).GetCachedSize(), target, stream);
  }

  // int32 retry_after_seconds = 5;
  if (this->_internal_retry_after_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_retry_after_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sonet.follow.v1.CheckRateLimitResponse)
  return target;
}

size_t CheckRateLimitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sonet.follow.v1.CheckRateLimitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp reset_time = 4;
  if (this->_internal_has_reset_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reset_time_);
  }

  // bool allowed = 1;
  if (this->_internal_allowed() != 0) {
    total_size += 1 + 1;
  }

  // int32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limit());
  }

  // int32 remaining = 3;
  if (this->_internal_remaining() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_remaining());
  }

  // int32 retry_after_seconds = 5;
  if (this->_internal_retry_after_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_retry_after_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRateLimitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRateLimitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRateLimitResponse::GetClassData() const { return &_class_data_; }


void CheckRateLimitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRateLimitResponse*>(&to_msg);
  auto& from = static_cast<const CheckRateLimitResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sonet.follow.v1.CheckRateLimitResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reset_time()) {
    _this->_internal_mutable_reset_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_reset_time());
  }
  if (from._internal_allowed() != 0) {
    _this->_internal_set_allowed(from._internal_allowed());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_remaining() != 0) {
    _this->_internal_set_remaining(from._internal_remaining());
  }
  if (from._internal_retry_after_seconds() != 0) {
    _this->_internal_set_retry_after_seconds(from._internal_retry_after_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRateLimitResponse::CopyFrom(const CheckRateLimitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sonet.follow.v1.CheckRateLimitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRateLimitResponse::IsInitialized() const {
  return true;
}

void CheckRateLimitResponse::InternalSwap(CheckRateLimitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckRateLimitResponse, _impl_.retry_after_seconds_)
      + sizeof(CheckRateLimitResponse::_impl_.retry_after_seconds_)
      - PROTOBUF_FIELD_OFFSET(CheckRateLimitResponse, _impl_.reset_time_)>(
          reinterpret_cast<char*>(&_impl_.reset_time_),
          reinterpret_cast<char*>(&other->_impl_.reset_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRateLimitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2ffollow_5fservice_2eproto_getter, &descriptor_table_proto_2ffollow_5fservice_2eproto_once,
      file_level_metadata_proto_2ffollow_5fservice_2eproto[50]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace follow
}  // namespace sonet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::Follow*
Arena::CreateMaybeMessage< ::sonet::follow::v1::Follow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::Follow >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::Relationship*
Arena::CreateMaybeMessage< ::sonet::follow::v1::Relationship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::Relationship >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UserInfo*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::Recommendation*
Arena::CreateMaybeMessage< ::sonet::follow::v1::Recommendation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::Recommendation >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::PaginationInfo*
Arena::CreateMaybeMessage< ::sonet::follow::v1::PaginationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::PaginationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::FollowUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::FollowUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::FollowUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::FollowUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::FollowUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::FollowUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnfollowUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnfollowUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnfollowUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnfollowUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnfollowUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnfollowUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::BlockUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::BlockUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::BlockUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::BlockUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::BlockUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::BlockUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnblockUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnblockUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnblockUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnblockUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnblockUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnblockUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::MuteUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::MuteUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::MuteUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::MuteUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::MuteUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::MuteUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnmuteUserRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnmuteUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnmuteUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::UnmuteUserResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::UnmuteUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::UnmuteUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRelationshipRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRelationshipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRelationshipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRelationshipResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRelationshipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRelationshipResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::CheckRelationshipRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::CheckRelationshipRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::CheckRelationshipRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::CheckRelationshipResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::CheckRelationshipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::CheckRelationshipResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetBulkRelationshipsRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetBulkRelationshipsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetBulkRelationshipsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetBulkRelationshipsResponse_RelationshipsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetBulkRelationshipsResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetBulkRelationshipsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetBulkRelationshipsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::BulkFollowRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::BulkFollowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::BulkFollowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::BulkFollowResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::BulkFollowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::BulkFollowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowersRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowersResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowingRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowingResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetMutualFriendsRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetMutualFriendsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetMutualFriendsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetMutualFriendsResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetMutualFriendsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetMutualFriendsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRecommendationsRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRecommendationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRecommendationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRecommendationsResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRecommendationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRecommendationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetTrendingUsersRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetTrendingUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetTrendingUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetTrendingUsersResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetTrendingUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetTrendingUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowerAnalyticsRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowerAnalyticsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowerAnalyticsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowerAnalyticsResponse_FollowersByCountryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowerAnalyticsResponse_DailyGrowthEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetFollowerAnalyticsResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetFollowerAnalyticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetFollowerAnalyticsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetSocialMetricsRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetSocialMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetSocialMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetSocialMetricsResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetSocialMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetSocialMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetLiveFollowerCountRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetLiveFollowerCountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetLiveFollowerCountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetLiveFollowerCountResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetLiveFollowerCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetLiveFollowerCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRecentActivityRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRecentActivityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRecentActivityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::GetRecentActivityResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::GetRecentActivityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::GetRecentActivityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::FollowActivity*
Arena::CreateMaybeMessage< ::sonet::follow::v1::FollowActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::FollowActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::ValidateFollowRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::ValidateFollowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::ValidateFollowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::ValidateFollowResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::ValidateFollowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::ValidateFollowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::CheckRateLimitRequest*
Arena::CreateMaybeMessage< ::sonet::follow::v1::CheckRateLimitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::CheckRateLimitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sonet::follow::v1::CheckRateLimitResponse*
Arena::CreateMaybeMessage< ::sonet::follow::v1::CheckRateLimitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sonet::follow::v1::CheckRateLimitResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
