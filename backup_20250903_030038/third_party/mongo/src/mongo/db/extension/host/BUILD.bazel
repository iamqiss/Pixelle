load("//bazel:mongo_src_rules.bzl", "mongo_cc_library", "mongo_cc_unit_test")

package(default_visibility = ["//visibility:public"])

exports_files([
    "document_source_extension_test.cpp",
])

mongo_cc_library(
    name = "api",
    srcs = [
        "document_source_extension.cpp",
        "host_portal.cpp",
    ],
    hdrs = [
        "aggregation_stage.h",
        "byte_buf.h",
        "document_source_extension.h",
        "extension_handle.h",
        "extension_status.h",
        "handle.h",
        "host_portal.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/mongo/db/extension/public:api",
        # Note, for the time being we are linking in the C++ SDK here to reduce code duplication.
        # Eventually, we may decouple the C++ SDK from the server and remove this dependency.
        "//src/mongo/db/extension/sdk:sdk_cpp",
        "//src/mongo:base",
        "//src/mongo/db/pipeline",
    ],
)

mongo_cc_library(
    name = "extension_loader",
    srcs = ["load_extension.cpp"],
    hdrs = ["load_extension.h"],
    deps = [
        "//src/mongo:base",
        "//src/mongo:core_headers_library",
        "//src/mongo/db/extension/host:api",
        "//src/mongo/db/extension/public:api",
        "//src/mongo/db/extension/sdk:sdk_cpp",
        "//src/mongo/db/query:query_knobs",
    ],
)

mongo_cc_unit_test(
    name = "extensions_api_test",
    srcs = [
        "load_extension_test.cpp",
    ],
    # Data lists the targets that must be built to generate extension shared libraries, which are
    # loaded in the unit tests.
    data = [
        # TODO SERVER-109108: Remove this entry when the bar extension is no longer needed.
        "//src/mongo/db/extension/test_examples:bar_mongo_extension",
        # TODO SERVER-109108: Remove this entry when the buzz extension is no longer needed.
        "//src/mongo/db/extension/test_examples:buzz_mongo_extension",
        "//src/mongo/db/extension/test_examples:foo_mongo_extension",
        "//src/mongo/db/extension/test_examples:host_version_fails_bad_extension",
        "//src/mongo/db/extension/test_examples:hostVersionSucceeds_mongo_extension",
        "//src/mongo/db/extension/test_examples:initialize_version_fails_bad_extension",
        "//src/mongo/db/extension/test_examples:loadTwoStages_mongo_extension",
        "//src/mongo/db/extension/test_examples:no_symbol_bad_extension",
        "//src/mongo/db/extension/test_examples:null_mongo_extension_bad_extension",
        "//src/mongo/db/extension/test_examples:major_version_too_high_bad_extension",
        "//src/mongo/db/extension/test_examples:major_version_too_low_bad_extension",
        "//src/mongo/db/extension/test_examples:minor_version_too_high_bad_extension",
        "//src/mongo/db/extension/test_examples:null_initialize_function_bad_extension",
        "//src/mongo/db/extension/test_examples:major_version_max_int_bad_extension",
        "//src/mongo/db/extension/test_examples:duplicate_stage_descriptor_bad_extension",
        "//src/mongo/db/extension/test_examples:null_stage_descriptor_bad_extension",
        "//src/mongo/db/extension/test_examples:duplicate_version_bad_extension",
        "//src/mongo/db/extension/test_examples:no_compatible_version_bad_extension",
        "//src/mongo/db/extension/test_examples:loadHighestCompatibleVersion_mongo_extension",
    ],
    tags = ["mongo_unittest_seventh_group"],
    target_compatible_with = select({
        "//bazel/config:shared_archive_or_link_dynamic": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }) + select({
        "@platforms//os:linux": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    deps = [
        ":extension_loader",
        "//src/mongo/db/pipeline:aggregation_context_fixture",
        "//src/mongo/idl:server_parameter_test_controller",
        "//src/mongo/unittest",
    ],
)
